<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 人生は儚く短い。</title>
    <link>https://ziwon.github.io/post/</link>
    <description>Recent content in Posts on 人生は儚く短い。</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://github.com/ziwon&#34;&gt;Philbert Yoon&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 27 Jan 2019 01:12:00 +0900</lastBuildDate>
    
	<atom:link href="https://ziwon.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TGI Kubernetes 003: Istio</title>
      <link>https://ziwon.github.io/post/tgik-003/</link>
      <pubDate>Sun, 27 Jan 2019 01:12:00 +0900</pubDate>
      
      <guid>https://ziwon.github.io/post/tgik-003/</guid>
      <description>TGIK 003: Istio 세번째 에피소드는 Istio에 다루고 있다. Istio를 돌려본 적은 없기 때문에 같이 배울 것이라고 한다.
•••
Service Network 앞서 자신이 발표한 자료를 참고하여, 서비스 네트워크에 대해 간략히 언급한다. 해당 슬라이드는 The Operations Dividend - Joe Beda (LinuxCon North America 2016)를 참고한다.
여러 가지 타입의 마이크로 서비스가 있을 수 있다.
 Implementation Detail (어플리케이션의 세부 구현, 모놀리틱 서비스가 나뉘어 각각의 모듈로 세부 구현된 서비스 ) Shared Artificat, Priavete Instance (MySQL 데이터베이스처럼 개인 인스턴스를 하나씩 가지고 개발) Shared Instance (큰 조직의 공유 인스턴스, 다른 곳의 여러 팀과 팀이 사용하는 단일 서비스) Big-S Servie (회사 외부로 확장된 완전히 구현된 Saas 모델, 예.</description>
    </item>
    
    <item>
      <title>TGI Kubernetes 002: Networking and Services</title>
      <link>https://ziwon.github.io/post/tgik-002/</link>
      <pubDate>Sat, 19 Jan 2019 08:12:00 +0900</pubDate>
      
      <guid>https://ziwon.github.io/post/tgik-002/</guid>
      <description>TGIK: Thanks God It&amp;rsquo;s Kubernetes 두 번째 에피소드는 네트워킹과 서비스에 관해 다룬다. 관련 링크나 노트는 없다.
 결국, heptio-quickstart를 AWS에 올리고 따라해보았다. 아무래도 GCP UI나 커맨드라인 결과가 조금 다른 것으로 인해 혼란의 여지가 있을 것 같다. QuickStart이긴 하나, CloudFormation 기반으로 Kubernetes 컴포넌트들을 설치해가는 스크립트를 하나하나씩 살펴보는 것도 유의미해보인다.
 •••
Networking 먼저, 10개의 kuard Pod를 띄운다.
$ kubectl run --replicas=10 --image=gcr.io/kuar-demo/kuard-amd64:1 kuard deployment.apps &amp;#34;kuard&amp;#34; created $ kubectl get pods NAME READY STATUS RESTARTS AGE kuard-dbdd7955d-4kdbr 1/1 Running 0 13s kuard-dbdd7955d-5r757 1/1 Running 0 13s kuard-dbdd7955d-dhts5 1/1 Running 0 13s kuard-dbdd7955d-hsl87 1/1 Running 0 13s kuard-dbdd7955d-k8x7l 1/1 Running 0 13s kuard-dbdd7955d-ms8hb 1/1 Running 0 13s kuard-dbdd7955d-qfjbk 1/1 Running 0 13s kuard-dbdd7955d-tfgdl 1/1 Running 0 13s kuard-dbdd7955d-v8lj2 1/1 Running 0 13s kuard-dbdd7955d-wzcf4 1/1 Running 0 13s port-forward으로 실행 중인 kuard에 접속해본다.</description>
    </item>
    
    <item>
      <title>[번역] 확장성 있고, 이식성 있는 도커 컨테이너 네트워크 설계</title>
      <link>https://ziwon.github.io/post/designing-scalable-portable-docker-container-networks/</link>
      <pubDate>Wed, 16 Jan 2019 08:23:00 +0900</pubDate>
      
      <guid>https://ziwon.github.io/post/designing-scalable-portable-docker-container-networks/</guid>
      <description>원문: Docker Reference Architecture: Designing Scalable, Portable Docker Container Networks (오역 및 오타는 댓글로 알려주세요)
※ 컨테이너가 아닌 Pod간의 Kubernetes 네트워킹 모델은 도커 네트워킹 모델과 좀 다릅니다. 자세한 내용은 하단의 기타 아티클을 참조하세요.
 배우게 될 것 도커 컨테이너는 실행에 필요한 모든 것, 즉 코드, 런타임, 시스템 도구, 시스템 라이브러리 등 서버에 설치할 수 있는 모든 것을 포함하는 완전한 파일 시스템에 있는 소프트웨어 하나를 래핑한다. 이는 소프트웨어가 환경에 관계없이 항상 동일한 기능을 실행할 것을 보장한다.</description>
    </item>
    
    <item>
      <title>TGI Kubernetes 001: A Quick Tour</title>
      <link>https://ziwon.github.io/post/tgik-001/</link>
      <pubDate>Sun, 13 Jan 2019 17:12:00 +0000</pubDate>
      
      <guid>https://ziwon.github.io/post/tgik-001/</guid>
      <description>TGIK: Thanks God It&amp;rsquo;s Kubernetes 유튜브를 검색하다가, 지난 2017년부터 Kubernetes라는 주제로 Heptio에서 매주 금요일마다 라이브 스트리밍을 하고 있다는 것을 알게 되었다. 아무래도 제한적인 실무 경험이나 개인적인 스터디만으로는 한계가 있기 때문에, 하나씩 팔로우업 해보고자 한다.
 TGIK 깃헙 리포지토리 TGIK 유트브 공식채널 TGIK 전체 목록, recollir&amp;rsquo;s Playlist  A Quick Tour 첫 번째 에피소드의 내용은 다음 링크를 참고한다.
 https://github.com/heptio/tgik/tree/master/episodes/001  내용은 kubeadm을 기반으로 AWS에 Kubernetes 클러스터를 구동해보는 것이다. 이 내용은 APN(AWS Partner Network)의 기술 파트너인 Heptio가 AWS에 작성한 쿠버네티스 가이드 문서인 Quick Start for Kubernetes by Heptio에 소개되어 있다.</description>
    </item>
    
    <item>
      <title>Kops에서 Bastion 호스트 SSH로 접속하기</title>
      <link>https://ziwon.github.io/post/bastion-in-kops/</link>
      <pubDate>Wed, 02 Jan 2019 12:12:00 +0000</pubDate>
      
      <guid>https://ziwon.github.io/post/bastion-in-kops/</guid>
      <description>네트워크에서 바스티온 호스트(Bastion Host)는 침입차단 소프트웨어가 설치되어 내부와 외부 네트워크 사이에서 일종의 게이트 역할을 수행하는 호스트로 네트워크 보안에 가장 중요한 방화벽 호스트로써 방화벽의 메인서버를 의미하기도 한다.1
AWS 컨텍스트에서는 바스티온 호스트를 내부 네트워크에 접속할 수 있는 서버로 정의하는데 2, Kops에서는 바스티온 호스트를 프로비저닝하고 3, 이를 통해 프라이빗 네트워크 인스턴스에 접속한다. (AWS 바스티온 구조 4)
이를 테면, 다음과 같이 쿠버네티스 마스터 노드와 워커 노드가 구성되어 있다고 하자. 이들 인스턴스들은 내부 네트워크에 존재하므로 바스티온 호스트를 통해 접속해야 한다.</description>
    </item>
    
    <item>
      <title>[번역] 최신 네트워크 로드 밸런싱 및 프록시 소개</title>
      <link>https://ziwon.github.io/post/modern-network-load-balancing-and-proxying/</link>
      <pubDate>Mon, 05 Nov 2018 02:37:00 +0000</pubDate>
      
      <guid>https://ziwon.github.io/post/modern-network-load-balancing-and-proxying/</guid>
      <description>Envoy Creator인 Matt Klein의 Envoy 소개 동영상을 보고 Envoy에 완전히 매료되어 좀 더 자세한 배경지식을 알고자 번역해 보았습니다. 원본 출처는 Introduction to modern network load balancing and proxying입니다.
 최근 네트워크 로드 밸런싱과 프록시에 관한 입문 교육 자료가 부족하다는 사실이 관심을 끌었습니다. 어떻게 이게 가능하지? 라고 속으로 생각했습니다. 로드 밸런싱은 안정적인 분산 시스템 구축에 필요한 핵심 개념 중 하나입니다. 당연히 쓸만한 고급진 정보들이 있어야 합니다. 검색을 해보았으나 사실 쓸만한 것들이 별로 없다는 것을 알게 되었습니다.</description>
    </item>
    
    <item>
      <title>[번역] 파이썬 매직 메소드 (Python&#39;s Magic Methods)</title>
      <link>https://ziwon.github.io/post/python_magic_methods/</link>
      <pubDate>Mon, 30 Jan 2017 03:37:00 +0000</pubDate>
      
      <guid>https://ziwon.github.io/post/python_magic_methods/</guid>
      <description>A guide to Python&amp;rsquo;s magic methods를 번역한 문서입니다.
 서론 이 가이드는 몇 달 간의 블로그 게시물의 정점입니다. 주제는 매직 메소드(magic methods) 입니다.
매직 메소드가 뭘까요? 이들은 객체지향 파이썬의 모든 것입니다. 클래스에 &amp;ldquo;마법&amp;rdquo;을 추가하기 위해 정의할 수 있는 특수한 메소드입니다. 항상 두 개의 밑줄로 둘러싸입니다. (예: __init__ 또는 __lt__) 또한 필요한 만큼 문서화되지 않았습니다. 파이썬에 대한 모든 매직 메소드가 파이썬 문서의 동일한 섹션에 있지만, 흩어져 있고, 느슨하게 구성되어 있습니다.</description>
    </item>
    
    <item>
      <title>Using custom model_to_dict() in Django</title>
      <link>https://ziwon.github.io/post/using_custom_model_to_dict_in_django/</link>
      <pubDate>Fri, 09 Dec 2016 11:00:25 +0900</pubDate>
      
      <guid>https://ziwon.github.io/post/using_custom_model_to_dict_in_django/</guid>
      <description>In Django, when converting a database model to a dictionary, I usually used to convert only the member variables corresponding to the column of the table to handle the response to the request in the form of Json and so on. But, whenever you encounter a member variable of type ManyToManyField, it would be too cumbersome to write three or four lines of code each time to loop around to get their values from the member variables of the ManyToManyField in a model object.</description>
    </item>
    
    <item>
      <title>[번역] Effective Go: Concurrency</title>
      <link>https://ziwon.github.io/post/effective-go-concurrency/</link>
      <pubDate>Fri, 25 Sep 2015 11:01:21 +0900</pubDate>
      
      <guid>https://ziwon.github.io/post/effective-go-concurrency/</guid>
      <description>2016.10.04 - Effective Go의 한글화 작업이완료되었습니다. 아래 동시성 번역 역시 번역팀의 도움으로 갱신되었습니다.
Effective Go 의 한글화 문서를 보던 중, Concurrency에 대한 부분이 빠져 있어서 해당 부분만 따로 번역했습니다. 원문의 출처는 여기입니다.
 통신에 의한 공유 (Share by communicating) 동시성 프로그래밍은 광범위한 주제이므로 여기에서는 Go에 한정된 중요한 것들에 대해서만 지면을 할애한다.
다양한 환경에서 동시성 프로그래은 공유 변수에 대한 정확한 접근을 구현하기 위해 엄수해야 하는 세세한 내용들로 어려워졌다. Go는 공유 변수가 채널을 돌려가며 전달된다는 점에서 다른 접근을 권장한다.</description>
    </item>
    
    <item>
      <title>Falcon REST API</title>
      <link>https://ziwon.github.io/post/falcon-rest-template/</link>
      <pubDate>Fri, 04 Sep 2015 00:27:35 +0900</pubDate>
      
      <guid>https://ziwon.github.io/post/falcon-rest-template/</guid>
      <description>Cloud API와 백엔드 개발에 경량화된 파이썬 프레임워크인 Falcon를 이용해 간단한 REST API 템플릿을 만들어 보았다.
https://github.com/patriz/falcon-rest-api
개발하는 느낌은 Flask와 비슷한데 (음.. Flask와 뭐가 다르지?) 미들웨어, 후킹 데코레이션 등을 이용해 HTTP 요청과 응답에 대해 체이닝 처리를 좀 더 직관적으로 할 수 있다. 성능이 Flask보다 좀 더 빠른 것으로 알려져 있다. Rackspace에서 밀고있는(?) Cloud API 전용 프레임워크인데, 최신 릴리즈 버전은 아직 0.3이다. 심플하고 미니멀한 걸 좋아한다면 해볼만하다.
문서에도 나와있지만, Cython을 이용하면 약 20% 정도의 성능효과를 볼 수 있다.</description>
    </item>
    
    <item>
      <title>Generics of a Higher Kind</title>
      <link>https://ziwon.github.io/post/generics-of-a-higher-kind/</link>
      <pubDate>Sat, 30 Aug 2014 17:23:11 +0900</pubDate>
      
      <guid>https://ziwon.github.io/post/generics-of-a-higher-kind/</guid>
      <description>1. Introduction 일차 매개변수적 다형성과 고차 타입 생성자 다형성  일차 매개변수적 다형성은 정적 타입 프로그래밍 언어의 표준 요소임 일차 매개변수적 다형성은 제네릭(generic)이라고 부름 제네릭의 한 가지 응용 분야는 콜렉션(collection)  예) List[A] 타입은 주어진 요소 A 타입의 리스트를 표현, A는 자유롭게 선택됨  일차 매개변수적 다형성은 List와 같은 타입 생성자를 도출하며 타입을 추상화 함 그러나 결과로 나온 타입 생성자는 그들 자신을 추상화할 수 없음  예) List와 같은 타입 생성자를 다른 타입 생성자의 타입 인자로 전달할 수 없음  이런 제한은 자연스러운 추상를 정형화하는데 방해가 되며 불필요한 중복 코드로 이어짐  고차 타입 생성자 다형성와 카인드  고차 타입 생성자 다형성을 통해 더 많은 제네럴티를 확보할 수 있음 이 논문에서는 Scala 프로그래밍 언어의 타입 생성자 다형성의 설계와 구현에 대해 살펴봄 Scala 2.</description>
    </item>
    
    <item>
      <title>Principles of Reactive Programming</title>
      <link>https://ziwon.github.io/post/principles-of-reactive-programming/</link>
      <pubDate>Wed, 22 Jan 2014 11:15:43 +0900</pubDate>
      
      <guid>https://ziwon.github.io/post/principles-of-reactive-programming/</guid>
      <description>Finally got my certificate for the Coursera &amp;ldquo;Principles of Reactive Programming&amp;rdquo; course. :) It was rather easy in the beginning, but became more challenging as it went on. Now where to go?</description>
    </item>
    
    <item>
      <title>Lambda Calculus</title>
      <link>https://ziwon.github.io/post/lambda-calculus/</link>
      <pubDate>Tue, 22 Oct 2013 13:03:05 +0900</pubDate>
      
      <guid>https://ziwon.github.io/post/lambda-calculus/</guid>
      <description>람다 대수는 결정문제(decision problem)를 풀기 위해, 계산가능성(computability)의 개념을 정의한 수학적 모델로 1936년 알로존 처치(Alonzo Church)가 고안하였다.
좀 더 구체적으로는 소프트웨어에서 &amp;lsquo;알고리즘이란 무엇인가?&amp;lsquo;를 정의한 클래스(class)나 객체(object)가 아닌 값(function) 중심 언어, 즉 함수형 언어의 계산 모델이다. (같은 해에 처치의 제자였던, 앨런 튜닝은 튜링 머신의 개념으로 계산 모델을 정의했다. Lisp를 만든 존 매카시
람다 대수는 그 자체가 이미 하나의 언어로 많은 함수형 프로그래밍 언어가 람다대수에 기초하고 있다.
 functional language = lambda calcus + sugars (ex.</description>
    </item>
    
  </channel>
</rss>