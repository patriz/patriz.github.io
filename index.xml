<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>人生は儚く短い。</title>
    <link>https://ziwon.github.io/</link>
    <description>Recent content on 人生は儚く短い。</description>
    <generator>Hugo - gohugo.io</generator>
    <language>en</language>
    <contact>yngpil.yoon@gmail.com</contact>
    <copyright><a href="https://github.com/ziwon">Philbert Yoon</a></copyright>
    
        <atom:link href="https://ziwon.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TGI Kubernetes 002: Networking and Services</title>
      <link>https://ziwon.github.io/post/tgik-002/</link>
      <pubDate>Sat, 19 Jan 2019 08:12:00 +0900</pubDate>
      <author>Philbert Yoon</author>
      <guid>https://ziwon.github.io/post/tgik-002/</guid>
      <description></description>
      
      <content>

&lt;h1 id=&#34;tgik-thanks-god-it-s-kubernetes&#34;&gt;TGIK: Thanks God It&amp;rsquo;s Kubernetes&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/heptio/tgik/tree/master/episodes/002&#34; target=&#34;_blank&#34;&gt;두 번째 에피소드&lt;/a&gt;는 네트워킹과 서비스에 관해 다룬다. 관련 링크나 노트는 없다.&lt;/p&gt;

&lt;p&gt;결국, heptio-quickstart를 AWS에 올리고 따라해보았다. GCP UI나 커맨드라인 결과가 조금 다른 것으로 인해 혼란의 여지가 있을 것 같다. CloudFormation 기반으로 Kubernetes 컴포넌트들을 하나씩 설치해가는 내용도 충분히 살펴볼만하다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;•••&lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;networking&#34;&gt;Networking&lt;/h1&gt;

&lt;p&gt;먼저, 10개의 &lt;code&gt;kuard&lt;/code&gt; &lt;code&gt;Pod&lt;/code&gt;를 띄운다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl run --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; --image&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gcr.io/kuar-demo/kuard-amd64:1 kuard
deployment.apps &lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard&amp;#34;&lt;/span&gt; created

$ kubectl get pods
NAME                    READY     STATUS    RESTARTS   AGE
kuard-dbdd7955d-4kdbr   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13s
kuard-dbdd7955d-5r757   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13s
kuard-dbdd7955d-dhts5   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13s
kuard-dbdd7955d-hsl87   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13s
kuard-dbdd7955d-k8x7l   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13s
kuard-dbdd7955d-ms8hb   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13s
kuard-dbdd7955d-qfjbk   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13s
kuard-dbdd7955d-tfgdl   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13s
kuard-dbdd7955d-v8lj2   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13s
kuard-dbdd7955d-wzcf4   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;port-forward&lt;/code&gt;으로 실행 중인 &lt;code&gt;kuard&lt;/code&gt;에 접속해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl port-forward kuard-dbdd7955d-4kdbr &lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;:8080&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 해당 &lt;code&gt;Pod&lt;/code&gt;의 쉘에 접속해서 호스트 이름과 IP 주소를 확인한다. 호스트 네임은 &lt;code&gt;kuard-dbdd7955d-4kdbr&lt;/code&gt;이고, IP 주소는 &lt;code&gt;192.168.3.140&lt;/code&gt;으로 확인된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it kuard-dbdd7955d-4kdbr ash
~ $ hostname
kuard-dbdd7955d-4kdbr
~ $ ifconfig
eth0      Link encap:Ethernet  HWaddr 4E:C8:47:58:DF:76  
          inet addr:192.168.3.140  Bcast:0.0.0.0  Mask:255.255.255.255
          inet6 addr: fe80::4cc8:47ff:fe58:df76/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:1 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:648 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;648&lt;/span&gt;.0 B&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  TX bytes:648 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;648&lt;/span&gt;.0 B&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1 
          RX bytes:0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.0 B&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  TX bytes:0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.0 B&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또는 다음과 같이 &lt;code&gt;-o wide&lt;/code&gt; 옵션으로 &lt;code&gt;Node&lt;/code&gt;와 &lt;code&gt;Pod&lt;/code&gt;의 IP 주소를 같이 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl get pods -o wide
NAME                    READY     STATUS    RESTARTS   AGE       IP              NODE
kuard-dbdd7955d-4kdbr   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2m        &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.3.140   ip-10-0-8-254.ap-northeast-2.compute.internal
kuard-dbdd7955d-5r757   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2m        &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.49.6    ip-10-0-8-176.ap-northeast-2.compute.internal
kuard-dbdd7955d-dhts5   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2m        &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.49.9    ip-10-0-8-176.ap-northeast-2.compute.internal
kuard-dbdd7955d-hsl87   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2m        &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.49.10   ip-10-0-8-176.ap-northeast-2.compute.internal
kuard-dbdd7955d-k8x7l   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2m        &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.49.8    ip-10-0-8-176.ap-northeast-2.compute.internal
kuard-dbdd7955d-ms8hb   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2m        &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.3.137   ip-10-0-8-254.ap-northeast-2.compute.internal
kuard-dbdd7955d-qfjbk   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2m        &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.3.138   ip-10-0-8-254.ap-northeast-2.compute.internal
kuard-dbdd7955d-tfgdl   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2m        &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.3.136   ip-10-0-8-254.ap-northeast-2.compute.internal
kuard-dbdd7955d-v8lj2   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2m        &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.3.139   ip-10-0-8-254.ap-northeast-2.compute.internal
kuard-dbdd7955d-wzcf4   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2m        &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.49.7    ip-10-0-8-176.ap-northeast-2.compute.internal&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;보다시피, Kubernetes에서 Pod은 자신의 고유 IP를 가지고 있고, Pod의 IP가 Node의 IP와는 다르다는 것에 주목한다. 이는 Kubernetes의 전신인 구글의 Borg 또는 Borg에서 영감을 받은 Mezzos, 또는 단순히 여러 도커가 실행되는 기타 노드 클러스터와는 다른 점이라고 한다. Borg에서는 많은 워크로드들이 IP를 공유했었다고 한다. 이는 여러가지 문제와 복잡성을 야기했다. 이를 테면, IP를 공유하기 때문에 포트를 할당받을 수 있는데, Borg는 어느 컨테이너에 어떤 포트가 액세스하는지 알아야만 했고 관리가 복잡해졌다고 한다. 영상에서는 다소 길게 설명하고 있는데, &lt;a href=&#34;https://pdos.csail.mit.edu/6.824/papers/borg.pdf&#34; target=&#34;_blank&#34;&gt;Large-scale cluster management at Google with Borg&lt;/a&gt; 페이퍼의 &lt;strong&gt;8. Lessons and future work&lt;/strong&gt;에서 다음과 같이 언급하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;One IP address per machine complicates things&lt;/strong&gt; 머신마다 하나의 IP 주소가 일을 복잡하게 만든다. Borg에서 시스템의 모든 작업은 호스트의 단일 IP 주소를 사용하므로 호스트의 포트 공간을 공유한다. 이는 여러가지 어려움을 야기한다. Borg는 포트를 리소스로 예약해야 한다. 태스크는 필요한 포트 수를 미리 선언하고, 시작시 어떤 포트를 사용할 지 알아야만 한다. BorgleIP어 정의 네트워킹의 등장으로 인해 Kubernetes는 이러한 복잡성을 제거하는, 보다 사용자 친화적인 접근 방식을 취할 수 있다. 즉, 모든 포드 및 서비스는 고유한 IP 주소를 가지므로, 인프라에서 선택한 포트에 개발자의 소프트웨어를 맞추기 보다는 개발자가 포트를 선택할 수 있고, 포트 관리의 인프라 복잡성을 제거한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Node IP는 다음과 같이 확인할 수 있다. &lt;code&gt;type&lt;/code&gt;에는 &lt;code&gt;ExternalIP&lt;/code&gt; 또는 &lt;code&gt;InternalIP&lt;/code&gt; 등의 값으로 조회할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl get nodes -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.items[*].status.addresses[?(@.type==&amp;#34;InternalIP&amp;#34;)].address}&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tr -s &lt;span class=&#34;s1&#34;&gt;&amp;#39;[[:space:]]&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;pop간의-연결&#34;&gt;Pop간의 연결&lt;/h2&gt;

&lt;p&gt;Pod가 서로 고유한 IP 주소를 가지기 때문에, 다음과 같이 한 &lt;code&gt;Pod(192.168.3.140)&lt;/code&gt;에서 다른 &lt;code&gt;Pod(192.168.49.6)&lt;/code&gt;에 API 요청을 할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it kuard-dbdd7955d-4kdbr ash
~ $ wget -O - &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.49.6:8080/env/api
Connecting to &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.49.6:8080 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.49.6:8080&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;commandLine&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/kuard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOSTNAME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d-c48g5&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://192.168.49.6:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://92.168.49.6:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_ADDR&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;192.168.49.6&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PROTO&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;192.168.49.6&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT_HTTPS&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
-                    &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;% &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;*************************************************************************************************************************&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;473&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:00:00 ETA&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;node와-pod간의-연결&#34;&gt;Node와 Pod간의 연결&lt;/h2&gt;

&lt;p&gt;다음으로, 마스터 노드에 SSH 접속하여 &lt;code&gt;kubectl&lt;/code&gt; 명령의 동작 여부를 살펴본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nv&#34;&gt;SH_KEY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;~/.ssh/id_rsa&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; ssh -i &lt;span class=&#34;nv&#34;&gt;$SSH_KEY&lt;/span&gt; -o &lt;span class=&#34;nv&#34;&gt;ProxyCommand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ssh -i \&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SSH_KEY&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\&amp;#34; ubuntu@13.209.11.49 nc %h %p&amp;#34;&lt;/span&gt; ubuntu@10.0.23.3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl get po -o wide
NAME                    READY     STATUS    RESTARTS   AGE       IP              NODE                                            NOMINATED NODE
kuard-dbdd7955d-4kdbr   1/1       Running   0          25m       192.168.3.140   ip-10-0-8-254.ap-northeast-2.compute.internal   &amp;lt;none&amp;gt;
kuard-dbdd7955d-5r757   1/1       Running   0          25m       192.168.49.6    ip-10-0-8-176.ap-northeast-2.compute.internal   &amp;lt;none&amp;gt;
kuard-dbdd7955d-dhts5   1/1       Running   0          25m       192.168.49.9    ip-10-0-8-176.ap-northeast-2.compute.internal   &amp;lt;none&amp;gt;
kuard-dbdd7955d-hsl87   1/1       Running   0          25m       192.168.49.10   ip-10-0-8-176.ap-northeast-2.compute.internal   &amp;lt;none&amp;gt;
kuard-dbdd7955d-k8x7l   1/1       Running   0          25m       192.168.49.8    ip-10-0-8-176.ap-northeast-2.compute.internal   &amp;lt;none&amp;gt;
kuard-dbdd7955d-ms8hb   1/1       Running   0          25m       192.168.3.137   ip-10-0-8-254.ap-northeast-2.compute.internal   &amp;lt;none&amp;gt;
kuard-dbdd7955d-qfjbk   1/1       Running   0          25m       192.168.3.138   ip-10-0-8-254.ap-northeast-2.compute.internal   &amp;lt;none&amp;gt;
kuard-dbdd7955d-tfgdl   1/1       Running   0          25m       192.168.3.136   ip-10-0-8-254.ap-northeast-2.compute.internal   &amp;lt;none&amp;gt;
kuard-dbdd7955d-v8lj2   1/1       Running   0          25m       192.168.3.139   ip-10-0-8-254.ap-northeast-2.compute.internal   &amp;lt;none&amp;gt;
kuard-dbdd7955d-wzcf4   1/1       Running   0          25m       192.168.49.7    ip-10-0-8-176.ap-northeast-2.compute.internal   &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;다음과 같이 Node 인스턴스에서 Pod에 접속이 되는 것을 확인할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ubuntu@ip-10-0-23-3:~/.kube$ curl 192.168.3.140:8080/env/api
{&amp;quot;commandLine&amp;quot;:[&amp;quot;/kuard&amp;quot;],&amp;quot;env&amp;quot;:{&amp;quot;HOME&amp;quot;:&amp;quot;/&amp;quot;,&amp;quot;HOSTNAME&amp;quot;:&amp;quot;kuard-dbdd7955d-4kdbr&amp;quot;,&amp;quot;KUBERNETES_PORT&amp;quot;:&amp;quot;tcp://10.96.0.1:443&amp;quot;,&amp;quot;KUBERNETES_PORT_443_TCP&amp;quot;:&amp;quot;tcp://10.96.0.1:443&amp;quot;,&amp;quot;KUBERNETES_PORT_443_TCP_ADDR&amp;quot;:&amp;quot;10.96.0.1&amp;quot;,&amp;quot;KUBERNETES_PORT_443_TCP_PORT&amp;quot;:&amp;quot;443&amp;quot;,&amp;quot;KUBERNETES_PORT_443_TCP_PROTO&amp;quot;:&amp;quot;tcp&amp;quot;,&amp;quot;KUBERNETES_SERVICE_HOST&amp;quot;:&amp;quot;10.96.0.1&amp;quot;,&amp;quot;KUBERNETES_SERVICE_PORT&amp;quot;:&amp;quot;443&amp;quot;,&amp;quot;KUBERNETES_SERVICE_PORT_HTTPS&amp;quot;:&amp;quot;443&amp;quot;,&amp;quot;PATH&amp;quot;:&amp;quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: 2017년 데모에서는 &lt;code&gt;KUBECONFIG&lt;/code&gt; 파일의 명시해주고 있는데, 현재 버전에서는 마스터 노드 홈디렉토리에 &lt;code&gt;~/.kube/config&lt;/code&gt; 파일이 존재한다.  &lt;code&gt;kubeadm&lt;/code&gt; v1.8.0부터 kubeadm은 클러스터 구성을 kube-system 네임 스페이스의 kubeadm-config라는 ConfigMap에 업로드하고 나중에 업그레이드 할 때 ConfigMap을 읽는다. 그리고 어드민 설정 정보는 &lt;code&gt;/etc/kubernetes/admin.confg&lt;/code&gt; 파일에 기록된다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;~/.kube/config&lt;/li&gt;
&lt;li&gt;/etc/kubernetes/admin.config&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;데모 영상에 나온 질문에 답변을 다음과 같이 같단히 요약하였다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS 네이티브 라우팅을 이용해서 Kubernetes 클러스터의 노드가 아니어도 클러스터 네트워크에 조인하여 연결될 수 있다.&lt;/li&gt;
&lt;li&gt;Pod을 일반적인 호스트처럼 바로 IP 어드레싱을 할 수 있지만, 대부분 Service나 Isto 서비스 메쉬를 통한다. 물론, Service 없이 할 수도 있다. 그러나 자체의 서비스 디스커버리 매커니즘이 필요할 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;cni&#34;&gt;CNI&lt;/h1&gt;

&lt;p&gt;다음으로 CNI에 대해 설명하고 잇다. CNI는 Kubernetes 컨텍스트가 아니더라도, 많은 컨테이너가 있고 그들 사이의 네트워킹을 구성해야 한다면, 표준 인터페이스로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;다음과 같이 CloudFormation에 명시한 Calico 플러그인 정보는 아래 경로에서 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ubuntu@ip-10-0-23-3:~$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /etc/cni/net.d/
ubuntu@ip-10-0-23-3:/etc/cni/net.d$ ls
&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;-calico.conflist  calico-kubeconfig&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;10-calico.conflist&lt;/code&gt;을 보면, Pod 네트워크에 Calio 플러그인을 사용할 것을 명시하고 있다. IPAM 주소 관리는 &lt;code&gt;calico-ipam&lt;/code&gt;을 사용한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ubuntu@ip-10-0-23-3:/etc/cni/net.d$ cat &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;-calico.conflist 
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;k8s-pod-network&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;cniVersion&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.3.0&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;calico&amp;#34;&lt;/span&gt;,
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;log_level&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;,
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;etcd_endpoints&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://10.96.232.136:6666&amp;#34;&lt;/span&gt;,
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;mtu&amp;#34;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt;,
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;ipam&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;calico-ipam&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;policy&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;k8s&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubeconfig&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;/etc/cni/net.d/calico-kubeconfig&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
    &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;portmap&amp;#34;&lt;/span&gt;,
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;snat&amp;#34;&lt;/span&gt;: true,
      &lt;span class=&#34;s2&#34;&gt;&amp;#34;capabilities&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;portMappings&amp;#34;&lt;/span&gt;: true&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;calico API를 호출시 사용되는 Kubernetes 설정 내용이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ubuntu@ip-10-0-23-3:/etc/cni/net.d$ sudo cat calico-kubeconfig 
&lt;span class=&#34;c1&#34;&gt;# Kubeconfig file for Calico CNI plugin.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;apiVersion: v1
kind: Config
clusters:
- name: &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;
  cluster:
    server: https://&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.96.0.1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;:443
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JS...S0tLQo&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
users:
- name: calico
  user:
    token: &lt;span class=&#34;s2&#34;&gt;&amp;#34;eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc...&amp;#34;&lt;/span&gt;
contexts:
- name: calico-context
  context:
    cluster: &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;
    user: calico
current-context: calico-context&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;컨테이너로 해야할 어떤 작업이 있을 때마다 플러그인이 호출된다고 한다. 컨테이너의 여러 인터페이스에 대해 여러 개의 플러그인을 구성할 수 있다. 예를 들면, 컨테이너를 런칭할 때, 도커는 내부에 네트워크 네임스페이스를 셋업하는데, CNI는 도커의 모든 네트워크 설정을 가져와 도커와 마찬가지로 네임스페이스 설정을 한 뒤에 Kubernetes의 플러그형 시스템으로 확장하는 역할을 한다고 한다. (매우 간략하게 설명하게 넘어간다.)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/opt/cni/bin&lt;/code&gt;으로 이동하면, 여러가지 CNI 배포 패키지들을 볼 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ubuntu@ip-10-0-23-3: &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /opt/cni/bin
ubuntu@ip-10-0-23-3:/opt/cni/bin$ ls
bridge  calico  calico-ipam  dhcp  flannel  host-local  ipvlan  loopback  macvlan  portmap  ptp  sample  tuning  vlan&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;calico&lt;/code&gt;를 실행해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ubuntu@ip-10-0-23-3:/opt/cni/bin$ ./calico
CNI_COMMAND env variable missing
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;code&amp;#34;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;,
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;required env variables missing&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;에러를 반환한다. 위에서 보다시피 CNI에 대한 API 호출은 여러가지 환경설정 변수를 넘겨주는데, CNI는 다른 UNIX 네트워킹 프로세스를 셋업할 수 있는 API 호출이라는 것을 알 수 있다.&lt;/p&gt;

&lt;h1 id=&#34;service&#34;&gt;Service&lt;/h1&gt;

&lt;p&gt;다음 명령은 &lt;code&gt;type&lt;/code&gt;이 &lt;code&gt;LoadBalancer&lt;/code&gt;이고, 이름이 &lt;code&gt;kuard&lt;/code&gt;인 Service를 생성하여 Kubernetes 클러스터 내의 Pod을 클러스터 외부 로드 밸런서와 연결시킨다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl expose deployment kuard --type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;LoadBalancer --target-port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt; --port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Service와 Pop은 서로에 대해 알지 못하나 Pod의 &lt;code&gt;label&lt;/code&gt;로 Service와 Pod이 서로 코디네이션된다. (&lt;code&gt;label&lt;/code&gt;을 통해 매핑되는 Service와 Pod의 메카니즘에 대해 설명하고 있는 자료가 이미 많으므로 넘어가기로 한다.)&lt;/p&gt;

&lt;p&gt;서비스에는 다음과 같이 4가지 타입이 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ExternalName&lt;/li&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;li&gt;ClusterIP&lt;/li&gt;
&lt;li&gt;NodePort&lt;/li&gt;
&lt;li&gt;LoadBalancer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;externalname&#34;&gt;ExternalName&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ExternalName&lt;/code&gt; 타입은 Kubernetes의 자체 서비스 디스커버리을 사용하되, Kubernetes 외부의 이름을 가리키는 Service를 생성한다. Kubernetes 내부와 외부를 매핑시켜줄 때 사용한다. (알다시피, [external-dns[(&lt;a href=&#34;https://github.com/kubernetes-incubator/external-dns)를&#34; target=&#34;_blank&#34;&gt;https://github.com/kubernetes-incubator/external-dns)를&lt;/a&gt; 애드온을 연동하게 되면, AWS, GCP 등의 DNS와 매핑된다.)&lt;/p&gt;

&lt;h2 id=&#34;none&#34;&gt;None&lt;/h2&gt;

&lt;p&gt;Service 타입이 None인 경우는 named label query가 되는 기저 레벨이라고 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;None&lt;/code&gt; 타입으로 선언한 Service의 내용은 다음과 같이 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl expose deployment kuard --type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;None --target-port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt; --port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; -o yaml --dry-run&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt;의 값이 &lt;code&gt;None&lt;/code&gt;이고 이름이 &lt;code&gt;kuard&lt;/code&gt;인 Service이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;creationTimestamp&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;labels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;port&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;protocol&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;TCP&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;targetPort&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;selector&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;None&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;status&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;loadBalancer&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 Kubernetes 상에서 &lt;code&gt;kuard&lt;/code&gt;라는 &lt;code&gt;Service&lt;/code&gt;는 다음과 같은 &lt;code&gt;Endpoints&lt;/code&gt;로 디코딩된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# $ kubectl get endpoints kuard&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Endpoints&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;creationTimestamp&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2019-01-18T07:57:55Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;labels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;resourceVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10106&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;selfLink&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/api/v1/namespaces/default/endpoints/kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;uid&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;c395caf3-1af6-&lt;span class=&#34;m&#34;&gt;11e9&lt;/span&gt;-befa-0209e53cf850&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;subsets&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;addresses&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;192.168&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;3.136&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;nodeName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip-&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;254.&lt;/span&gt;ap-northeast-&lt;span class=&#34;m&#34;&gt;2.&lt;/span&gt;compute.internal&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;targetRef&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Pod&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard-dbdd7955d-tfgdl&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;resourceVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1935&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;uid&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;411010f3-1ae9-&lt;span class=&#34;m&#34;&gt;11e9&lt;/span&gt;-befa-0209e53cf850&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;192.168&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;3.137&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;nodeName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip-&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;254.&lt;/span&gt;ap-northeast-&lt;span class=&#34;m&#34;&gt;2.&lt;/span&gt;compute.internal&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;targetRef&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Pod&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard-dbdd7955d-ms8hb&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;resourceVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1938&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;uid&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;4108db60-1ae9-&lt;span class=&#34;m&#34;&gt;11e9&lt;/span&gt;-befa-0209e53cf850&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;192.168&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;3.138&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;nodeName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip-&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;254.&lt;/span&gt;ap-northeast-&lt;span class=&#34;m&#34;&gt;2.&lt;/span&gt;compute.internal&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;targetRef&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Pod&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard-dbdd7955d-qfjbk&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;resourceVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1949&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;uid&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;410b40b7-1ae9-&lt;span class=&#34;m&#34;&gt;11e9&lt;/span&gt;-befa-0209e53cf850&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;192.168&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;3.139&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;nodeName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip-&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;254.&lt;/span&gt;ap-northeast-&lt;span class=&#34;m&#34;&gt;2.&lt;/span&gt;compute.internal&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;targetRef&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Pod&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard-dbdd7955d-v8lj2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;resourceVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1965&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;uid&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;41102fed-1ae9-&lt;span class=&#34;m&#34;&gt;11e9&lt;/span&gt;-befa-0209e53cf850&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;192.168&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;3.140&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;nodeName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip-&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;254.&lt;/span&gt;ap-northeast-&lt;span class=&#34;m&#34;&gt;2.&lt;/span&gt;compute.internal&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;targetRef&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Pod&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard-dbdd7955d-4kdbr&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;resourceVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1982&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;uid&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;411761d7-1ae9-&lt;span class=&#34;m&#34;&gt;11e9&lt;/span&gt;-befa-0209e53cf850&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;192.168&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;49.10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;nodeName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip-&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;176.&lt;/span&gt;ap-northeast-&lt;span class=&#34;m&#34;&gt;2.&lt;/span&gt;compute.internal&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;targetRef&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Pod&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard-dbdd7955d-hsl87&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;resourceVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1985&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;uid&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;41177ccd-1ae9-&lt;span class=&#34;m&#34;&gt;11e9&lt;/span&gt;-befa-0209e53cf850&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;192.168&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;49.6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;nodeName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip-&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;176.&lt;/span&gt;ap-northeast-&lt;span class=&#34;m&#34;&gt;2.&lt;/span&gt;compute.internal&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;targetRef&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Pod&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard-dbdd7955d-5r757&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;resourceVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1952&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;uid&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;41102166&lt;/span&gt;-1ae9-&lt;span class=&#34;m&#34;&gt;11e9&lt;/span&gt;-befa-0209e53cf850&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;192.168&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;49.7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;nodeName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip-&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;176.&lt;/span&gt;ap-northeast-&lt;span class=&#34;m&#34;&gt;2.&lt;/span&gt;compute.internal&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;targetRef&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Pod&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard-dbdd7955d-wzcf4&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;resourceVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1962&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;uid&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;41178be2-1ae9-&lt;span class=&#34;m&#34;&gt;11e9&lt;/span&gt;-befa-0209e53cf850&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;192.168&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;49.8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;nodeName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip-&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;176.&lt;/span&gt;ap-northeast-&lt;span class=&#34;m&#34;&gt;2.&lt;/span&gt;compute.internal&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;targetRef&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Pod&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard-dbdd7955d-k8x7l&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;resourceVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1969&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;uid&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;410b5dad-1ae9-&lt;span class=&#34;m&#34;&gt;11e9&lt;/span&gt;-befa-0209e53cf850&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;192.168&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;49.9&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;nodeName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ip-&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;-&lt;span class=&#34;m&#34;&gt;176.&lt;/span&gt;ap-northeast-&lt;span class=&#34;m&#34;&gt;2.&lt;/span&gt;compute.internal&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;targetRef&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Pod&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard-dbdd7955d-dhts5&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;resourceVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1977&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;uid&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;410ff0b5-1ae9-&lt;span class=&#34;m&#34;&gt;11e9&lt;/span&gt;-befa-0209e53cf850&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;port&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;protocol&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;TCP&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;보다시피 &lt;code&gt;kuard&lt;/code&gt; 엔드포인트의 프로토콜은 &lt;code&gt;TCP&lt;/code&gt;, 포트는 &lt;code&gt;8080&lt;/code&gt;,그리고 &lt;code&gt;kuard&lt;/code&gt; Pod에 대한 여러 IP 주소의 집합으로 구성되어 있다. Pop의 헬스체크로 인해 Pod이 죽었다고 판단될 경우, 엔드포인트에서는 보이지 않게 된다. 즉, 일종의 Sanity Filtering이 동작하는 것으로, 서비스 디스커버리가 동작하는 기본적인 메카니즘이라 할 수 있다.&lt;/p&gt;

&lt;h2 id=&#34;clusterip&#34;&gt;ClusterIP&lt;/h2&gt;

&lt;p&gt;현재 &lt;code&gt;kuard&lt;/code&gt; Service를 보면, &lt;code&gt;clusterIP&lt;/code&gt;는 &lt;code&gt;10.97.169.67&lt;/code&gt;로 잡혀 있다. 이는 가상 IP이고, 서비스의 라이프사이클 동안 변하지 않는다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# kubectl get svc kuard -o yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Service&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;creationTimestamp&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2019-01-18T13:22:28Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;labels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;resourceVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;7842&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;selfLink&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/api/v1/namespaces/default/services/kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;uid&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;1a7df4fb-1b24-&lt;span class=&#34;m&#34;&gt;11e9&lt;/span&gt;-a27c-02b8e4b61ab8&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;clusterIP&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10.97&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;169.67&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;externalTrafficPolicy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Cluster&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nodePort&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;31986&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;port&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;protocol&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;TCP&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;targetPort&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;selector&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;sessionAffinity&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;None&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;LoadBalancer&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;status&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;loadBalancer&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;ingress&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hostname&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;a1a7df4fb1b2411e9a27c02b8e4b61ab-&lt;span class=&#34;m&#34;&gt;1083762423.&lt;/span&gt;ap-northeast-&lt;span class=&#34;m&#34;&gt;2.&lt;/span&gt;elb.amazonaws.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;좀 더 자세히 알아보기 위해, 클러스터 마스터 내부에 접속한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;SSH_KEY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;~/.ssh/id_rsa&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; ssh -i &lt;span class=&#34;nv&#34;&gt;$SSH_KEY&lt;/span&gt; -A -L8080:localhost:8080 -o &lt;span class=&#34;nv&#34;&gt;ProxyCommand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ssh -i \&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SSH_KEY&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\&amp;#34; ubuntu@13.125.51.126 nc %h %p&amp;#34;&lt;/span&gt; ubuntu@10.0.18.181

&lt;span class=&#34;c1&#34;&gt;###############################################################
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#       _   _            _   _         _    ___               #
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#      | | | | ___ _ __ | |_(_) ___   | | _( _ ) ___          #
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#      | |_| |/ _ \ &amp;#39;_ \| __| |/ _ \  | |/ / _ \/ __|         #
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#      |  _  |  __/ |_) | |_| | (_) | |   &amp;lt; (_) \__ \         #
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#      |_| |_|\___| .__/ \__|_|\___/  |_|\_\___/|___/         #
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#                 |_|                                         #
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#        ___        _      _     ____  _             _        #
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#       / _ \ _   _(_) ___| | __/ ___|| |_ __ _ _ __| |_      #
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#      | | | | | | | |/ __| |/ /\___ \| __/ _` | &amp;#39;__| __|     #
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#      | |_| | |_| | | (__|   &amp;lt;  ___) | || (_| | |  | |_      #
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#       \__\_\\__,_|_|\___|_|\_\|____/ \__\__,_|_|   \__|     #
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#                                                             #
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;###############################################################
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;Welcome to Ubuntu &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;.04.5 LTS &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;GNU/Linux &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;.4.0-1072-aws x86_64&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  Get cloud support with Ubuntu Advantage Cloud Guest:
    http://www.ubuntu.com/business/services/cloud
This system has been minimized by removing packages and content that are
not required on a system that users &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; not log into.

To restore this content, you can run the &lt;span class=&#34;s1&#34;&gt;&amp;#39;unminimize&amp;#39;&lt;/span&gt; command.

&lt;span class=&#34;m&#34;&gt;38&lt;/span&gt; packages can be updated.
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; updates are security updates.

New release &lt;span class=&#34;s1&#34;&gt;&amp;#39;18.04.1 LTS&amp;#39;&lt;/span&gt; available.
Run &lt;span class=&#34;s1&#34;&gt;&amp;#39;do-release-upgrade&amp;#39;&lt;/span&gt; to upgrade to it.

*** System restart required ***
ubuntu@ip-10-0-18-181:~$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 마스터 노드에 진입해서 &lt;code&gt;kube-system&lt;/code&gt; 네임스페이스의 Pod을 조회하면, 각 노드마다 &lt;code&gt;kube-proxy&lt;/code&gt;라는 DaemonSet이 실행 중인 것을 알 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ubuntu@ip-10-0-18-181:~$ kubectl get pod --namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;kube-system
NAME                                                                     READY     STATUS    RESTARTS   AGE
calico-etcd-twh4d                                                        &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2h
calico-kube-controllers-b798bfc9c-qzdzn                                  &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2h
calico-node-b7w5v                                                        &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2h
calico-node-bxhxx                                                        &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;          1h
calico-node-smrvg                                                        &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;          1h
coredns-78fcdf6894-fpt2m                                                 &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2h
coredns-78fcdf6894-m2zsn                                                 &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2h
etcd-ip-10-0-18-181.ap-northeast-2.compute.internal                      &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          1h
kube-apiserver-ip-10-0-18-181.ap-northeast-2.compute.internal            &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          1h
kube-controller-manager-ip-10-0-18-181.ap-northeast-2.compute.internal   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          1h
kube-proxy-f9q76                                                         &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          1h
kube-proxy-m5sqz                                                         &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          1h
kube-proxy-pnxwv                                                         &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          1h
kube-scheduler-ip-10-0-18-181.ap-northeast-2.compute.internal            &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          1h
kubernetes-dashboard-84fff45879-cmmtp                                    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2h&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;kube-proxy&lt;/code&gt;의 메커니즘은 다음과 같다. &lt;code&gt;kube-proxy&lt;/code&gt;는 ClusterIP를 지닌 모든 &lt;code&gt;Service&lt;/code&gt;를 모니터링한다. 그리고 연관된 &lt;code&gt;EndPoint&lt;/code&gt; 변경을 따라 iptable을 구성하고, 해당 iptable을 사용해서 ClusterIP를 통하는 모든 트래픽이 해당하는 엔드포인트에 랜덤하게 로드 밸런싱되게 한다.&lt;/p&gt;

&lt;p&gt;iptable을 살펴보자. calico가 관리하는 iptable은 &lt;code&gt;cali&lt;/code&gt;라고 주석이 달려 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Chain INPUT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
cali-INPUT  all  --  anywhere             anywhere             /* cali:Cz_u1IQiXIMmKD4c */
KUBE-EXTERNAL-SERVICES  all  --  anywhere             anywhere             ctstate NEW /* kubernetes externally-visible service portals */
KUBE-FIREWALL  all  --  anywhere             anywhere            

Chain FORWARD &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy DROP&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
cali-FORWARD  all  --  anywhere             anywhere             /* cali:wUHhoiAYhphO9Mso */
KUBE-FORWARD  all  --  anywhere             anywhere             /* kubernetes forwarding rules */
DOCKER-ISOLATION  all  --  anywhere             anywhere            
DOCKER     all  --  anywhere             anywhere            
ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED
ACCEPT     all  --  anywhere             anywhere            
ACCEPT     all  --  anywhere             anywhere            

Chain OUTPUT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;policy ACCEPT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
cali-OUTPUT  all  --  anywhere             anywhere             /* cali:tVnHkvAo15HuiPy0 */
KUBE-SERVICES  all  --  anywhere             anywhere             ctstate NEW /* kubernetes service portals */
KUBE-FIREWALL  all  --  anywhere             anywhere            

Chain DOCKER &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         

Chain DOCKER-ISOLATION &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
RETURN     all  --  anywhere             anywhere            

Chain KUBE-EXTERNAL-SERVICES &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         

Chain KUBE-FIREWALL &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
DROP       all  --  anywhere             anywhere             /* kubernetes firewall &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; dropping marked packets */ mark match 0x8000/0x8000

Chain KUBE-FORWARD &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
ACCEPT     all  --  anywhere             anywhere             /* kubernetes forwarding rules */ mark match 0x4000/0x4000
ACCEPT     all  --  ip-192-168-0-0.ap-northeast-2.compute.internal/16  anywhere             /* kubernetes forwarding conntrack pod &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; rule */ ctstate RELATED,ESTABLISHED
ACCEPT     all  --  anywhere             ip-192-168-0-0.ap-northeast-2.compute.internal/16  /* kubernetes forwarding conntrack pod destination rule */ ctstate RELATED,ESTABLISHED

Chain KUBE-SERVICES &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         

Chain cali-FORWARD &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
MARK       all  --  anywhere             anywhere             /* cali:vjrMJCRpqwy5oRoX */ MARK and 0xfff1ffff
cali-from-hep-forward  all  --  anywhere             anywhere             /* cali:A_sPAO0mcxbT9mOV */ mark match 0x0/0x10000
cali-from-wl-dispatch  all  --  anywhere             anywhere             /* cali:8ZoYfO5HKXWbB3pk */
cali-to-wl-dispatch  all  --  anywhere             anywhere             /* cali:jdEuaPBe14V2hutn */
cali-to-hep-forward  all  --  anywhere             anywhere             /* cali:12bc6HljsMKsmfr- */
ACCEPT     all  --  anywhere             anywhere             /* cali:MH9kMp5aNICL-Olv */ /* Policy explicitly accepted packet. */ mark match 0x10000/0x10000

Chain cali-INPUT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
ACCEPT     all  --  anywhere             anywhere             /* cali:msRIDfJRWnYwzW4g */ mark match 0x10000/0x10000
ACCEPT     ipencap--  anywhere             anywhere             /* cali:1IRlRis1-pHsGnX5 */ /* Allow IPIP packets from Calico hosts */ match-set cali40all-hosts-net src ADDRTYPE match dst-type LOCAL
DROP       ipencap--  anywhere             anywhere             /* cali:jX63A0VGotRJWnUL */ /* Drop IPIP packets from non-Calico hosts */
cali-wl-to-host  all  --  anywhere             anywhere            &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;goto&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;  /* cali:Dit8xicL3zTIYYlp */
MARK       all  --  anywhere             anywhere             /* cali:LCGWUV2ju3tJmfW0 */ MARK and 0xfff0ffff
cali-from-host-endpoint  all  --  anywhere             anywhere             /* cali:x-gEznubq2huN2Fo */
ACCEPT     all  --  anywhere             anywhere             /* cali:m27NaAhoKHLs1plD */ /* Host endpoint policy accepted packet. */ mark match 0x10000/0x10000

Chain cali-OUTPUT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
ACCEPT     all  --  anywhere             anywhere             /* cali:Mq1_rAdXXH3YkrzW */ mark match 0x10000/0x10000
RETURN     all  --  anywhere             anywhere             /* cali:69FkRTJDvD5Vu6Vl */
ACCEPT     ipencap--  anywhere             anywhere             /* cali:AnEsmO6bDZbQntWW */ /* Allow IPIP packets to other Calico hosts */ match-set cali40all-hosts-net dst ADDRTYPE match src-type LOCAL
MARK       all  --  anywhere             anywhere             /* cali:9e9Uf3GU5tX--Lxy */ MARK and 0xfff0ffff
cali-to-host-endpoint  all  --  anywhere             anywhere             /* cali:OB2pzPrvQn6PC89t */
ACCEPT     all  --  anywhere             anywhere             /* cali:tvSSMDBWrme3CUqM */ /* Host endpoint policy accepted packet. */ mark match 0x10000/0x10000

Chain cali-failsafe-in &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
ACCEPT     tcp  --  anywhere             anywhere             /* cali:wWFQM43tJU7wwnFZ */ multiport dports ssh
ACCEPT     udp  --  anywhere             anywhere             /* cali:LwNV--R8MjeUYacw */ multiport dports bootpc
ACCEPT     tcp  --  anywhere             anywhere             /* cali:QOO5NUOqOSS1_Iw0 */ multiport dports bgp
ACCEPT     tcp  --  anywhere             anywhere             /* cali:cwZWoBSwVeIAZmVN */ multiport dports &lt;span class=&#34;m&#34;&gt;2379&lt;/span&gt;
ACCEPT     tcp  --  anywhere             anywhere             /* cali:7FbNXT91kugE_upR */ multiport dports &lt;span class=&#34;m&#34;&gt;2380&lt;/span&gt;
ACCEPT     tcp  --  anywhere             anywhere             /* cali:ywE9WYUBEpve70WT */ multiport dports &lt;span class=&#34;m&#34;&gt;6666&lt;/span&gt;
ACCEPT     tcp  --  anywhere             anywhere             /* cali:l-WQSVBf_lygPR0J */ multiport dports ircd

Chain cali-failsafe-out &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
ACCEPT     udp  --  anywhere             anywhere             /* cali:82hjfji-wChFhAqL */ multiport dports domain
ACCEPT     udp  --  anywhere             anywhere             /* cali:TNM3RfEjbNr72hgH */ multiport dports bootps
ACCEPT     tcp  --  anywhere             anywhere             /* cali:ycxKitIl4u3dK0HR */ multiport dports bgp
ACCEPT     tcp  --  anywhere             anywhere             /* cali:hxjEWyxdkXXkdvut */ multiport dports &lt;span class=&#34;m&#34;&gt;2379&lt;/span&gt;
ACCEPT     tcp  --  anywhere             anywhere             /* cali:cA_GLtruuvG88KiO */ multiport dports &lt;span class=&#34;m&#34;&gt;2380&lt;/span&gt;
ACCEPT     tcp  --  anywhere             anywhere             /* cali:Sb1hkLYFMrKS6r01 */ multiport dports &lt;span class=&#34;m&#34;&gt;6666&lt;/span&gt;
ACCEPT     tcp  --  anywhere             anywhere             /* cali:UwLSebGONJUG4yG- */ multiport dports ircd

Chain cali-from-hep-forward &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         

Chain cali-from-host-endpoint &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         

Chain cali-from-wl-dispatch &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
cali-fw-cali82a8bb394bd  all  --  anywhere             anywhere            &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;goto&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;  /* cali:iec6Icru0K37idwj */
cali-fw-calie930c422661  all  --  anywhere             anywhere            &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;goto&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;  /* cali:0jlZAcGo54oqY8p3 */
cali-fw-calif3533dd3229  all  --  anywhere             anywhere            &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;goto&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;  /* cali:PUv0YBkan3WHQZix */
DROP       all  --  anywhere             anywhere             /* cali:-ojO7WWmz0kbfddZ */ /* Unknown interface */

Chain cali-fw-cali82a8bb394bd &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
ACCEPT     all  --  anywhere             anywhere             /* cali:rEFkHFBfSpqnudiF */ ctstate RELATED,ESTABLISHED
DROP       all  --  anywhere             anywhere             /* cali:cMimONNlTtpLzwFn */ ctstate INVALID
MARK       all  --  anywhere             anywhere             /* cali:ScMWqdtSYj6jUbqB */ MARK and 0xfffeffff
cali-pro-kns.kube-system  all  --  anywhere             anywhere             /* cali:fcyxR3eYmhq2xDwn */
RETURN     all  --  anywhere             anywhere             /* cali:XkAXtVVx5l-JkBR_ */ /* Return &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; profile accepted */ mark match 0x10000/0x10000
cali-pro-_u2Tn2rSoAPffvE7JO6  all  --  anywhere             anywhere             /* cali:gHae-WfoqhPTeoWZ */
RETURN     all  --  anywhere             anywhere             /* cali:kFr4XE5funBdyddk */ /* Return &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; profile accepted */ mark match 0x10000/0x10000
DROP       all  --  anywhere             anywhere             /* cali:XGKyCDMWXBQivuzk */ /* Drop &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; no profiles matched */

Chain cali-fw-calie930c422661 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
ACCEPT     all  --  anywhere             anywhere             /* cali:9GO__AFzeIKKpkC3 */ ctstate RELATED,ESTABLISHED
DROP       all  --  anywhere             anywhere             /* cali:PJ-pgay_zq2Qslnb */ ctstate INVALID
MARK       all  --  anywhere             anywhere             /* cali:ogTm-kn-NPg6zYsd */ MARK and 0xfffeffff
cali-pro-kns.kube-system  all  --  anywhere             anywhere             /* cali:MR5-EG6LT-4FQVHs */
RETURN     all  --  anywhere             anywhere             /* cali:eSbE3QKgYjrONve7 */ /* Return &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; profile accepted */ mark match 0x10000/0x10000
cali-pro-_be-1GnaHI4zA9ZiNqb  all  --  anywhere             anywhere             /* cali:M1HNVqvcGyE94Nvw */
RETURN     all  --  anywhere             anywhere             /* cali:jGOTAMwTGCI4OWPX */ /* Return &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; profile accepted */ mark match 0x10000/0x10000
DROP       all  --  anywhere             anywhere             /* cali:LOtk7YMg5IrVV3BH */ /* Drop &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; no profiles matched */

Chain cali-fw-calif3533dd3229 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
ACCEPT     all  --  anywhere             anywhere             /* cali:YH57UrJxw-tOmJKr */ ctstate RELATED,ESTABLISHED
DROP       all  --  anywhere             anywhere             /* cali:IE-8xOX07E7Owz-K */ ctstate INVALID
MARK       all  --  anywhere             anywhere             /* cali:jVx41uBbKJHbN4OU */ MARK and 0xfffeffff
cali-pro-kns.kube-system  all  --  anywhere             anywhere             /* cali:UYWxLdAe9bsLem-b */
RETURN     all  --  anywhere             anywhere             /* cali:LtqfyPifkDfH-orx */ /* Return &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; profile accepted */ mark match 0x10000/0x10000
cali-pro-_u2Tn2rSoAPffvE7JO6  all  --  anywhere             anywhere             /* cali:mr7YiskIpUpprX35 */
RETURN     all  --  anywhere             anywhere             /* cali:O0-SshHUwmCNJ8Cx */ /* Return &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; profile accepted */ mark match 0x10000/0x10000
DROP       all  --  anywhere             anywhere             /* cali:_NyR6RmRKEMmc0Sr */ /* Drop &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; no profiles matched */

Chain cali-pi-_vOsBt0qc8GM-JXGkiMn &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         

Chain cali-po-_vOsBt0qc8GM-JXGkiMn &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         

Chain cali-pri-_be-1GnaHI4zA9ZiNqb &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
DROP       all  --  anywhere             anywhere             /* cali:YrXwxizPmMHbIOcu */

Chain cali-pri-_u2Tn2rSoAPffvE7JO6 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
DROP       all  --  anywhere             anywhere             /* cali:3WowQ2oY88d3FWSg */

Chain cali-pri-kns.kube-system &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
MARK       all  --  anywhere             anywhere             /* cali:zoH5gU6U55FKZxEo */ MARK or 0x10000
RETURN     all  --  anywhere             anywhere             /* cali:bcGRIJcyOS9dgBiB */ mark match 0x10000/0x10000

Chain cali-pro-_be-1GnaHI4zA9ZiNqb &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
DROP       all  --  anywhere             anywhere             /* cali:KGqIRWRYnPNtm88p */

Chain cali-pro-_u2Tn2rSoAPffvE7JO6 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
DROP       all  --  anywhere             anywhere             /* cali:7uaZJ8EAWrfkGzjv */

Chain cali-pro-kns.kube-system &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
MARK       all  --  anywhere             anywhere             /* cali:-50oJuMfLVO3LkBk */ MARK or 0x10000
RETURN     all  --  anywhere             anywhere             /* cali:ztVPKv1UYejNzm1g */ mark match 0x10000/0x10000

Chain cali-to-hep-forward &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         

Chain cali-to-host-endpoint &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         

Chain cali-to-wl-dispatch &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
cali-tw-cali82a8bb394bd  all  --  anywhere             anywhere            &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;goto&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;  /* cali:DH1bLyxskFJok8LY */
cali-tw-calie930c422661  all  --  anywhere             anywhere            &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;goto&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;  /* cali:v4KHY3mc1Ym9DiZc */
cali-tw-calif3533dd3229  all  --  anywhere             anywhere            &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;goto&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;  /* cali:Z6Ww2zhhGbh19h6K */
DROP       all  --  anywhere             anywhere             /* cali:EuaJOevUVXhWjfo- */ /* Unknown interface */

Chain cali-tw-cali82a8bb394bd &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
ACCEPT     all  --  anywhere             anywhere             /* cali:vrhTi3Nw7kE6Ef5t */ ctstate RELATED,ESTABLISHED
DROP       all  --  anywhere             anywhere             /* cali:jG_UsyATyr-kJ6AQ */ ctstate INVALID
MARK       all  --  anywhere             anywhere             /* cali:FerW_RRGXaa36-vj */ MARK and 0xfffeffff
cali-pri-kns.kube-system  all  --  anywhere             anywhere             /* cali:YKrxQCxGe4eaqLap */
RETURN     all  --  anywhere             anywhere             /* cali:wfbQVtfm0N1ND8R0 */ /* Return &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; profile accepted */ mark match 0x10000/0x10000
cali-pri-_u2Tn2rSoAPffvE7JO6  all  --  anywhere             anywhere             /* cali:9PkEFe9LRMPxCP4K */
RETURN     all  --  anywhere             anywhere             /* cali:i-PGBuetIpieXaJ8 */ /* Return &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; profile accepted */ mark match 0x10000/0x10000
DROP       all  --  anywhere             anywhere             /* cali:43EsNrcTxe_Gut6O */ /* Drop &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; no profiles matched */

Chain cali-tw-calie930c422661 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
ACCEPT     all  --  anywhere             anywhere             /* cali:tkJMJT3XRZeM-2Gg */ ctstate RELATED,ESTABLISHED
DROP       all  --  anywhere             anywhere             /* cali:hBXm_jQ4g-vOXrvD */ ctstate INVALID
MARK       all  --  anywhere             anywhere             /* cali:wQ2uqXWFYbTHdTqX */ MARK and 0xfffeffff
MARK       all  --  anywhere             anywhere             /* cali:YlnF0m9DiQACjY09 */ /* Start of policies */ MARK and 0xfffdffff
cali-pi-_vOsBt0qc8GM-JXGkiMn  all  --  anywhere             anywhere             /* cali:0LpzqkQs2SGOS_wo */ mark match 0x0/0x20000
RETURN     all  --  anywhere             anywhere             /* cali:xr1W-9np6ixXUzOe */ /* Return &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; policy accepted */ mark match 0x10000/0x10000
DROP       all  --  anywhere             anywhere             /* cali:DyuQ1f19JvhahmR7 */ /* Drop &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; no policies passed packet */ mark match 0x0/0x20000
cali-pri-kns.kube-system  all  --  anywhere             anywhere             /* cali:566-vQl_FY43wHvx */
RETURN     all  --  anywhere             anywhere             /* cali:XeFMO_8xxORT_IXy */ /* Return &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; profile accepted */ mark match 0x10000/0x10000
cali-pri-_be-1GnaHI4zA9ZiNqb  all  --  anywhere             anywhere             /* cali:83QDy1HEQkh-KMXt */
RETURN     all  --  anywhere             anywhere             /* cali:XXlZXzitmj5-clZc */ /* Return &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; profile accepted */ mark match 0x10000/0x10000
DROP       all  --  anywhere             anywhere             /* cali:ZMgyCtJ9dKOGThG0 */ /* Drop &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; no profiles matched */

Chain cali-tw-calif3533dd3229 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
ACCEPT     all  --  anywhere             anywhere             /* cali:Jp5FpTzoIYgEzVhI */ ctstate RELATED,ESTABLISHED
DROP       all  --  anywhere             anywhere             /* cali:OS4FQ7GDf9nqPGuo */ ctstate INVALID
MARK       all  --  anywhere             anywhere             /* cali:U8S5KlI4JDCzJT2L */ MARK and 0xfffeffff
cali-pri-kns.kube-system  all  --  anywhere             anywhere             /* cali:N7mCGC3NJKTvWJ2_ */
RETURN     all  --  anywhere             anywhere             /* cali:cags8BdhUzZKkCtV */ /* Return &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; profile accepted */ mark match 0x10000/0x10000
cali-pri-_u2Tn2rSoAPffvE7JO6  all  --  anywhere             anywhere             /* cali:LNHtw-GrC3bM44iL */
RETURN     all  --  anywhere             anywhere             /* cali:EhyfxW1SBfAAy2Ec */ /* Return &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; profile accepted */ mark match 0x10000/0x10000
DROP       all  --  anywhere             anywhere             /* cali:tV1eFXrUQA4xEfFW */ /* Drop &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; no profiles matched */

Chain cali-wl-to-host &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; references&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;               destination         
cali-from-wl-dispatch  all  --  anywhere             anywhere             /* cali:Ee9Sbo10IpVujdIY */
ACCEPT     all  --  anywhere             anywhere             /* cali:nSZbcOoG1xPONxb8 */ /* Configured DefaultEndpointToHostAction */&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음으로, 포워딩 테이블을 살펴보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ iptables-save &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; less
...
-A KUBE-SERVICES ! -s &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.0/16 -d &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.96.0.10/32 -p tcp -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-system/kube-dns:dns-tcp cluster IP&amp;#34;&lt;/span&gt; -m tcp --dport &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt; -j KUBE-MARK-MASQ
-A KUBE-SERVICES -d &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.96.0.10/32 -p tcp -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-system/kube-dns:dns-tcp cluster IP&amp;#34;&lt;/span&gt; -m tcp --dport &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt; -j KUBE-SVC-ERIFXISQEP7F7OF4
-A KUBE-SERVICES ! -s &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.0/16 -d &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.96.232.136/32 -p tcp -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-system/calico-etcd: cluster IP&amp;#34;&lt;/span&gt; -m tcp --dport &lt;span class=&#34;m&#34;&gt;6666&lt;/span&gt; -j KUBE-MARK-MASQ
-A KUBE-SERVICES -d &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.96.232.136/32 -p tcp -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-system/calico-etcd: cluster IP&amp;#34;&lt;/span&gt; -m tcp --dport &lt;span class=&#34;m&#34;&gt;6666&lt;/span&gt; -j KUBE-SVC-NTYB37XIWATNM25Y
-A KUBE-SERVICES ! -s &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.0/16 -d &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.98.144.55/32 -p tcp -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-system/kubernetes-dashboard: cluster IP&amp;#34;&lt;/span&gt; -m tcp --dport &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt; -j KUBE-MARK-MASQ
-A KUBE-SERVICES -d &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.98.144.55/32 -p tcp -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-system/kubernetes-dashboard: cluster IP&amp;#34;&lt;/span&gt; -m tcp --dport &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt; -j KUBE-SVC-XGLOHA7QRQ3V22RZ
-A KUBE-SERVICES ! -s &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.0/16 -d &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.97.169.67/32 -p tcp -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard: cluster IP&amp;#34;&lt;/span&gt; -m tcp --dport &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; -j KUBE-MARK-MASQ
-A KUBE-SERVICES -d &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.97.169.67/32 -p tcp -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard: cluster IP&amp;#34;&lt;/span&gt; -m tcp --dport &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; -j KUBE-SVC-CUXC5A3HHHVSSN62
-A KUBE-SERVICES ! -s &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.0/16 -d &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.96.0.1/32 -p tcp -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kubernetes:https cluster IP&amp;#34;&lt;/span&gt; -m tcp --dport &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt; -j KUBE-MARK-MASQ
-A KUBE-SERVICES -d &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.96.0.1/32 -p tcp -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kubernetes:https cluster IP&amp;#34;&lt;/span&gt; -m tcp --dport &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt; -j KUBE-SVC-NPX46M4PTMTKRN6Y
-A KUBE-SERVICES ! -s &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.0/16 -d &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.96.0.10/32 -p udp -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-system/kube-dns:dns cluster IP&amp;#34;&lt;/span&gt; -m udp --dport &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt; -j KUBE-MARK-MASQ
-A KUBE-SERVICES -d &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.96.0.10/32 -p udp -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-system/kube-dns:dns cluster IP&amp;#34;&lt;/span&gt; -m udp --dport &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt; -j KUBE-SVC-TCOU7JCQXEZGVUNU
-A KUBE-SERVICES -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes service nodeports; NOTE: this must be the last rule in this chain&amp;#34;&lt;/span&gt; -m addrtype --dst-type LOCAL -j KUBE-NODEPORTS
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음과 같이 ip &lt;code&gt;10.97.169.67&lt;/code&gt;은 &lt;code&gt;KUBE-SVC-CUXC5A3HHHVSSN62&lt;/code&gt; 체인으로 점프한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;-A KUBE-SERVICES -d &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.97.169.67/32 -p tcp -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard: cluster IP&amp;#34;&lt;/span&gt; -m tcp --dport &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; -j KUBE-SVC-CUXC5A3HHHVSSN62&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;KUBE-SVC-CUXC5A3HHHVSSN62&lt;/code&gt; 체인을 살펴보면, 랜덤 확률별로 각각의 체인으로 점프하는 것을 알 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;-A KUBE-SVC-CUXC5A3HHHVSSN62 -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard:&amp;#34;&lt;/span&gt; -m statistic --mode random --probability &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.10000000009 -j KUBE-SEP-IY5EMZGCCC7HUEGX
-A KUBE-SVC-CUXC5A3HHHVSSN62 -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard:&amp;#34;&lt;/span&gt; -m statistic --mode random --probability &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.11110999994 -j KUBE-SEP-JBD3W2H2CSU7KYVR
-A KUBE-SVC-CUXC5A3HHHVSSN62 -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard:&amp;#34;&lt;/span&gt; -m statistic --mode random --probability &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.12500000000 -j KUBE-SEP-FM3234RRJZPD4GZX
-A KUBE-SVC-CUXC5A3HHHVSSN62 -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard:&amp;#34;&lt;/span&gt; -m statistic --mode random --probability &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.14286000002 -j KUBE-SEP-YOAWVANELGWJS5XG
-A KUBE-SVC-CUXC5A3HHHVSSN62 -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard:&amp;#34;&lt;/span&gt; -m statistic --mode random --probability &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.16667000018 -j KUBE-SEP-EV53L32GZTSBWT5L
-A KUBE-SVC-CUXC5A3HHHVSSN62 -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard:&amp;#34;&lt;/span&gt; -m statistic --mode random --probability &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.20000000019 -j KUBE-SEP-N7OVRTBYAU5DSTM3
-A KUBE-SVC-CUXC5A3HHHVSSN62 -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard:&amp;#34;&lt;/span&gt; -m statistic --mode random --probability &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.25000000000 -j KUBE-SEP-33XGFXWM5AKJXNJR
-A KUBE-SVC-CUXC5A3HHHVSSN62 -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard:&amp;#34;&lt;/span&gt; -m statistic --mode random --probability &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.33332999982 -j KUBE-SEP-CPH6I2HAHV4Y5PMM
-A KUBE-SVC-CUXC5A3HHHVSSN62 -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard:&amp;#34;&lt;/span&gt; -m statistic --mode random --probability &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.50000000000 -j KUBE-SEP-6ESI6K2EKT4JPG3E
-A KUBE-SVC-CUXC5A3HHHVSSN62 -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard:&amp;#34;&lt;/span&gt; -j KUBE-SEP-AOUKRORADL3ZFT3D&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;50% 이상의 확률일 때는, &lt;code&gt;KUBE-SEP-AOUKRORADL3ZFT3D&lt;/code&gt;에 점프하게 되는데, 패킷 소스가 &lt;code&gt;192.168.236.133/32&lt;/code&gt;이면 Kubernetes 매스쿼레이딩을 하고, 그렇지 않은 tcp 패킷의 경우 &lt;code&gt;192.168.236.133:8080&lt;/code&gt;로 전송됨을 알 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;-A KUBE-SEP-AOUKRORADL3ZFT3D -s &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.236.133/32 -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard:&amp;#34;&lt;/span&gt; -j KUBE-MARK-MASQ
-A KUBE-SEP-AOUKRORADL3ZFT3D -p tcp -m comment --comment &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/kuard:&amp;#34;&lt;/span&gt; -m tcp -j DNAT --to-destination &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.236.133:8080&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제로 마스터에 들어가서 ClusterIP에 대해 테스트해보면 다음과 같다. 요청마다 &lt;code&gt;HOSTNAME&lt;/code&gt;의 값이 랜덤하게, 즉 서로 다른 호스트의 Pod이 랜덤으로 응답하고 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ubuntu@ip-10-0-18-181:~$ curl &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.110.41.209:80/env/api
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;commandLine&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/kuard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOSTNAME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d-nv89q&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_ADDR&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PROTO&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT_HTTPS&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
ubuntu@ip-10-0-18-181:~$ curl &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.110.41.209:80/env/api
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;commandLine&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/kuard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOSTNAME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d-bcsdh&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_ADDR&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PROTO&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT_HTTPS&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
ubuntu@ip-10-0-18-181:~$ curl &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.110.41.209:80/env/api
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;commandLine&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/kuard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOSTNAME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d-q7f2w&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_ADDR&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PROTO&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT_HTTPS&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
ubuntu@ip-10-0-18-181:~$ curl &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.110.41.209:80/env/api
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;commandLine&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/kuard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOSTNAME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d-nv89q&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_ADDR&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PROTO&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT_HTTPS&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
ubuntu@ip-10-0-18-181:~$ curl &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.110.41.209:80/env/api
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;commandLine&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/kuard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOSTNAME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d-f8sbq&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_ADDR&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PROTO&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT_HTTPS&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
ubuntu@ip-10-0-18-181:~$ curl &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.110.41.209:80/env/api
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;commandLine&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/kuard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOSTNAME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d-rsxrz&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_ADDR&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PROTO&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT_HTTPS&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
ubuntu@ip-10-0-18-181:~$ curl &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.110.41.209:80/env/api
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;commandLine&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/kuard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOSTNAME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d-bcsdh&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_ADDR&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PROTO&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT_HTTPS&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;nodeport&#34;&gt;NodePort&lt;/h2&gt;

&lt;p&gt;그리고 &lt;code&gt;NodePort&lt;/code&gt;의 값이 &lt;code&gt;30361&lt;/code&gt;으로 할당되어 있다. 이 값은 동적으로 랜덤하게 설정된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl get svc kuard -o yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: &lt;span class=&#34;m&#34;&gt;2019&lt;/span&gt;-01-18T14:49:58Z
  labels:
    run: kuard
  name: kuard
  namespace: default
  resourceVersion: &lt;span class=&#34;s2&#34;&gt;&amp;#34;15378&amp;#34;&lt;/span&gt;
  selfLink: /api/v1/namespaces/default/services/kuard
  uid: 53772d95-1b30-11e9-a27c-02b8e4b61ab8
spec:
  clusterIP: &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.110.41.209
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: &lt;span class=&#34;m&#34;&gt;30361&lt;/span&gt;
    port: &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;
    protocol: TCP
    targetPort: &lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;
  selector:
    run: kuard
  sessionAffinity: None
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
    - hostname: a53772d951b3011e9a27c02b8e4b61ab-1700641417.ap-northeast-2.elb.amazonaws.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;NodePort&lt;/code&gt;는 Kubernetes 외부와 내부를 연결하는 브리지의 역할을 한다. 마스터 노드에 진입하여 해당 포트에 접속하면 &lt;code&gt;ClusterIP&lt;/code&gt;와 동일하게 &lt;code&gt;HOSTNAME&lt;/code&gt;의 값이 랜덤하게 변경되는 것을 알 수 있다. 즉, 모든 Kubernetes 노드에서 해당 NodePort &lt;code&gt;30361&lt;/code&gt;을 통해 해당 서비스 &lt;code&gt;kuard&lt;/code&gt;로 진입하게 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ubuntu@ip-10-0-18-181:~$ curl localhost:30361/env/api
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;commandLine&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/kuard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOSTNAME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d-bcsdh&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_ADDR&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PROTO&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT_HTTPS&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
ubuntu@ip-10-0-18-181:~$ curl localhost:30361/env/api
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;commandLine&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/kuard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOSTNAME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d-q7f2w&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_ADDR&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PROTO&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT_HTTPS&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
ubuntu@ip-10-0-18-181:~$ curl localhost:30361/env/api
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;commandLine&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/kuard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOSTNAME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d-bgwrj&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_ADDR&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PROTO&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT_HTTPS&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
ubuntu@ip-10-0-18-181:~$ curl localhost:30361/env/api
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;commandLine&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/kuard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOSTNAME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d-cqxwq&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_ADDR&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PROTO&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT_HTTPS&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
ubuntu@ip-10-0-18-181:~$ curl localhost:30361/env/api
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;commandLine&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/kuard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOSTNAME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d-bgwrj&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_ADDR&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PROTO&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT_HTTPS&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
ubuntu@ip-10-0-18-181:~$ curl localhost:30361/env/api
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;commandLine&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/kuard&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOSTNAME&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d-qd9fj&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp://10.96.0.1:443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_ADDR&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_PORT_443_TCP_PROTO&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_HOST&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.96.0.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_SERVICE_PORT_HTTPS&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;loadbalancer&#34;&gt;LoadBalancer&lt;/h2&gt;

&lt;p&gt;마지막으로 앞서 보았던 &lt;code&gt;LoadBalancer&lt;/code&gt; 타입의 서비스이다. 예제에서는 AWB의 ELB가 연결된다.&lt;/p&gt;

&lt;p&gt;ELB의 리스너 항목을 살펴보면, 생성된 ELB의 로드 밸런서 포트는 &lt;code&gt;80&lt;/code&gt;이고, EC2의 인스턴스 포트는 &lt;code&gt;30361&lt;/code&gt;이다. 이 포트는 앞서 살펴본 Kubernetes에서 &lt;code&gt;kuard&lt;/code&gt; Service의 &lt;code&gt;NodePort&lt;/code&gt;의 값이다. 즉, ELB의 80으로 들어오는 모든 트래픽은 다음과 같이 EC2 인스턴스 중 하나로 전달되고, &lt;code&gt;30361&lt;/code&gt;로 전달된 트래픽은 &lt;code&gt;kuard&lt;/code&gt; Service에 의해 &lt;code&gt;kuard&lt;/code&gt; Pod로 전달된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../tgik-002-loadbalaner.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl expose deployment kuard --type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;LoadBalancer --target-port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt; --port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;
service/kuard exposed

$ kubectl expose deployment kuard --type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;LoadBalancer --target-port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt; --port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; -o yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    run: kuard
  name: kuard
spec:
  ports:
  - port: &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;
    protocol: TCP
    targetPort: &lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;
  selector:
    run: kuard
  type: LoadBalancer
status:
  loadBalancer: &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;extensions/v1beta1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Deployment&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;annotations&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;deployment.kubernetes.io/revision&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;creationTimestamp&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2019-01-18T06:21:13Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;generation&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;labels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;namespace&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;resourceVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1987&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;selfLink&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/apis/extensions/v1beta1/namespaces/default/deployments/kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;uid&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;41075e21&lt;/span&gt;-1ae9-&lt;span class=&#34;m&#34;&gt;11e9&lt;/span&gt;-befa-0209e53cf850&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;progressDeadlineSeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;600&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;replicas&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;revisionHistoryLimit&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;selector&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;matchLabels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;strategy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;rollingUpdate&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;maxSurge&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;maxUnavailable&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;RollingUpdate&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;template&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;creationTimestamp&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;labels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;run&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;containers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;gcr.io/kuar-demo/kuard-amd64&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;imagePullPolicy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;IfNotPresent&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kuard&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;resources&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;terminationMessagePath&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/dev/termination-log&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;terminationMessagePolicy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;File&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;dnsPolicy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ClusterFirst&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;restartPolicy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Always&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;schedulerName&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;default-scheduler&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;securityContext&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;terminationGracePeriodSeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;status&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;availableReplicas&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;conditions&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;lastTransitionTime&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2019-01-18T06:21:22Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;lastUpdateTime&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2019-01-18T06:21:22Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;message&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Deployment&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;has&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;minimum&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;availability.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;reason&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;MinimumReplicasAvailable&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;status&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Available&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;lastTransitionTime&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2019-01-18T06:21:13Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;lastUpdateTime&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2019-01-18T06:21:23Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;message&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ReplicaSet&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kuard-dbdd7955d&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;has&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;successfully&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;progressed.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;reason&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;NewReplicaSetAvailable&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;status&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;type&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Progressing&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;observedGeneration&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;readyReplicas&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;replicas&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;updatedReplicas&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;center&gt;•••&lt;/center&gt;&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>[번역] 확장성 있고, 이식성 있는 도커 컨테이너 네트워크 설계</title>
      <link>https://ziwon.github.io/post/designing-scalable-portable-docker-container-networks/</link>
      <pubDate>Wed, 16 Jan 2019 08:23:00 +0900</pubDate>
      <author>Philbert Yoon</author>
      <guid>https://ziwon.github.io/post/designing-scalable-portable-docker-container-networks/</guid>
      <description></description>
      
      <content>

&lt;blockquote&gt;
&lt;p&gt;원문: &lt;a href=&#34;https://success.docker.com/article/networking&#34; target=&#34;_blank&#34;&gt;Docker Reference Architecture: Designing Scalable, Portable Docker Container Networks&lt;/a&gt; (오역 및 오타는 댓글로 알려주세요)&lt;/p&gt;

&lt;p&gt;※ 컨테이너가 아닌 Pod간의 Kubernetes 네트워킹 모델은 도커 네트워킹 모델과 좀 다릅니다. 자세한 내용은 하단의 &lt;a href=&#34;#기타&#34;&gt;기타&lt;/a&gt; 아티클을 참조하세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;배우게-될-것&#34;&gt;배우게 될 것&lt;/h1&gt;

&lt;p&gt;도커 컨테이너는 실행에 필요한 모든 것, 즉 코드, 런타임, 시스템 도구, 시스템 라이브러리 등 서버에 설치할 수 있는 모든 것을 포함하는 완전한 파일 시스템에 있는 소프트웨어 하나를 래핑한다. 이는 소프트웨어가 환경에 관계없이 항상 동일한 기능을 실행할 것을 보장한다. 기본적으로 컨테이너는 애플리케이션을 서로 격리하고, 애플리케이션을 위한 추가적인 보호 계층을 제공한다.&lt;/p&gt;

&lt;p&gt;애플리케이션이 서로 간에, 또는 호스트와, 혹은 외부 네트워크와 통신해야 한다면 어떻게 해야하는가? 애플리케이션 이식성, 서비스 검색, 로드 밸런싱, 보안, 성능 및 확장성을 유지하면서 적절한 연결성을 위해 네트워크를 설계하는 방법은 무엇인가? 이 문서는 이러한 네트워크 설계 문제와 사용 가능한 도구 및 일반적인 배포 패턴을 다룬다. 물리적 네트워크 설계을 기술하거나 권장하지는 않지만 애플리케이션과 물리적 네트워크의 제약 조건을 고려하면서 도커 네트워크를 설계하는 방법에 대한 선택 사항들을 제공한다.&lt;/p&gt;

&lt;h2 id=&#34;사전-지식&#34;&gt;사전 지식&lt;/h2&gt;

&lt;p&gt;계속하기 전에 도커 개념과 도커 Swarm에 대해 잘 알고 있어야 한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/understanding-docker/&#34; target=&#34;_blank&#34;&gt;도커 개념&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/swarm/key-concepts/#/services-and-tasks&#34; target=&#34;_blank&#34;&gt;도커 Swarm 및 Swarm 모드 개념&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;네트워킹-컨테이너-및-마이크로-서비스의-미션&#34;&gt;네트워킹 컨테이너 및 마이크로 서비스의 미션&lt;/h1&gt;

&lt;p&gt;마이크로서비스는 실전에서 애플리케이션의 스케일을 증가시켰는데, 이러한 애플리케이션들은 제공되는 연결성 및 격리 방법들이 훨씬 더 중시된다. 도커 네트워킹 철학은 애플리케이션 중심이다. 네트워크 운영자에게 옵션과 유연성을 제공하는 것을 목표로 하는 것 뿐만 아니라 애플리케이션 개발자에게 적합한 수준의 추상화를 제공하는 것을 목표로 한다.&lt;/p&gt;

&lt;p&gt;여느 설계처럼, 네트워크 설계은 밸런스를 맞추는 행위이다. 도커 엔터프라이즈 에디션과 도커 생태계는 네트워크 엔지니어들에게 그들의 애플리케이션과 환경에 대한 최상의 밸런스를 달성하기 위해 다양한 도구를 제공한다. 각 옵션은 서로 다른 장점과 트레이드오프를 제공한다. 이 가이드의 나머지 부분에서는 네트워크 엔지니어가 자신의 환경에 가장 적합한 것을 이해할 수 있도록 이러한 각각 선택에 대해 자세히 설명한다.&lt;/p&gt;

&lt;p&gt;도커는 애플리케이션을 공급하는 새로운 방법을 개발했고, 그와 함께 컨테이너는 네트워킹 접근 방식의 일부 측면도 변화시켰다. 다음 주제는 컨테이너형 애플리케이션에 대한 일반적인 설계 주제이다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;이식성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;고유한 네트워크 특성을 활용하면서 다양한 네트워크 환경에서 최대한의 이식성을 어떻게 보장할 수 있는가?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;서비스 검색&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;서비스가 확장 및 축소될 때 어디에 살고 있는지 어떻게 알 수 있는가?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;로드 밸런싱&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;서비스 자체가 커지고 확장될 때 서비스 간에 부하를 어떻게 공유하는가?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;보안&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;잘못된 컨테이너가 서로 액세스하지 못하도록 어떻게 구분하는가?&lt;/li&gt;
&lt;li&gt;애플리케이션 및 클러스터 제어 트래픽이 있는 컨테이너가 안전하다는 것을 어떻게 보장하는가?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;성능&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;대기 시간을 최소화하고 대역폭을 최대화하는 동시에 고급 네트워크 서비스를 어떻게 제공하는가?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;확장성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;여러 호스트에 걸쳐 애플리케이션을 확장할 때 이러한 특성들이 저하되지 않도록 하려면 어떻게 하는가?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;컨테이너-네트워킹-모델&#34;&gt;컨테이너 네트워킹 모델&lt;/h1&gt;

&lt;p&gt;도커 네트워킹 아키텍처는 CNM(Container Networking Model)이라고 하는 인터페이스 집합 위에 구축된다. CNM의 철학은 다양한 인프라 구조에서 애플리케이션 이식성을 제공하는 것이다. 이 모델은 애플리케이션 이식성을 이루기 위해 밸런스를 맞추고 인프라의 특징과 기능을 활용한다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fcnm.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;cnm-구성물&#34;&gt;CNM 구성물&lt;/h2&gt;

&lt;p&gt;CNM에는 몇 가지 상위 레벨의 구성물이 있다. 이들은 모두 OS 및 인프라에 구애받지 않으므로 인프라 스택에 관계없이 애플리케이션이 동일한 환경을 가질 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;샌드박스&lt;/strong&gt; - 샌드박스는 컨테이너 네트워크 스택의 설정을 포함한다. 여기에는 컨테이너 인터페이스, 라우팅 테이블 및 DNS 설정 관리가 포함된다. 샌드박스의 구현은 Linux 네트워크 네임스페이스, FreeBSD Jail 또는 기타 유사한 개념일 수 있다. 샌드박스는 여러 네트워크의 많은 엔드포인트를 포함할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;엔드포인트&lt;/strong&gt; - 엔드포인트가 샌드박스를 네트워크에 연결한다. 엔드포인트는 네트워크에 대한 실제 연결을 애플리케이션에서 추상화할 수 있도록 존재한다. 이는 서비스가 네트워크에 어떻게 연결되어 있는지에 신경쓰지 않으며 여러 유형의 네트워크 드라이버를 사용할 수 있도록 이식성을 유지하는데 도움을 준다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;네트워크&lt;/strong&gt; — CNM은 OSI 모델 측면에서 네트워크를 명시하지 않는다. 네트워크의 구현은 리눅스 브리지, VLAN 등이 될 수 있다. 네트워크는 이들 사이에 연결성이 있는 엔드포인트의 모음이다. 네트워크에 연결되지 않은 엔드포인트는 네트워크에 연결되어 있지 않다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cnm-드라이버-인터페이스&#34;&gt;CNM 드라이버 인터페이스&lt;/h2&gt;

&lt;p&gt;컨테이너 네트워킹 모델은 사용자, 커뮤니티 및 벤더가 네트워크에서 추가 기능, 가시성 또는 제어 기능을 활용할 수 있는 2개의 플러그형 및 개방형 인터페이스를 제공한다.&lt;/p&gt;

&lt;p&gt;다음과 같은 네트워크 드라이버가 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;네트워크 드라이버&lt;/strong&gt; - 도커 네트워크 드라이버는 네트워크를 작동시키는 실제 구현을 제공한다. 다른 드라이버를 사용할 수 있고 다양한 유스케이스를 쉽게 지원할 수 있도록 상호 교환될 수 있는 플러그 스타일이다. 주어진 도커 엔진 또는 클러스터에서 여러 개의 네트워크 드라이버를 동시에 사용할 수 있지만, 각 도커 네트워크는 단일 네트워크 드라이버를 통해서만 인스턴스화된다. CNM 네트워크 드라이버는 크게 두 가지 유형이 있다.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;네이티브 네트워크 드라이버&lt;/strong&gt; - 네이티브 네트워크 드라이버는 도커 엔진의 네이티브 요소이며 도커에서 제공한다. 오버레이 네트워크나 로컬 브리지와 같은 다양한 기능을 지원하는 여러 드라이버가 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;원격 네트워크 드라이버&lt;/strong&gt; - 원격 네트워크 드라이버는 커뮤니티와 다른 벤더가 만든 네트워크 드라이버이다. 이러한 드라이버는 기존 소프트웨어 및 하드웨어와의 통합을 제공할 수 있다. 사용자는 또한 기존 네트워크 드라이버가 지원하지 않는 특정 기능을 원하는 경우 자신의 드라이버를 만들 수도 있다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPAM 드라이버&lt;/strong&gt; - 도커에는 네트워크 및 엔드포인트의 기본 서브넷 또는 IP 주소를 지정하지 않은 경우 이를 제공하는 네이티브 IP 주소 관리 드라이버가 있다. IP 주소 지정은 네트워크, 컨테이너 및 서비스 생성 명령을 통해 수동으로 할당할 수도 있다. 원격 IPAM 드라이버도 존재하며 기존 IPAM 도구와 통합된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fcnm-api.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;도커-네이티브-네트워크-드라이버&#34;&gt;도커 네이티브 네트워크 드라이버&lt;/h2&gt;

&lt;p&gt;도커 네이티브 네트워크 드라이버는 도커 엔진의 일부이므로 추가 모듈은 필요없다. 이들은 표준 &lt;code&gt;docker network&lt;/code&gt; 명령을 통해 호출되고 사용된다. 다음과 같은 네이티브 네트워크 드라이버가 있다.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;드라이버&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Host&lt;/td&gt;
&lt;td&gt;&lt;code&gt;host&lt;/code&gt; 드라이버가 있는 호스트 컨테이너는 호스트의 네트워킹 스택을 사용함. 네임스페이스 분리가 없으므로 호스트의 모든 인터페이스를 컨테이너에서 직접 사용할 수 있음.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Brdige&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bridge&lt;/code&gt; 드라이버는 도커가 관리하는 호스트에 리눅스 브리지를 생성함. 기본적으로 브리지의 컨테이너는 서로 통신할 수 있음. 또한 브리지 드라이버를 통해 컨테이너에 대한 외부 액세스를 구성할 수 있음.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Overlay&lt;/td&gt;
&lt;td&gt;&lt;code&gt;overlay&lt;/code&gt; 드라이버는 도커 외부에서 다중 호스트 네트워크를 지원하는 오버레이 네트워크를 생성함. 로컬 리눅스 브리지와 VXLAN을 함께 사용하여 물리적 네트워크 인프라를 통해 컨테이너와 컨테이너 간의 통신을 오버레이함.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MACVLAN&lt;/td&gt;
&lt;td&gt;&lt;code&gt;macvlan&lt;/code&gt; 드라이버는 MACVLAN 브리지 모드를 사용해서 컨테이너 인터페이스와 상위 호스트 인터페이스(또는 하위 인터페이스) 간의 연결을 설정함. 물리적 네트워크에서 라우팅 가능한 컨테이너에 IP 주소를 제공하기 위해 사용될 수 있음. 또한 VLAN은 Layer 2 컨테이너 분할을 실행하기 위해 macvlan 드라이버에 트렁킹될 수 있음.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;&lt;code&gt;none&lt;/code&gt; 드라이버는 컨테이너에 자체 네트워킹 스택과 네트워크 네임스페이스를 제공하지만, 컨테이너 내부에 인터페이스를 구성하지는 않음. 추가 구성없이 컨테이너가 호스트 네트워킹 스택에서 완전히 분리됨.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;네트워크-스코프&#34;&gt;네트워크 스코프&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;docker network ls&lt;/code&gt; 출력에서 볼 수 있듯이, 도커 네트워크 드라이버는 &lt;em&gt;스코프&lt;/em&gt; 라는 개념이 있다. 네트워크 스코프는 &lt;code&gt;local&lt;/code&gt; 또는 &lt;code&gt;swarm&lt;/code&gt; 범위인 드라이버의 도메인이다. Local 스코프 드라이버는 호스트의 범위 내에서 연결 및 네트워크 서비스(예: DNS 또는 IPAM)를 제공한다. Swarm 스코프 드라이버는 Swarm 클러스터 전반에서 연결 및 네트워크 서비스를 제공한다. Swarm 스코프 네트워크는 전체 클러스터에서 동일한 네트워크 ID를 가지고 있고, 반면에 Local 스코프 네트워크는 각 호스트에 고유한 네트워크 ID를 가지고 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
1475f03fbecb        bridge              bridge              &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;
e2d8a4bd86cb        docker_gwbridge     bridge              &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;
407c477060e7        host                host                &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;
f4zr3zrswlyg        ingress             overlay             swarm
c97909a4b198        none                null                local&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;도커-원격-네트워크-드라이버&#34;&gt;도커 원격 네트워크 드라이버&lt;/h2&gt;

&lt;p&gt;아래 커뮤니티 및 벤더에서 만든 원격 네트워크 드라이버는 CNM과 호환되며, 각 드라이버는 컨테이너를 위한 고유한 기능과 네트워크 서비스를 제공한다.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;드라이버&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://contiv.github.io/&#34; target=&#34;_blank&#34;&gt;contiv&lt;/a&gt;&lt;img width=250/&gt;&lt;/td&gt;
&lt;td&gt;멀티 테넌트(Multi-tenant) 마이크로 서비스 구현를 위한 인프라 및 보안 정책을 제공하는 오픈 소스 네트워크 플러그인, Cisco Systems가 리딩. 또한 Contiv는 비컨테이너 워크로드 및 ACI와 같은 물리적 네트워크에 대해 통합을 제공. Contiv는 원격 네트워크 및 IPAM 드라이버를 구현하고 있음.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.weave.works/docs/net/latest/introducing-weave/&#34; target=&#34;_blank&#34;&gt;weave&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;도커 컨테이너를 여러 호스트 또는 클라우드에 연결하는 가상 네트워크를 만드는 네트워크 플러그인. Weave는 애플리케이션 자동 검색 기능을 제공하며 부분적으로 연결된 네트워크에서 작동할 수 있으며, 외부 클러스터 저장소가 필요하지 않고, 운영 친화적임.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.projectcalico.org/&#34; target=&#34;_blank&#34;&gt;calico&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;클라우드 데이터 센터의 가상 네트워킹을 위한 오픈 소스 솔루션. 대부분의 워크로드(VM, 컨테이너 또는 베어 메탈 서버)가 IP 연결만 필요로 하는 데이터 센터를 대상으로 함. Calico는 표준 IP 라우팅을 사용하여 이 연결성을 제공함. 테넌트 소유권 (tenant ownership) 또는 보다 세분화된 정책에 따라 워크로드 간의 격리는 소스 및 대상 워크로드를 호스팅하는 서버에서 iptables 프로그래밍을 통해 수행됨.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/openstack/kuryr&#34; target=&#34;_blank&#34;&gt;kuryr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;오픈스택 Kuryr 프로젝트의 일부로 개발된 네트워크 플러그인. 오픈스택 네트워킹 서비스인 Neutron을 활용하여 도커 네트워킹 (libnetwork) 원격 드라이버 API를 구현함. Kuryr에는 IPAM 드라이버도 포함되어 있음.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;도커-원격-ipam-드라이버&#34;&gt;도커 원격 IPAM 드라이버&lt;/h2&gt;

&lt;p&gt;커뮤니티 및 벤더가 만든 IPAM 드라이버도 기존 시스템 또는 특수 기능과의 통합을 제공하는데 사용될 수 있다.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;드라이버&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/infoblox/ipam-driver/&#34; target=&#34;_blank&#34;&gt;infobox&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;기존 Infoblox 툴과 통합되는 오픈소스 IPAM 플러그인.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;많은 도커 플러그인이 존재하며, 더 많은 플러그인이 계속 만들어지고 있다. 도커는 &lt;a href=&#34;https://docs.docker.com/engine/extend/legacy_plugins/&#34; target=&#34;_blank&#34;&gt;가장 일반적인 플러그인&lt;/a&gt; 목록을 유지한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;리눅스-네트워크-기본원리&#34;&gt;리눅스 네트워크 기본원리&lt;/h1&gt;

&lt;p&gt;리눅스 커널은 TCP/IP 스택 (DNS 및 VXLAN과 같은 기타 네이티브 커널 기능과 더불어)을 매우 성숙하고 효율적으로 구현한다. 도커 네트워킹은 커널의 네트워킹 스택을 하위 레벨의 기본 요소로 사용하여 상위 레벨의 네트워크 드라이버를 만든다. 간단히 말해서, &lt;em&gt;도커 네트워킹&lt;/em&gt; 은 &lt;em&gt;리눅스 네트워킹&lt;/em&gt; 이다.&lt;/p&gt;

&lt;p&gt;기존에 구현된 리눅스 커널 기능은 고성능과 견고성을 보장한다. 가장 중요한 점은 여러 배포판과 버전에 걸쳐 이식성을 제공하므로 애플리케이션의 이식성이 향샹된다는 것이다.
**
도커가 네이티브 CNM 네트워크 드라이버를 구현하는데 사용하는 몇 가지 리눅스 네트워킹 빌딩 블록이 있다. 이 목록에는 &lt;strong&gt;리눅스 브리지&lt;/strong&gt;, &lt;strong&gt;네트워크 네임스페이스&lt;/strong&gt;, &lt;strong&gt;veth pair&lt;/strong&gt; 및 &lt;strong&gt;iptable&lt;/strong&gt;이 포함된다. 네트워크 드라이버로 구현되는 이러한 도구의 조합은 복잡한 네트워크 정책을 위한 전달 규칙, 네트워크 분할 및 관리 도구를 제공한다.&lt;/p&gt;

&lt;h2 id=&#34;리눅스-브리지&#34;&gt;리눅스 브리지&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;리눅스 브리지&lt;/strong&gt;는 리눅스 커널 내부의 물리적 스위치를 가상으로 구현한 Layer 2 디바이스이다. 트래픽을 검사하여 동적으로 학습되는 MAC 주소를 기반으로 트래픽을 전달한다. 리눅스 브리지는 많은 도커 네트워크 드라이버에서 광범위하게 사용된다. 리눅스 브리지를 리눅스 브리지의 상위 레벨 구현인 &lt;code&gt;bridge&lt;/code&gt; 도커 네트워크 드라이버와 혼동해서는 안된다.&lt;/p&gt;

&lt;h2 id=&#34;네트워크-네임스페이스&#34;&gt;네트워크 네임스페이스&lt;/h2&gt;

&lt;p&gt;리눅스 &lt;strong&gt;네트워크 네임스페이스&lt;/strong&gt;는 커널에 격리된 네트워크 스택으로 자체 인터페이스, 라우트 및 방화벽 규칙을 지니고 있다. 컨테이너와 리눅스의 보안적인 측면으로, 컨테이너를 격리하는데 사용된다. 네트워킹 용어에서는 호스트 내부의 네트워크 제어와 데이터 플레인을 격리하는 VRF와 유사하다. 네트워크 네임 스페이스는 도커 네트워크를 통해 구성된 경우가 아니면 동일한 호스트의 두 컨테이너가 서로 통신하거나 호스트 자체와 통신할 수 없음을 보장한다. 일반적으로 CNM 네트워크 드라이버는 각 컨테이너에 대해 별도의 네임스페이스를 구현한다. 그러나 컨테이너는 동일한 네트워크 네임스페이스를 공유할 수도 있고 호스트의 네트워크 네임스페이스의 일부가 될 수도 있다. 호스트 네트워크 네임스페이스 컨테이너는 호스트 인터페이스와 호스트 라우팅 테이블이다. 이 네트워크 네임스페이스를 글로벌 네트워크 네임스페이스라고 한다.&lt;/p&gt;

&lt;h2 id=&#34;가상-이더넷-디바이스&#34;&gt;가상 이더넷 디바이스&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;가상 이더넷 디바이스 (virtual ethernet device)&lt;/strong&gt; 또는 &lt;strong&gt;veth&lt;/strong&gt;는 두 네트워크 네임스페이스 사이의 연결선으로 동작하는 리눅스 네트워킹 인터페이스이다. veth는 각 네임스페이스에 단일 인터페이스가 있는 전이중 링크(full duplex link)이다. 한 인터페이스의 트래픽은 다른 인터페이스로 전달된다. 도커 네트워크를 만들 때 도커 네트워크 드라이버는 veth를 사용하여 네임스페이스간에 명시적인 연결을 제공한다. 컨테이너가 도커 네트워크에 연결되면 veth의 한쪽 끝은 컨테이너 내부에 배치되며 (일반적으로 &lt;code&gt;ethX&lt;/code&gt; 인터페이스로 표시됨), 다른 쪽은 도커 네트워크에 연결된다.&lt;/p&gt;

&lt;h2 id=&#34;iptables&#34;&gt;iptables&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;iptables&lt;/code&gt;는 네이티브 패킷 필터링 시스템으로 버전 2.4 이후 리눅스 커널의 일부였다. 이는 패킷 마킹, 매스쿼레이딩(masquerading) 및 드라핑(dropping)에 대한 룰체인을 제공하는 기능이 풍부한 L3/L4 방화벽이다. 네이티브 도커 네트워크 드라이버는 iptables를 광범위하게 활용하여 네트워크 트래픽을 세분화하고, 호스트 포트 매핑을 제공하며, 로드 밸런싱 결정을 위해 트래픽을 마킹한다. (역자: &lt;a href=&#34;https://www.linux.com/blog/what-ip-masquerading-and-when-it-use&#34; target=&#34;_blank&#34;&gt;What is IP masquerading and when is it of use?&lt;/a&gt;)&lt;/p&gt;

&lt;h1 id=&#34;도커-네트워크-컨트롤-플레인&#34;&gt;도커 네트워크 컨트롤 플레인&lt;/h1&gt;

&lt;p&gt;도커 분산형 네트워크 제어 플레인은 컨트롤 플레인 데이터를 전파하는 것 외에 Swarm 스코프 도커 네트워크의 상태를 관리한다. 도커 Swarm 클러스터의 내장 기능으로 외부 KV 저장소와 같은 추가 구성 요소가 필요하지 않다. 컨트롤 플레인에서는 SWIM에 기반한 가십 프로토콜을 사용하여 도커 컨테이너 클러스터에 네트워크 상태 정보와 토폴로지를 전파한다. 가십 프로토콜은 대규모 클러스터에서 메시지 크기, 오류 감지 시간 및 컨버전스 시간을 일정하게 유지하면서 클러스터 내에서 결과적 일관성(eventual consistency)을 달성하는 데 매우 효율적이다. 이는 네트워크가 느린 컨버전스 또는 잘못된 긍정 노드 오류와 같은 확장 문제를 일으키지 않고 네트워크가 여러 노도로 확장되게 한다.&lt;/p&gt;

&lt;p&gt;컨트롤 플레인은 암호화된 채널을 통해 기밀성, 무결성 및 인증을 제공하며 매우 안전하다. 또한 네트워크 마다 범위가 지정되어 있어 주어진 호스트에서 수신하는 업데이트를 크게 감소시킨다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fcontrolplane.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;대규모 네트워크 전반에 걸쳐 빠른 컨버전스를 달성하기 위해서 함께 동작하는 몇 가지 컴포넌트로 구성되어 있다. 컨트롤 플레인의 분산 특성은 클러스터 컨트롤러 장애가 네트워크 성능에 영향을 미치지 않도록 보장한다.&lt;/p&gt;

&lt;p&gt;도커 네트워크 컨트롤 플레인의 컴포넌트는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;메세지 확산 (Message Dissemination)&lt;/strong&gt;은 각 교환의 정보가 보다 큰 노드 그룹으로 확장되는 P2P 방식으로 노드를 업데이트한다. 피어 그룹의 고정된 간격과 크기는 클러스터의 크기가 확장되는 경우에도 네트워크 사용량을 일정하게 한다. 피어 간의 기하급수적인 정보 전파는 신속하고 모든 클러스터 크기에 연결되게 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장애 탐지 (Failure Detection)&lt;/strong&gt;는 네트워크 정체와 긍정 노드(false posivive node) 장애를 유발하는 특정 경로를 배제시키기 위해 직접 및 간접 hello 메시지를 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;전체 상태 동기화 (Full State Syncs)&lt;/strong&gt;는 일관성(consistency)을 신속하게 구성하고, 네트워크 파티션을 해결하기 위해 주기적으로 발생한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;토폴로지 인식 (Topology Aware)&lt;/strong&gt; 알고리즘은 자신과 다른 피어 간의 상대적인 대기 시간을 이해한다. 이것은 컨버전스를 보다 빠르고 효율적으로 만드는 피어 그룹을 최적화하는 데 사용된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control Plane Encryption (Control Plane Encryption)&lt;/strong&gt;은 네트워크 보안을 손상시킬 수 있는 중간자 공격(man in the middle) 및 다른 공격에서 보호한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;도커 네트워크 컨트롤 플레인은 &lt;a href=&#34;https://docs.docker.com/engine/swarm/&#34; target=&#34;_blank&#34;&gt;Swarm&lt;/a&gt;의 구성 요소이며 Swarm 클러스터가 운영되어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;도커-호스트-네트워크-드라이버&#34;&gt;도커 호스트 네트워크 드라이버&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;host&lt;/code&gt; 네트워크 드라이버는 도커 없이 리눅스가 사용하는 것과 동일한 네트워킹 설정이기 때문에 도커가 처음인 사람들에게 가장 친숙한다. &lt;code&gt;-net=host&lt;/code&gt;는 효과적으로 도커 네트워킹을 해제하고, 컨테이너는 호스트 운영체제의 호스트(또는 디폴트) 네트워킹 스택을 사용한다.&lt;/p&gt;

&lt;p&gt;일반적으로 다른 네트워킹 드라이버의 경우, 각 컨테이너는 자체 네트워크 네임스페이스(또는 샌드박스)에 배치되어 서로 완전한 네트워크 격리를 제공한다. &lt;code&gt;host&lt;/code&gt; 드라이버 컨테이너는 모두 동일한 호스트 네트워크 네임스페이스에 있으며 호스트의 네트워크 인터페이스와 IP 스택을 사용한다. 호스트 네트워크의 모든 컨테이너는 호스트 인터페이스에서 서로 통신할 수 있다. 네트워킹 관점에서 이는 컨테이너 없이 호스트에서 실행되는 여러 프로세스와 동일하다. 이들이 동일한 호스트 인터페이스를 사용하고 있기 때문에, 두 컨테이너가 똑같은 TCP 포트에 바인딩할 수 없다. 같은 호스트에서 여러 컨테이너를 스케줄링하는 경우, 포트 경합이 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fhost-driver.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#호스트 네트워크에 컨테이너를 생성함
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ docker run -itd --net host --name C1 alpine sh
$ docker run -itd --net host --name nginx

&lt;span class=&#34;c1&#34;&gt;#호스트 eth0 표시
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ ip add &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep eth0
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;9001&lt;/span&gt; qdisc mq state UP group default qlen &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;
	inet &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.31.21.213/20 brd &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.31.31.255 scope global eth0

&lt;span class=&#34;c1&#34;&gt;#C1으로부터 eth0 표시
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ docker run -it --net host --name C1 alpine ip add &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep eth0
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;9001&lt;/span&gt; qdisc mq state UP qlen &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;
	inet &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.31.21.213/20 brd &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.31.31.255 scope global eth0

&lt;span class=&#34;c1&#34;&gt;#C1의 locahost를 통해 nginx 컨테이너에 연결
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ curl localhost
!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 예제에서, 컨테이너가 &lt;code&gt;host&lt;/code&gt; 네트워크를 사용할 때 호스트, &lt;code&gt;C1&lt;/code&gt; 및 &lt;code&gt;nginx&lt;/code&gt;는 모두 &lt;code&gt;eth0&lt;/code&gt;에 대해 동일한 인터페이스를 공유한다. 이는 &lt;code&gt;host&lt;/code&gt;를 멀티 테넌트(Multi-tenant) 또는 보안 수준이 높은 애플리케이션에 적합하지 않게 만든다. &lt;code&gt;host&lt;/code&gt; 컨테이너는 호스트의 다른 모든 컨테이너에 네트워크 액세스 권한을 가진다. &lt;code&gt;C1&lt;/code&gt;에서 &lt;code&gt;curl nginx&lt;/code&gt;를 실행할 때 예제와 같이 &lt;code&gt;localhost&lt;/code&gt;를 사용하여 컨테이너 간에 통신이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;host&lt;/code&gt; 드라이버를 사용하는 경우, 도커는 포트 매핑 또는 라우팅 규칙과 같은 컨테이너 네트워킹 스택의 어떤 부분도 관리하지 않는다. 이것은 &lt;code&gt;-p&lt;/code&gt;와 &lt;code&gt;--icc&lt;/code&gt;와 같은 일반적인 네트워킹 플래그가 호스트 드라이버에 아무런 의미가 없다는 것을 의미한다. 이들은 무시된다. 이는 &lt;code&gt;host&lt;/code&gt; 네트워킹을 네트워킹 드라이버 중에서 가장 간단하게 그리고 가장 낮은 지연 시간(latency)을 갖게 한다. 트래픽 경로는 컨테이너 프로세스에서 호스트 인터페이스로 직접 이동하며, 컨테이너화되지 않은 프로세스와 동등한 베어메탈 성능을 제공한다.&lt;/p&gt;

&lt;p&gt;전체 호스트 액세스 및 부재한 자동화된 정책의 관리 방식들은 &lt;code&gt;host&lt;/code&gt; 드라이버를 일반 네트워크 드라이버로 사용하기에 적합하지 않을 수 있다. 그러나, &lt;code&gt;host&lt;/code&gt; 초고성능 애플리케이션 또는 애플리케이션 트러블슈팅과 같은 유즈케이스에 적용할 수 있는 몇 가지 흥미로운 속성을 가지고 있다.&lt;/p&gt;

&lt;h1 id=&#34;도커-브리지-네트워크-드라이버&#34;&gt;도커 브리지 네트워크 드라이버&lt;/h1&gt;

&lt;p&gt;이 섹션에서는 기본 도커 브리지 네트워크와 사용자 정의 브리지 네트워크를 설명한다.&lt;/p&gt;

&lt;h2 id=&#34;기본-도커-브리지-네트워크&#34;&gt;기본 도커 브리지 네트워크&lt;/h2&gt;

&lt;p&gt;도커 엔진을 실행하는 호스트에는 기본적으로 &lt;code&gt;bridge&lt;/code&gt; 라는 로컬 도커 네트워크가 있다. 이 네트워크는 &lt;code&gt;docker0&lt;/code&gt; 이라 불리는 리눅스 브리지를 인스턴스화하는 &lt;code&gt;bridge&lt;/code&gt; 네트워크 드라이버를 사용하여 생성된다. 이는 혼란스럽게 들릴지도 모른다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bridge&lt;/code&gt;는 도커 네트워크의 이름이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brdige&lt;/code&gt;는 이 네트워크가 생성되는 네트워크 드라이버 또는 템플릿이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker0&lt;/code&gt;은 이 네트워크를 구현하는데 사용되는 커널 빌딩 블록인 리눅스 브리지의 이름이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;독립 실행형 도커 호스트에서, &lt;code&gt;bridge&lt;/code&gt;는 다른 네트워크가 지정되지 않은 경우 컨테이너가 연결되는 기본 네트워크다. 다음 예에서 컨테이너는 네트워크 매개변수 없이 생성된다. 도커 엔진은 기본적으로 이를 브리지 네트워크에 연결한다. 컨테이너 내부 &lt;code&gt;eth0&lt;/code&gt;을 주목하라. 이는 &lt;code&gt;bridge&lt;/code&gt; 드라이버에 의해 생성되고 도커 네이티브 IPAM 드라이버에 의해 주소가 지정된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#&amp;#34;c1&amp;#34;이라는 이름의 busybox 컨테이너를 만들고 해당 IP 주소를 표시
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;host $ docker run -it --name c1 busybox sh
c1 &lt;span class=&#34;c1&#34;&gt;# ip 주소
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;: eth0@if5: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt; qdisc noqueue
	link/ether &lt;span class=&#34;m&#34;&gt;02&lt;/span&gt;:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
	inet &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.17.0.2/16 scope global eth0
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;컨테이너 인터페이스의 MAC 주소는 동적으로 생성되고 충돌을 피하기 위해 IP 주소를 포함한다. 여기서 &lt;code&gt;ac:11:00:02&lt;/code&gt;는 172.17.0.2에 해당한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;호스트의 &lt;code&gt;brctl&lt;/code&gt; 툴은 호스트 네트워크 네임 스페이스에 존재하는 리눅스 브리지를 표시한다. &lt;code&gt;docker0&lt;/code&gt;이라 부르는 단일 브리지가 표시된다. &lt;code&gt;docker0&lt;/code&gt;에는 하나의 인터페이스 &lt;code&gt;vetha3788c4&lt;/code&gt;가 있는데, 이 인터페이스는 브리지에서 컨테이너 &lt;code&gt;c1&lt;/code&gt; 내부의 &lt;code&gt;eth0&lt;/code&gt; 인터페이스에 대한 연결을 제공한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;host $ brctl show
bridge name      bridge id            STP enabled    interfaces
docker0          &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;.0242504b5200    no             vethb64e8b8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;컨테이너 &lt;code&gt;c1&lt;/code&gt; 내부의 컨테이너 라우팅 테이블은 컨테이너의 &lt;code&gt;eth0&lt;/code&gt;으로 트래픽을 전달하고, 따라서 &lt;code&gt;docker0&lt;/code&gt; 브리지로 이동한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;c1# ip 라우트
default via &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.17.0.1 dev eth0
&lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.17.0.0/16 dev eth0  src &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.17.0.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;컨테이너는 연결되는 네트워크 수에 따라 0개에서 다수의 인터페이스를 가질 수 있다. 각 도커 네트워크는 컨테이너 마다 하나의 인터페이스만 가질 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fbridge-driver.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;호스트 라우팅 테이블이 보여주는 것처럼, 글로벌 네트워크 네임스페이스의 IP 인터페이스는 이제 &lt;code&gt;docker0&lt;/code&gt;을 포함한다. 호스트 라우팅 테이블은 외부 네트워크에서 &lt;code&gt;doker0&lt;/code&gt;과 &lt;code&gt;eth0&lt;/code&gt; 사이의 연결시켜 컨테이너 내부에서 외부 네트워크로의 경로를 완성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;host $ ip route
default via &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.31.16.1 dev eth0
&lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.17.0.0/16 dev docker0  proto kernel  scope link  src &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.17.42.1
&lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.31.16.0/20 dev eth0  proto kernel  scope link  src &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.31.16.102&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기본적으로 &lt;code&gt;bridge&lt;/code&gt;는 기존 호스트 인터페이스와 겹치지 않는 172.[17-31].0.0/16 또는 192.168.[0-240].0/20 범위에서 서브넷 한 개가 할당된다. 또한 기본 &lt;code&gt;bridge&lt;/code&gt; 네트워크는 사용자 제공 주소 범위를 사용하도록 구성할 수 있다. 또한 도커가 생성하는 대신 기존 Linux 브리지가 &lt;code&gt;bridge&lt;/code&gt; 네트워크에 사용될 수 있다. &lt;code&gt;bridge&lt;/code&gt; 사용자 정의에 대한 자세한 내용은 &lt;a href=&#34;https://docs.docker.com/engine/userguide/networking/default_network/custom-docker0/&#34; target=&#34;_blank&#34;&gt;도커 엔진 문서&lt;/a&gt;를 참조하라.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;기본 &lt;code&gt;bridge&lt;/code&gt; 네트워크는 레거시 &lt;a href=&#34;https://docs.docker.com/engine/userguide/networking/default_network/dockerlinks/&#34; target=&#34;_blank&#34;&gt;링크&lt;/a&gt;를 지원하는 유일한 네트워크다. 이름 기반 서비스 검색 (Name-based service discovery) 및 사용자 제공 IP 주소는 기본 &lt;code&gt;bridge&lt;/code&gt; 네트워크에 의해 지원되지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;사용자-정의-브리지-네트워크&#34;&gt;사용자 정의 브리지 네트워크&lt;/h2&gt;

&lt;p&gt;기본 네트워크 외에도, 사용자들은 모든 네트워크 드라이버 유형의 &lt;strong&gt;사용자 정의 네트워크 (user-defined-network)&lt;/strong&gt; 라고 불리는 네트워크를 만들 수 있다. 사용자 정의 &lt;code&gt;bridge&lt;/code&gt; 네트워크의 경우 호스트에 새 리눅스 브리지를 설정한다. 기본 &lt;code&gt;bridge&lt;/code&gt; 네트워크와 달리, 사용자 정의 네트워크는 수동 IP 주소와 서브넷 할당을 지원한다. 할당이 지정되지 않은 경우에는, 도커의 기본 IPAM 드라이버가 프라이빗 IP 공간에서 사용할 수 있는 다음 서브넷을 할당한다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fbridge2.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;사용자 정의 &lt;code&gt;bridge&lt;/code&gt; 네트워크 아래에는 2개의 컨테이너가 연결되어 있다. 서브넷이 지정되고, 네트워크는 &lt;code&gt;my_bridge&lt;/code&gt;로 이름이 붙여진다. 하나의 컨테이너에는 IP 매개변수가 제공되지 않으므로, IPAM 드라이버는 서브넷에 사용 가능한 다음 IP를 할당한다. 다른 컨테이너에는 IP가 지정되어 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ docker network create -d bridge --subnet &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.0.0.0/24 my_bridge
$ docker run -itd --name c2 --net my_bridge busybox sh
$ docker run -itd --name c3 --net my_bridge --ip &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.0.0.254 busybox sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;brctl&lt;/code&gt;은 이제 호스트에 두번째 리눅스 &lt;code&gt;bridge&lt;/code&gt;를 나타낸다. 리눅스 브리지의 이름인 &lt;code&gt;br-4bcc22f5e5b9&lt;/code&gt;는 &lt;code&gt;my_bridge&lt;/code&gt; 네트워크의 네트워크 ID와 일치한다. &lt;code&gt;my_bridge&lt;/code&gt;는 또한 컨테이너 &lt;code&gt;c2&lt;/code&gt;와 &lt;code&gt;c3&lt;/code&gt;에 연결된 2개의 &lt;code&gt;veth&lt;/code&gt; 인터페이스가 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brctl show
bridge name      bridge id            STP enabled    interfaces
br-b5db4578d8c9  &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;.02428d936bb1    no             vethc9b3282
														vethf3ba8b5
docker0          &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;.0242504b5200    no             vethb64e8b8

$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
b5db4578d8c9        my_bridge           bridge              &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;
e1cac9da3116        bridge              bridge              &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;글로벌 네트워크 네임스페이스 인터페이스 목록은 도커 엔진에 의해 인스턴스화된 리눅스 네트워킹 서킷을 보여준다. 각 &lt;code&gt;veth&lt;/code&gt; 및 리눅스 브리지 인터페이스는 리눅스 브리지 중 하나와 컨테이너 네트워크 네임스페이스 사이의 링크로 나타난다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ ip link

&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;65536&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;9001&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;: docker0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;: vethb64e8b8@if4: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;: br-b5db4578d8c9: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;: vethc9b3282@if7: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;: vethf3ba8b5@if9: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;독립-실행형-컨테이너의-외부-접근&#34;&gt;독립 실행형 컨테이너의 외부 접근&lt;/h2&gt;

&lt;p&gt;기본적으로 동일한 도커 네트워크의 모든 컨테이너 (멀티 호스트 swarm 스코프 또는 local 스코프)는 모든 포트에서 서로 연결된다. 서로 다른 도커 네트워크와 외부 도커에서 발생하는 컨테이너 인그레스 트래픽 간의 통신은 방화벽으로 보호된다. 이는 컨테이너 애플리케이션을 외부 세계 및 서로에게서 보호하는 기본적인 보안 측면이다. 자세한 내용은 &lt;a href=&#34;https://success.docker.com/api/asset/.%2Frefarch%2Fnetworking%2F#security&#34; target=&#34;_blank&#34;&gt;네트워크 보안&lt;/a&gt;을 참조하라.&lt;/p&gt;

&lt;p&gt;대부분 유형의 도커 네트워크(&lt;code&gt;brdige&lt;/code&gt;와 &lt;code&gt;overlay&lt;/code&gt; 포함)의 경우 애플리케이션을 위한 외부 인그레스 액세스를 명시적으로 부여해야 한다. 이는 내부 포트 매핑을 통해 이루어진다. 도커는 내부 컨테이너 인터페이스에 호스트 인터페이스에 노출된 포트를 퍼블리싱한다. 다음 다이어그램은 컨테이너 &lt;code&gt;C2&lt;/code&gt;로의 인그레스(하향 화살표) 및 엔그레스(상단 화살표) 트래픽을 나타낸다. 아웃바운드(엔그레스) 컨테이너 트래픽은 기본적으로 허용된다. 컨테이너에 의해 시작된 엔그레스 연결은 임시 포트(일반적으로 32768 - 60999 범위)에 마스커레이딩되거나 SNAT된다. 이 연결에 대한 반송 트래픽(return traffic)이 허용되므로 컨테이너는 임시 포트에서 호스트에 라우팅할 수 있는 최상의 IP 주소를 사용한다.&lt;/p&gt;

&lt;p&gt;인그레스 액세스는 명시적인 포트 퍼블리싱을 통해 제공된다. 포트 퍼블리싱은 도커 엔진에 의해 수행되며 UCP 또는 엔진 CLI를 통해 제어할 수 있다. 서비스나 컨테이너를 노출하도록 특정 또는 무작위로 선택된 포트를 구성할 수 있다. 포트는 특정(또는 모든) 호스트 인터페이스에서 수신 대기하도록 설정할 수 있으며, 모든 트래픽은 이 포트에서 포트 및 컨테이너 내부의 인터페이스로 매핑된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ docker run -d --name C2 --net my_bridge -p &lt;span class=&#34;m&#34;&gt;5000&lt;/span&gt;:80 nginx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fnat.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;외부 액세스는 도커 CLI 또는 UCP에서 &lt;code&gt;--publish/-p&lt;/code&gt;를 사용하여 설정되며, 위의 명령을 실행한 후 다이어그램은 컨테이너 &lt;code&gt;C2&lt;/code&gt;가 &lt;code&gt;my_bridge&lt;/code&gt; 네트워크에 연결되고 IP 주소가 &lt;code&gt;10.0.0.2&lt;/code&gt;인 것으로 표시된다. 컨테이너는 &lt;code&gt;192.168.0.2&lt;/code&gt;의 호스트 인터페이스의 포트 &lt;code&gt;5000&lt;/code&gt;에서 외부 세계에 서비스를 알린다. 이 인터페이스:포트로 전송되는 모든 트래픽은 컨테이너 인터페이스의 &lt;code&gt;10.0.2:80&lt;/code&gt;에 퍼블리싱된 포트다.&lt;/p&gt;

&lt;p&gt;컨테이너에 의해 시작된 아웃바운드 트래픽은 호스트 인터페이스 &lt;code&gt;192.168.0.2&lt;/code&gt;의 사용 후 삭제 포트 &lt;code&gt;32768&lt;/code&gt;에서 소싱되도록 마스커레이딩된다. 반송 트래픽(return traffic)은 목적지와 동일한 IP 주소와 포트를 사용하며 내부적으로 다시 컨테이너 주소:포트 &lt;code&gt;10.0.2:33920&lt;/code&gt;로 마스커레이딩된다. 포트 게시를 사용할 때, 네트워크의 외부 트래픽은 항상 호스트 IP와 노출된 포트를 사용하며 컨테이너 IP와 내부 포트는 사용하지 않는다.&lt;/p&gt;

&lt;p&gt;도커 엔진의 클러스터에 컨테이너와 서비스를 노출하는 방법에 대한 자세한 내용은 &lt;a href=&#34;https://success.docker.com/api/asset/.%2Frefarch%2Fnetworking%2F#swarm-external&#34; target=&#34;_blank&#34;&gt;Swarm 서비스 외부 액세스&lt;/a&gt;를 참조하라.&lt;/p&gt;

&lt;h1 id=&#34;오버레이-드라이버-네트워크-아키텍처&#34;&gt;오버레이 드라이버 네트워크 아키텍처&lt;/h1&gt;

&lt;p&gt;네이티브 도커 &lt;code&gt;overlay&lt;/code&gt; 네트워크 드라이버는 멀티 호스트 네트워킹의 여러가지 문제를 근본적으로 단순화한다. &lt;code&gt;overlay&lt;/code&gt; 드라이버를 사용하면, 멀티 호스트 네트워크가 외부 프로비저닝이나 컴포넌트 없이 도커 내부의 일급 시민이다. &lt;code&gt;overlay&lt;/code&gt;는 swarm 분산 컨트롤 플레인을 사용하여 대규모 클러스터에 걸쳐 중앙 집중식 관리, 안정성 및 보안을 제공한다.&lt;/p&gt;

&lt;h2 id=&#34;vxlan-데이터-플레인&#34;&gt;VXLAN 데이터 플레인&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;overlay&lt;/code&gt; 드라이버는 기본 물리적 네트워크(언더레이)와 컨테이너 네트워크를 분리하는 업계 표준 VXLAN 데이터 플레인을 활용한다. 도커 오버레이 네트워크는 컨테이너 트래픽을 VXLAN 헤더에 컨테이너 트래픽을 캡슐화하여 물리적 Layer 2 또는 Layer 3 네트워크를 통과할 수 있도록 한다. 오버레이를 사용하면 기본 물리적 토폴로지에 상관없이 네트워크 분할을 동적으로 제어하기 쉽다. 표준 IETF VXLAN 헤더를 사용해서 네트워크 트래픽을 검사하고 분석하기 위한 표준 툴링을 꾀할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;VXLAN은 버전 3.7부터 리눅스 커널의 일부였으며, 도커는 커널의 기본 VXLAN 기능을 사용하여 오버레이 네트워크를 생성한다. 도커 오버레이 데이터패스는 전적으로 커널 공간에 있다. 따라서 컨텍스트 스위치가 줄어들고 CPU 오버헤드가 감소하며, 대기 시간이 짧고, 애플리케이션과 물리적 NIC 간의 직접적인 트래픽 경로가 생긴다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;IETF VXLAN(&lt;a href=&#34;https://datatracker.ietf.org/doc/rfc7348/&#34; target=&#34;_blank&#34;&gt;RFC 7348&lt;/a&gt;)은 Layer 3 네트워크에서 Layer 2 세그먼트를 오버레이하는 데이터 계층 캡슐화 형식이다. VXLAN은 표준 IP 네트워크에서 사용하도록 설계되었으며 공유된 물리적 네트워크 인프라에서 대규모 멀티 테넌트(Multi-tenant) 설계를 지원할 수 있다. 기존 사내 및 클라우드 기반 네트워크는 VXLAN을 투명하게 지원할 수 있다.&lt;/p&gt;

&lt;p&gt;VXLAN은 언더레이 IP/UDP 헤더 내에 컨테이너 Layer 2 프레임을 배치하는 MAC-in-UDP 캡슐화로 정의된다. 언더레이 IP/UDP 헤더는 언더레이 네트워크의 호스트 간의 전송을 제공한다. 오버레이는 지정된 오버레이 네트워크에 참여하는 각 호스트 간에 점 대 다중점 연결로 존재하는 상태 비저장 VXLAN 터널이다. 오버레이는 언더레이 토폴로지와 독립적이기 때문에 애플리케이션이 더 쉽게 이동할 수 있다. 따라서, 네트워크 정책 및 연결성은 온프레미스, 개발자 데스크탑, 또는 퍼블릭 클라우드에 관계없이 애플리케이션과 함께 전송될 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fpacketwalk.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;이 다이어그램에서 오버레이 네트워크의 패킷 흐름이 표시된다. 다음은 &lt;code&gt;c1&lt;/code&gt;이 공유 오버레이 네트워크에서 &lt;code&gt;c2&lt;/code&gt; 패킷을 전송할 때 수행되는 단계이다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c1&lt;/code&gt;은 &lt;code&gt;c2&lt;/code&gt;에 대해 DNS 조회를 한다. 두 컨테이너가 동일한 오버레이 네트워크에 있으므로 도커 엔진 로컬 DNS 서버는 &lt;code&gt;c2&lt;/code&gt;를 오버레이 IP 주소 &lt;code&gt;10.0.0.3&lt;/code&gt;으로 확인한다.&lt;/li&gt;
&lt;li&gt;오버레이 네트워크는 L2 세그먼트이므로 &lt;code&gt;c1&lt;/code&gt;은 &lt;code&gt;c2&lt;/code&gt;의 MAC 주소로 지정된 L2 프레임을 생성한다.&lt;/li&gt;
&lt;li&gt;프레임은 &lt;code&gt;overlay&lt;/code&gt; 네트워크 드라이버에 의해 VXLAN 헤더로 캡슐화된다. 분산 오버레이 컨트롤 플레인은 각 VXLAN 터널 엔드포인트의 위치와 상태를 관리하므로 &lt;code&gt;c2&lt;/code&gt;가 &lt;code&gt;192.168.0.3&lt;/code&gt;의 물리적 주소에 있는 &lt;code&gt;host-B&lt;/code&gt;에 있다는 것을 알고 있다. 이 주소는 언더레이 IP 헤더의 대상 주소가 된다.&lt;/li&gt;
&lt;li&gt;일단 캡슐화되면 패킷이 전송된다. 물리적 네트워크는 VXLAN 패킷을 올바른 호스트로 라우팅하거나 브리징하는 역할을 한다.&lt;/li&gt;
&lt;li&gt;패킷은 &lt;code&gt;host-B&lt;/code&gt;의 &lt;code&gt;eth0&lt;/code&gt; 인터페이스에 도착하며 &lt;code&gt;overlay&lt;/code&gt; 네트워크 드라이버에 의해 캡슐 해제된다. &lt;code&gt;c1&lt;/code&gt;의 원래 L2 프레임은 &lt;code&gt;c2&lt;/code&gt;의 &lt;code&gt;eth0&lt;/code&gt; 인터페이스와 수신 대기중인 애플리케이션까지 전달된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;오버레이-드라이버-내부-아키텍처&#34;&gt;오버레이 드라이버 내부 아키텍처&lt;/h2&gt;

&lt;p&gt;도커 Swarm 컨트롤 플레인은 오버레이 네트워크에 대한 모든 프로비저닝을 자동화한다. VXLAN 설정 또는 리눅스 네트워킹 설정은 필요없다. 오버레이의 옵션 기능인 데이터 플레인 암호화도 네트워크가 생성될 때 오버레이 드라이버에 의해 자동으로 설정된다. 사용자 또는 네트워크 운영자는 네트워크를 정의하고 (&lt;code&gt;docker network create -d overlay ...&lt;/code&gt;) 컨테이너를 해당 네트워크에 연결하기만 하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Foverlayarch.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;오버레이 네트워크 생성 중에 도커 엔진은 각 호스트에 오버레이에 필요한 네트워크 인프라를 만든다. 리눅스 브리지는 연결된 VXLAN 인터페이스와 함께 오버레이별로 생성된다. 도커 엔진은 해당 네트워크에 연결된 컨테이너가 호스트에 예약되어 있을 때만 호스트의 오버레이 네트워크를 지능적으로 인스턴스화한다. 이렇게 하면 연결된 컨테이너가 없는 오버레이 네트워크의 무질서한 확산을 방지할 수 있다.&lt;/p&gt;

&lt;p&gt;다음 예제는 오버레이 네트워크를 생성하고 그 네트워크에 컨테이너를 연결한다. 도커 Swarm/UCP는 자동으로 오버레이 네트워크를 생성한다. 다음 예제는 Swarm 또는 UCP를 미리 설정해야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#오버레이 드라이버로 &amp;#34;ovnet&amp;#34;이라는 이름의 오버레이 생성
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ docker network create -d overlay --subnet &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.1.0.0/24 ovnet

&lt;span class=&#34;c1&#34;&gt;#nginx 이미지에서 서비스를 생성하여 &amp;#34;ovnet&amp;#34; 오버레이 네트워크에 연결
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ docker service create --network ovnet nginx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;오버레이 네트워크가 생성되면 호스트 내부에 여러 개의 인터페이스와 브리지가 생성되고, 이 컨테이너 내부에 두 개의 인터페이스도 생성된다는 점에 주목해야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#이 서비스의 컨테이너를 들여다 보면 내부 인터페이스를 볼 수 있다
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;conatiner$ ip address

&lt;span class=&#34;c1&#34;&gt;#docker_gwbridge 네트워크
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;52&lt;/span&gt;: eth0@if55: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt;
    link/ether &lt;span class=&#34;m&#34;&gt;02&lt;/span&gt;:42:ac:14:00:06 brd ff:ff:ff:ff:ff:ff
    inet &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.20.0.6/16 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe14:6/64 scope link
       valid_lft forever preferred_lft forever

&lt;span class=&#34;c1&#34;&gt;#오버레이 네트워크 인터페이스
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;54&lt;/span&gt;: eth1@if53: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1450&lt;/span&gt;
    link/ether &lt;span class=&#34;m&#34;&gt;02&lt;/span&gt;:42:0a:01:00:03 brd ff:ff:ff:ff:ff:ff
    inet &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.1.0.3/24 scope global eth0
       valid_lft forever preferred_lft forever
    inet &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.1.0.2/32 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:aff:fe01:3/64 scope link
       valid_lft forever preferred_lft forever&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;현재 호스트에 있는 두 개의 브리지에 해당하는 컨테이너 내부에 두 개의 인터페이스가 생성되었다. 오버레이 네트워크에서, 각 컨테이너에는 &lt;code&gt;overlay&lt;/code&gt;와 &lt;code&gt;docker_gwbridge&lt;/code&gt;를 각각 연결하는 최소한 두 개의 인터페이스가 있다.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;브리지&lt;/th&gt;
&lt;th&gt;목적&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;overlay&lt;/td&gt;
&lt;td&gt;오버레이 네트워크로의 인그레스 및 엔그레스는  VXLAN이 캡슐화하고 (선택적으로) 동일한 오버레이 네트워크의 컨테이너 간에 전송되는 트래픽을 암호화함. 이 특정 오버레이에 참여하는 모든 호스트에 걸쳐 오버레이를 확장함. 호스트의 오버레이 서브넷당 하나씩 존재하며 지정된 특정 오버레이 네트워크 이름과 동일한 이름을 가지고 있음.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;docker_gwbridge&lt;/td&gt;
&lt;td&gt;클러스터에서 나가는 트래픽에 대한 엔그레스 브리지. 호스트당 하나의 &lt;code&gt;docker_gwbridgege&lt;/code&gt; 만 존재. 이 브리지의 컨테이너 대 컨테이너 트래픽은 인그레스/엔그레스 트래픽 플로우만 허용함.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;도커 오버레이 드라이버는 도커 엔진 1.9 이후 존재해왔으며, 네트워크 상태를 관리하기 위해 외부 K/V 스토어가 필요했다. 도커 엔진 1.12는 더 이상 외부 저장소가 필요하지 않도록 컨트롤 플레인 스테이트를 도커 엔진에 통합했다.  또한 1.12는 암호화와 서비스 로드 밸런싱을 포함한 몇 가지 새로운 기능을 도입했다. 도입된 네트워킹 기능은 이러한 기능을 지원하는 도커 엔진 버전이 필요하며, 이러한 기능을 이전 버전의 도커 엔진과 함께 사용하는 것은 지원하지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;도커-서비스를-위한-외부-액세스&#34;&gt;도커 서비스를 위한 외부 액세스&lt;/h1&gt;

&lt;p&gt;Swarm &amp;amp; UCP는 클러스터 포트 퍼블리싱 외부에서 서비스에 액세스한다. 서비스의 인그레스 및 엔그레스는 중앙 집중식 게이트웨이에 의존하지 않고 특정 서비스 태스크가 실행 중인 호스트에 인그레스/엔그레스가 분산된다. 서비스를 위한 포트 퍼블리싱에는 &lt;code&gt;host&lt;/code&gt; 모드와 &lt;code&gt;ingress&lt;/code&gt; 모드라는 두 가지 모드가 있다.&lt;/p&gt;

&lt;h2 id=&#34;인그레스-모드-서비스-퍼블리싱&#34;&gt;인그레스 모드 서비스 퍼블리싱&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ingress&lt;/code&gt; 모드 포트 퍼블리싱은 &lt;a href=&#34;https://success.docker.com/api/asset/.%2Frefarch%2Fnetworking%2F#routingmesh&#34; target=&#34;_blank&#34;&gt;Swarm Routing Mesh&lt;/a&gt;를 사용하여 서비스 태스크 간에 로드 밸런싱을 적용한다. 인그레스 모드는 모든 UCP/Swarm 노드에 노출된 포트를 퍼블리싱한다. 퍼블리시된 포트로 들어오는 트래픽은 라우팅 메쉬에 의해 로드 밸런싱되고 라운드 로빈 로드 밸런싱을 통해 서비스의 정상적인 태스크 중 하나로 이동된다. 특정 호스트가 서비스 태스크를 실행하고 있지 않더라도 이 포트는 호스트에 퍼블리시되고 태스크가 있는 호스트에 로드 밸런싱된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker service create --replicas &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; --publish &lt;span class=&#34;nv&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ingress,target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;,published&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt; nginx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;mode=ingress&lt;/code&gt;는 서비스의 기본 모드다. 이 명령은 축약 버전 &lt;code&gt;-p 80:8080&lt;/code&gt;으로도 가능하다. 포트 &lt;code&gt;8080&lt;/code&gt;은 클러스터의 모든 호스트에 노출되며, 이 서비스에서는 두 컨테이너에 대한 로드 밸런성이 이루어진다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;호스트-모드-서비스-퍼블리싱&#34;&gt;호스트 모드 서비스 퍼블리싱&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;host&lt;/code&gt; 모드 포트 퍼블리싱은 특정 서비스 태스크가 실행 중인 호스트의 포트만 노출한다. 포트는 해당 호스트의 컨테이너에 직접 매핑된다. 포트 충돌을 방지하기 위해 각 호스트에서 특정 서비스의 단일 태스크만 실행할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker service create --replicas &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; --publish &lt;span class=&#34;nv&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;host,target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;,published&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt; nginx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;host&lt;/code&gt; 모드는 &lt;code&gt;mode=host&lt;/code&gt; 플래그가 필요하다. 이 두 컨테이너가 실행 중인 호스트에 포트 &lt;code&gt;8080&lt;/code&gt;을 로컬로 퍼블리싱한다. 로드 밸런싱은 적용하지 않으므로, 해당 노드에 대한 트래픽은 로컬 컨테이너에만 전달된다. 복제본 수에 사용할 수 있는 포트가 충분하지 않은 경우, 포트 충돌이 발생할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;인그레스-설계&#34;&gt;인그레스 설계&lt;/h2&gt;

&lt;p&gt;두 가지 퍼블리싱 모드 중 하나를 위한 좋은 유즈케이스가 많이 있다. &lt;code&gt;ingress&lt;/code&gt; 모드는 여러 복제본이 있고, 해당 복제본 간에 로드 밸런싱이 필요한 서비스에 잘 작동한다. &lt;code&gt;host&lt;/code&gt; 모드는 다른 툴에 의해 외부 서비스 검색이 이미 제공되어 있는 경우 잘 작동한다. 호스트 모드의 또 다른 좋은 유즈케이스는 호스트별로 한 번씩 존재하는 글로벌 컨테이너이다. 이러한 컨테이너는 해당 호스트에만 관련이 있고 그 서비스에 액세스할 때 로드 밸런싱을 원하지 않는 로컬 호스트에 대한 특정 정보(예: 모니터링 또는 로깅)를 노출할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fingress-vs-host.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;macvlan&#34;&gt;MACVLAN&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;macvlan&lt;/code&gt; 드라이버는 실제로 새로 구현된 진정한 네트워크 가상화 기술이다. 리눅스 구현은 매우 가볍다. 왜나하면 격리를 위해 리눅스 브리지를 사용하는 대신, 네트워크 격리와 물리적 네트워크 연결성을 강제하기 위해 리눅스 이더넷 인터페이스 또는 하위 인터페이스와 간단히 연결되기 때문이다.&lt;/p&gt;

&lt;p&gt;MACVLAN은 여러 가지 고유한 특징과 기능을 제공한다. 매우 단순하고 가벼운 아키텍처 덕택에 성능에 긍정적인 영향을 미친다. MACVLAN 드라이버는 포트 매핑 대신 컨테이너와 물리적 네트워크 간에 직접적으로 액세스한다. 또한 컨테이너는 물리적 네트워크의 서브넷에 있는 라우팅 가능한 IP 주소를 수신할 수 있다.&lt;/p&gt;

&lt;p&gt;MACVLAN 유즈케이스는 다음을 포함할 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;대기 시간이 매우 짧은 애플리케이션&lt;/li&gt;
&lt;li&gt;컨테이너가 외부 호스트 네트워크와 동일한 서브넷에 있고 IP를 외부 네트워크 호스트로 사용해야 하는 네트워크의 설계&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;macvlan&lt;/code&gt; 드라이버는 부모 인터페이스의 개념을 사용한다. 이 인터페이스는 &lt;code&gt;eth0&lt;/code&gt;과 같은 물리적인 인터페이스, &lt;code&gt;eth0.10&lt;/code&gt; (&lt;code&gt;VLAN 10&lt;/code&gt;을 나타내는 &lt;code&gt;.10&lt;/code&gt;)과 같은 802.1q VLAN 태깅을 위한 하위 인터페이스, 또는 두 이더넷 인터페이스를 단일 논리적 인터페이스에 결합하는 본드 호스트 어댑터와 같은 물리적 인터페이스일 수도 있다.&lt;/p&gt;

&lt;p&gt;MACVLAN 네트워크를 구성할 때, 게이트웨이 주소가 필요하다. 게이트웨이는 네트워크 인프라에서 제공하는 호스트 외부에 있어야 한다. MACVLAN 네트워크는 동일한 네트워크에 있는 컨테이너 간의 액세스를 허용한다. 동일한 호스트의 다른 MACVLAN 네트워크 간 액세스는 호스트 외부로 라우팅하지 않으면 불가능하다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fmacvlanarch.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;이 예제는 호스트의 &lt;code&gt;eth0&lt;/code&gt;에 MACVLAN 네트워크를 바인딩한다. 또한 두 개의 컨테이너를 &lt;code&gt;mvnet&lt;/code&gt; MACVLAN 네트워크에 연결하고 그들 사이에서 핑(ping)할 수 있다는 것을 보여준다. 각 컨테이너는 물리적 네트워크 서브넷 &lt;code&gt;192.168.0.0/24&lt;/code&gt;에 주소가 있고, 기본 게이트웨이는 물리적 네트워크의 인터페이스이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#호스트의 eth0에 바인딩된 MACVLAN 네트워크 &amp;#34;mvnet&amp;#34;생성
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ docker network create -d macvlan --subnet &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.0/24 --gateway &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.1 -o &lt;span class=&#34;nv&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;eth0 mvnet

&lt;span class=&#34;c1&#34;&gt;#&amp;#34;mvnet&amp;#34;네트워크에 컨테이너 생성
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ docker run -itd --name c1 --net mvnet --ip &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.3 busybox sh
$ docker run -it --name c2 --net mvnet --ip &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.4 busybox sh
&lt;span class=&#34;c1&#34;&gt;# 192.168.0.3 ping
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;PING &lt;span class=&#34;m&#34;&gt;127&lt;/span&gt;.0.0.1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127&lt;/span&gt;.0.0.1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;56&lt;/span&gt; data bytes
&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; bytes from &lt;span class=&#34;m&#34;&gt;127&lt;/span&gt;.0.0.1: &lt;span class=&#34;nv&#34;&gt;icmp_seq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ttl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.052 ms&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 다이어그램에서 볼 수 있듯이, &lt;code&gt;c1&lt;/code&gt;과 &lt;code&gt;c2&lt;/code&gt;는 호스트의 &lt;code&gt;eth0&lt;/code&gt;에 연결된 &lt;code&gt;macvlan&lt;/code&gt; 이라는 MACVLAN 네트워크를 통해 연결된다.&lt;/p&gt;

&lt;h2 id=&#34;macvlan을-사용한-vlan-트렁킹&#34;&gt;MACVLAN을 사용한 VLAN 트렁킹&lt;/h2&gt;

&lt;p&gt;리눅스 호스트에 802.1q를 트렁킹하는 것은 운영에 있어 많은 이들에게 악명높을 정도로 고통스럽다. 재부팅에도 지속되려면 설정 파일을 변경해야 한다. 브리지가 관련되어 있으면, 물리적 NIC를 브리지로 옮기고 그 브리지가 IP 주소를 얻어와야 한다. &lt;code&gt;macvlan&lt;/code&gt; 드라이버는 생성, 파괴 및 호스트 재부팅을 통해 MACVLAN 네트워크의 하위 인터페이스와 기타 컴포넌트를 완벽하게 관리한다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Ftrunk-macvlan.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;macvlan&lt;/code&gt; 드라이버가 하위 인터페이스로 인스턴스화되면 호스트와 L2의 세그먼트 컨테이너에 대한 VLAN 트렁킹할 수 있다. &lt;code&gt;macvlan&lt;/code&gt; 드라이버는 자동으로 하위 인터페이스를 만들고, 이를 컨테이너 인터페이스에 연결한다. 그 결과, 각 컨테이너는 다른 VLAN에 있으며 트래픽이 물리적 네트워크에서 라우팅되지 않는 한, 컨테이너 간의 통신은 불가능하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#VLAN 10에 macvlan10 네트워크 생성
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ docker network create -d macvlan --subnet &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.10.0/24 --gateway &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.10.1 -o &lt;span class=&#34;nv&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;eth0.10 macvlan10

&lt;span class=&#34;c1&#34;&gt;#VLAN 20에 macvlan20 네트워크 생성
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ docker network create -d macvlan --subnet &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.20.0/24 --gateway &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.20.1 -o &lt;span class=&#34;nv&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;eth0.20 macvlan20

&lt;span class=&#34;c1&#34;&gt;#별도의 MACVLAN 네트워크에서 컨테이너 생성
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ docker run -itd --name c1--net macvlan10 --ip &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.10.2 busybox sh
$ docker run -it --name c2--net macvlan20 --ip &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.20.2 busybox sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞선 설정에서 하위 인터페이스를 상위 인터페이스로 사용하도록 설정된 &lt;code&gt;macvlan&lt;/code&gt; 드라이버를 사용하여 두 개의 개별 네트워크를 생성했다. &lt;code&gt;macvlan&lt;/code&gt; 드라이버는 하위 인터페이스를 생성하고 이를 호스트의 &lt;code&gt;eth0&lt;/code&gt;과 컨테이너 인터페이스 간에 연결한다. 호스트 인터페이스와 업스트림 스위치는 &lt;code&gt;switchport mode trunk&lt;/code&gt;로 설정해 주어야 VLAN이 태그되어 인터페이스를 통과할 수 있다. 하나 또는 그 이상의 컨테이너를 지정된 MACVLAN 네트워크에 연결해서 L2를 통해 세그먼트화된 복잡한 네트워크 정책을 만들 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;여러 개의 MAC 주소가 단일 호스트 인터페이스 뒤에 있으므로, MAC 필터링의 NIC 지원에 따라 인터페이스에서 비규칙 모드(promiscuous mode)를 활성화해야할 수도 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;무지정-none-격리용-네트워크-드라이버&#34;&gt;무지정(None, 격리용) 네트워크 드라이버&lt;/h1&gt;

&lt;p&gt;호스트 네트워크 드라이버와 마찬가지로 &lt;code&gt;none&lt;/code&gt; 네트워크 드라이버는 기본적으로 관리되지 않는 네트워킹 옵션이다. 도커 엔진은 컨테이너 내부에 인터페이스를 만들거나, 포트 매핑을 설정하거나, 연결을 위한 경로를 설치하지 않는다. &lt;code&gt;--net=none&lt;/code&gt;을 사용하는 컨테이너는 다른 컨테이너와 호스트로부터 완전히 격리된다. 네트워킹 관리자 또는 외부 툴이 이 배관을 제공해야 한다. &lt;code&gt;none&lt;/code&gt;을 사용하는 컨테이너는 루프백 인터페이스만 있고 다른 인터페이스는 없다.&lt;/p&gt;

&lt;p&gt;호스트 드라이버와 달리, &lt;code&gt;none&lt;/code&gt; 드라이버는 각 컨테이너에 대해 구분된 네임스페이스를 생성하지 않는다. 이는 컨테이너와 호스트 사이의 컨테이너 네트워크를 확실하게 격리시킨다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;--net=none&lt;/code&gt; 또는 &lt;code&gt;--net=host&lt;/code&gt;를 사용하는 컨테이너는 다른 도커  네트워크에 연결할 수 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;물리적-네트워크-설계-요구사항&#34;&gt;물리적 네트워크 설계 요구사항&lt;/h1&gt;

&lt;p&gt;도커 엔터프라즈 엔진 및 도커 네트워킹은 공통 데이터 센터 네트워크 인프라와 토폴로지에서 실행되도록 설계되었다. 중앙 집중식 컨트롤러와 무정지(fault-tolerance) 클러스터는 광범위한 네트워크 환경에서 호환성을 보장한다. 네트워킹 기능(네트워크 프로비저닝, MAC 학습, 오버레이 암호화)을 제공하는 컴포넌트는 도커 엔진, UCP 또는 리눅스 커널 자체의 일부이다. 네이티브 도커 네트워킹 드라이버를 실행하는 데 추가 컴포넌트나 특수 네트워킹 기능이 필요없다.&lt;/p&gt;

&lt;p&gt;보다 구체적으로, 도커 네이티브 네트워크 드라이버는 다음에 대한 요구사항이 없다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;멀티캐스트&lt;/li&gt;
&lt;li&gt;외부 키밸류 저장소&lt;/li&gt;
&lt;li&gt;특정 라우팅 프로토콜&lt;/li&gt;
&lt;li&gt;호스트 간의 Layer 2 종속성&lt;/li&gt;
&lt;li&gt;스핀(spine) 및 리프(leaf), 전통적인 3티어 및 PoD 설계와 같은 특정 토폴로지. 이러한 토폴로지는 지원된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이는 모든 환경에서 애플리케이션 이식성을 향샹시키면서 애플리케이션에 필요한 성능 및 정책을 변함없이 획득하는 컨테이너 네트워킹 모델(CNM)과 일치한다.&lt;/p&gt;

&lt;h1 id=&#34;swarm-네이티브-서비스-검색&#34;&gt;Swarm 네이티브 서비스 검색&lt;/h1&gt;

&lt;p&gt;도커는 단일 도커 엔진에서 실행되는 컨테이너와 도커 Swarm에서 실행되는 &lt;code&gt;task&lt;/code&gt;에 대한 서비스 검색을 제공하기 위해 내장된 DNS를 사용한다. 도커 엔진에는 사용자 정의 브리지, 오버레이 및 MACVLAN 네트워크의 호스트에 있는 모든 컨테이너에 이름 분석(name resolution)을 하는 내부 DNS 서버가 있다. 각 도커 컨테이너(또는 Swarm 모드의 &lt;code&gt;task&lt;/code&gt;)에는 DNS 리졸버가 있어 DNS 쿼리를 DNS 서버 역할을 하는 도커 엔진에 전달한다. 그런 다음 도커 엔진은 DNS 쿼리가 요청 컨테이너가 속한 네트워크의 컨테이너 또는 &lt;code&gt;service&lt;/code&gt;에 속하는지 여부를 확인한다. 이 경우 도커 엔진은 키밸류 저장소에서 컨테이너, &lt;code&gt;task&lt;/code&gt; 또는 &lt;code&gt;server&lt;/code&gt;의 &lt;strong&gt;이름&lt;/strong&gt;과 일치하는 IP 주소를 찾아 해당 IP 또는 서비스 가상 IP(VIP)를 다시 요청자에게 반환한다.&lt;/p&gt;

&lt;p&gt;서비스 검색은 네트워크 스코프화되며, 동일한 네트워크에 있는 컨테이너 또는 태스크만 내장형 DNS 기능을 사용할 수 있음을 의미한다. 같은 네트워크에 있지 않은 컨테이너는 서로의 주소를 확인할 수 없다. 덧붙여, 네트워크의 DNS 항목이 있는 특정 네트워크 저장소에 컨테이너 또는 태스크가 있는 노드만 사용할 수 있다. 이는 보안과 성능을 증진시킨다.&lt;/p&gt;

&lt;p&gt;대상 컨테이너 또는 &lt;code&gt;service&lt;/code&gt;가 소스 컨테이너와 동일한 네트워크에 있지 않는 경우, 도커 엔진은 기본 DNS 서버를 구성하기 위해 도커 쿼리를 전달한다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2FDNS.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;이 예에서는 &lt;code&gt;myservice&lt;/code&gt;라고 하는 두 개의 컨테이너 서비스가 있다. 두 번째 서비스(&lt;code&gt;client&lt;/code&gt;)는 동일한 네트워크에 존재한다. 그 &lt;code&gt;client&lt;/code&gt;는 &lt;code&gt;docker.com&lt;/code&gt;과 &lt;code&gt;myservice&lt;/code&gt;에 대해 두 번의 curl 태스크를 실행한다.&lt;/p&gt;

&lt;p&gt;다음은 발생하게 되는 액션이다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker.com&lt;/code&gt; 및 &lt;code&gt;myservice&lt;/code&gt;에 대한 DNS 쿼리가 &lt;code&gt;client&lt;/code&gt;에 의해 시작된다.&lt;/li&gt;
&lt;li&gt;컨테이너의 내장형 리졸버는 &lt;code&gt;127.0.11:53&lt;/code&gt;의 DNS 쿼리를 가로채 도커 엔진의 DNS 서버로 보낸다.&lt;/li&gt;
&lt;li&gt;내 &lt;code&gt;myservice&lt;/code&gt;는 개별 태스크 IP 주소로 내부 로드 밸런싱되는 해당 서비스의 가상 IP(VIP)로 식별된다. IP 주소에 직접 연결되더라도 컨테이너 이름은 마찬가지로 리졸브된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker.com&lt;/code&gt;은 &lt;code&gt;mynet&lt;/code&gt; 네트워크에 서비스 이름으로 존재하지 않으므로 요청은 설정된 기본 DNS 서버로 전달된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;도커-네이티브-로드-밸런싱&#34;&gt;도커 네이티브 로드 밸런싱&lt;/h1&gt;

&lt;p&gt;도커 Swarm 클러스터에는 엔진에 바로 내장된 내부 및 외부 로드 밸런싱 기능이 있다. 내부 로드 밸런싱은 동일한 Swarm 또는 UCP 클러스터 내의 컨테이너 간에 로드 밸런싱을 제공한다. 외부 로드 밸런싱은 클러스터로 들어오는 인그레스 트래픽의 로드 밸런싱을 제공한다.&lt;/p&gt;

&lt;h2 id=&#34;ucp-내부-로드-밸런싱&#34;&gt;UCP 내부 로드 밸런싱&lt;/h2&gt;

&lt;p&gt;도커 서비스가 만들어지면 내부 로드 밸런싱이 자동으로 인스턴스화된다. 서비스가 도커 Swarm 클러스터에서 생성되면 서비스 네트워크의 일부인 가상 IP(VIP)가 자동으로 할당된다. 서비스 이름을 확인하면 VIP가 반환된다. 해당 VIP에 대한 트래픽은 오버레이 네트워크를 통해 해당 서비스의 정상적인 모든 태스크로 자동 전송된다. 이 방법은 단일 IP만 클라이언트로 반환되기 때문에 클라이언트측 로드 밸런싱을 피할 수 있다. 도커는 라우팅을 처리하고 정상적인 서비스 태스크 전반에 트래픽을 균등하게 분배한다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fipvs.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;VIP를 보기 위해서는, 다음과 같이 &lt;code&gt;docker service inspect my_service&lt;/code&gt;를 실행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#mynet이라 부르는 오버레이 네트워크 생성
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ docker network create -d overlay mynet
a59umzkdj2r0ua7x8jxd84dhr

&lt;span class=&#34;c1&#34;&gt;#해당 네트워크의 일부로 2개의 복제본을 사용하여 myservice를 생성
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ docker service create --network mynet --name myservice --replicas &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; busybox ping localhost
8t5r8cr0f0h6k2c3k7ih4l6f5

&lt;span class=&#34;c1&#34;&gt;#해당 서비스에 대해 생성된 VIP 보기
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ docker service inspect myservice
...

&lt;span class=&#34;s2&#34;&gt;&amp;#34;VirtualIPs&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;NetworkID&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;a59umzkdj2r0ua7x8jxd84dhr&amp;#34;&lt;/span&gt;,
                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Addr&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.0.0.3/24&amp;#34;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;DNS RR(DNS RR) 로드 밸런싱은 서비스에 대한 또 다른 로드 밸런싱 옵션이다( &lt;code&gt;--endpoint-mode&lt;/code&gt;로 구성). DNS RR 모드에서는 각 서비스에 대해 VIP가 만들어지지 않는다. Docker DNS 서버는 라운드 로빈 방식으로 개별 컨테이너 IP에 대한 서비스 이름을 확인한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;ucp-외부-l4-로드-밸런싱-도커-라우팅-메쉬&#34;&gt;UCP 외부 L4 로드 밸런싱 (도커 라우팅 메쉬)&lt;/h2&gt;

&lt;p&gt;서비스를 만들거나 업데이트할 때 &lt;code&gt;--publish&lt;/code&gt; 플래그를 사용하여 서비스를 외부에 노출할 수 있다. 도커 Swarm 모드로 포트를 게시하는 것은 클러스터의 모든 노드가 해당 포트에서 수신 중임을 의미한다. 하지만 서비스 태스크가 해당 포트에서 수신 중인 노드에 있지 않으면 어떻게 될까?&lt;/p&gt;

&lt;p&gt;이 지점에서 라우팅 메쉬가 작동한다. 라우팅 메쉬는 &lt;code&gt;ipvs&lt;/code&gt;와 &lt;code&gt;iptables&lt;/code&gt;를 결합하여 강력한 클러스터 전체 전송 계층(L4) 로드 밸런서를 만드는 Docker 1.12의 새로운 기능이다. 모든 Swarm 노드는 서비스의 퍼블리싱된 포트에 대한 연결을 허용할 수 있도록 한다. Swarm 노드가 실행 중인 &lt;code&gt;service&lt;/code&gt;의 퍼블리싱된 TCP/UDP 포트로 향하는 트래픽을 수신할 때, &lt;code&gt;ingress&lt;/code&gt;라는 사전 정의된 오버레이 네트워크를 사용하여 이를 서비스의 VIP로 전달한다. &lt;code&gt;ingress&lt;/code&gt; 네트워크는 다른 오버레이 네트워크와 유사하게 동작하지만 유일한 목적은 외부 클라이언트에서 클러스터 서비스로 메쉬 라우팅 트래픽을 전송하는 것이다. 이전 섹션에서 설명한 것과 동일한 VIP 기반 내부 로드 밸런싱을 사용한다.&lt;/p&gt;

&lt;p&gt;서비스를 시작하면 애플리케이션에 대한 외부 DNS 레코드를 만들어 모든 도커 Swarm 노드 중 일부 또는 전부에 매핑할 수 있다. 클러스터의 모든 노드가 라우팅 메쉬 라우팅 기능이 있는 노드처럼 보이므로 컨테이너가 실행되는 위치에 대해 걱정할 필요가 없다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#2개의 복제본을 사용하여 서비스를 생성하고 클러스터에 포트 8000을 내보내기
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ docker service create --name app --replicas &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; --network appnet -p &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;:80 nginx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Frouting-mesh.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;이 다이어그램은 라우팅 메쉬가 어떻게 작동하는지 보여준다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;서비스는 두 개의 복제본으로 만들어지며 포트 &lt;code&gt;8000&lt;/code&gt;에 외부적으로 매핑된다.&lt;/li&gt;
&lt;li&gt;라우팅 메쉬는 클러스터의 각 호스트에 있는 포트 &lt;code&gt;8000&lt;/code&gt;을 노출한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app&lt;/code&gt;으로 향하는 트래픽은 모든 호스트에서 들어갈 수 있다. 이 경우 외부 LB는 서비스 복제본이 없이 호스트에 트래픽을 전송한다.&lt;/li&gt;
&lt;li&gt;커널의 IPVS 로드 밸런서는 &lt;code&gt;ingress&lt;/code&gt; 오버레이 네트워크의 트래픽을 정상적인 서비스 복제본으로 리디렉션한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ucp-외부-l7-로드-밸런싱-http-라우팅-메쉬&#34;&gt;UCP 외부 L7 로드 밸런싱 (HTTP 라우팅 메쉬)&lt;/h2&gt;

&lt;p&gt;UCP는 HTTP 라우팅 메쉬를 통해 L7 HTTP/HTTPS 로드 밸런싱을 제공한다. URL은 서비스에 로드 밸런싱될 수 있고 서비스 복제본에 걸쳐 로드 밸런싱될 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fucp-hrm.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://success.docker.com/Architecture/Docker_Reference_Architecture%3A_Universal_Control_Plane_2.0_Service_Discovery_and_Load_Balancing&#34; target=&#34;_blank&#34;&gt;UCP 로드 밸런싱 참조 아키텍처&lt;/a&gt;로 가서 UCP L7 LB 설계에 대해 좀 더 살펴보라.&lt;/p&gt;

&lt;h1 id=&#34;도커-네트워크-보안-및-암호화&#34;&gt;도커 네트워크 보안 및 암호화&lt;/h1&gt;

&lt;p&gt;도커를 사용하여 컨테이너형 워크로드를 설계하고 구현할 때 네트워크 보안은 최우선 고려사항이다. 이 섹션에서는 도커 네트워크를 배포할 때 고려해야할 핵심 보안사항을 다룬다.&lt;/p&gt;

&lt;h2 id=&#34;네트워크-세분화-segmentation-그리고-데이터-플레인-보안&#34;&gt;네트워크 세분화(Segmentation) 그리고 데이터 플레인 보안&lt;/h2&gt;

&lt;p&gt;도커는 도커 네트워크를 세분화하고 컨테이너 리소스에 대한 악의적인 액세스를 방지하기 위해  분산 방화벽 규칙을 관리한다. 기본적으로 도커 네트워크는 트래픽을 차단하기 위해 서로 세분화되어 있다. 이 접근방식은 Layer 3에서 진정한 네트워크 격리를 제공한다.&lt;/p&gt;

&lt;p&gt;도커 엔진은 네트워크 간 액세스를 차단하고 노출된 컨테이너의 포트를 관리하는 호스트 방화벽 규칙을 관리한다. Swarm &amp;amp; UCP 클러스터에서 이렇게 하면 클러스터에서 애플리케이션이 스케쥴링될 때 애플리케이션을 동적으로 보호하는 분산 방화벽이 만들어진다.&lt;/p&gt;

&lt;p&gt;이 표는 도커 네트워크를 이용한 몇 가지 액세스 정책을 요약한 것이다.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;경로&lt;/th&gt;
&lt;th&gt;액세스&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;도커 네트워크 내부&lt;img width=300/&gt;&lt;/td&gt;
&lt;td&gt;액세스는 동일한 도커 네트워크의 모든 포트에 있는 모든 컨테이너 사이에 허용된다. 이는 모든 네트워크 유형(메인 범위, 로컬 범위, 내장 드라이버 및 원격 드라이버)에 적용된다.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;도커 네트워크 사이&lt;/td&gt;
&lt;td&gt;액세스는 도커 엔진에 의해 관리되는 분산 호스트 방화벽 규칙에 의해 도커 네트워크 사이에 거부된다. 컨테이너를 여러 개의 네트워크에 연결하여 다른 도커 네트워크 사이에 통신할 수 있다. 도커 네트워크 사이의 네트워크 연결은 호스트 외부에서 관리할 수도 있다.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;도커 네트워크에서 엔그레스&lt;/td&gt;
&lt;td&gt;도커 호스트 외부로 향하는 도커 네트워크 내부에서 발생한 트래픽은 허용된다. 호스트의 로컬 스테이트풀 방화벽은 연결을 추적하여 해당 연결에 대한 응답을 허용한다.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;인그레스에서 도커 네트워크&lt;/td&gt;
&lt;td&gt;인그레스 트래픽은 기본적으로 거부된다. 호스트 포트 또는 인그레스 모드 포트를 통한 포트 노출은 명백한 인그레스 액세스를 제공한다. &lt;p&gt;&lt;br/&gt;&lt;/p&gt; 예외적으로 MACVLAN 드라이버는 외부 네트워크와 동일한 IP 공간에서 작동하고 해당 네트워크 내에서 완전히 열린다. MACVLAN과 유사하게 작동하는 다른 원격 드라이버는 인그레스 트래픽도 허용할 수 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;컨트롤-플레인-보안&#34;&gt;컨트롤 플레인 보안&lt;/h2&gt;

&lt;p&gt;도커 Swarm은 통합된 PKI를 따른다. Swarm에 있는 모든 관리자와 노드는 서명된 인증서 형식의 암호로 암호화된(cryptographically signed) ID를 가지고 있다. 관리자-관리자 사이 및 매니저-노드 사이의 모든 컨트롤 통신은 TLS를 통해 외부로부터 보호된다. 도커 Swarm 모드에서 종단간 컨트롤 플레인 트래픽을 확보하기 위해 외부에서 인증서를 생성하거나 CA를 수동으로 설정할 필요가 없다. 인증서는 주기적으로 자동으로 순환된다.&lt;/p&gt;

&lt;h2 id=&#34;데이터-플레인-네트워크-암호화&#34;&gt;데이터 플레인 네트워크 암호화&lt;/h2&gt;

&lt;p&gt;도커는 바로 사용할 수 있는 오버레이 네트워크에 대해 IPSec 암호화를 지원한다. Swarm 및 UCP 관리 IPSec 터널은 소스 컨테이너를 떠날 때 네트워크 트래픽을 암호화하고 목적지 컨테이너에 들어갈 때 암호를 복호한다. 이렇게 하면 기본 네트워크에 관계없이 전송되는 애플리케이션 트래픽이 매우 안전할 수 있다. 하이브리드, 멀티 테넌트(Multi-tenant) 또는 멀티 클라우드 환경에서는 제어할 수 없는 네트워크를 통과할 때 데이터가 안전하게 보호되도록 하는 것이 중요하다.&lt;/p&gt;

&lt;p&gt;이 다이어그램은 도커 Swarm의 서로 다른 호스트에서 실행되는 두 컨테이너 사이의 통신을 보호하는 방법을 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fipsec.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;이 기능은 &lt;code&gt;--opt crypted=true&lt;/code&gt; 옵션 (예: &lt;code&gt;docker network create -d overlay --opt crypted=true &amp;lt;NETWORK_NAME&amp;gt;&lt;/code&gt;)을 추가하여 생성시 네트워크별로 활성화할 수 있다. 네트워크가 생성된 후에는 해당 네트워크에서 서비스를 시작할 수 있다 (예: &lt;code&gt;docker service create --netWORK_NAME&amp;gt; &amp;lt;IMAGE&amp;gt; &amp;lt;COMMAND&amp;gt;&lt;/code&gt;). 동일한 서비스의 두 태스크가 서로 다른 두 호스트에서 생성되면, IPsec 터널이 생성되고 소스 호스트를 떠날 때 트래픽이 암호화되고, 목적지 호스트에 들어올 때 암호가 복호된다.&lt;/p&gt;

&lt;p&gt;Swarm 리더는 주기적으로 대칭 키를 재생성하여 모든 클러스터 노드에 안전하게 배포한다. 이 키는 IPsec에서 데이터 플레인 트래픽을 암호화하고 복호화하는 데 사용된다. 암호화는 AES-GCM을 사용하여 호스트 간 전송 모드에서 IPSec를 통해 구현된다.&lt;/p&gt;

&lt;h2 id=&#34;관리-플레인-보안-및-ucp의-rbac&#34;&gt;관리 플레인 보안 및 UCP의 RBAC&lt;/h2&gt;

&lt;p&gt;UCP로 네트워크를 만들 때, 팀과 레이블은 컨테이너 리소스에 대한 액세스를 정의한다. 리소스 권한 레이블은 특정 도커 네트워크를 보고 설정하고 사용할 수 있는 사용자를 정의한다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fucp-network.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;이 UCP 스크린샷은 해당 팀 구성원에게만 이 네트워크에 대한 접근을 제어하기 위한 &lt;code&gt;product-team&lt;/code&gt; 라벨의 사용을 보여준다. 또한 네트워크 암호화와 같은 옵션은 UCP를 통해 전환할 수 있다.&lt;/p&gt;

&lt;h1 id=&#34;ip-주소-관리&#34;&gt;IP 주소 관리&lt;/h1&gt;

&lt;p&gt;컨테이너 네트워킹 모델(CNM)은 유연한 IP 주소 관리 방법을 제공한다. IP 주소 관리를 위한 두 가지 방법이 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CNM은 클러스터에 대해 전역으로 IP 주소를 간단하게 할당하고 중복 할당을 방지하는 네이티브 IPAM 드라이버를 가지고 있다. 네이티브 IPAM 드라이버는 다른 드라이버가 지정되지 않은 경우 기본적으로 사용되는 드라이버다.&lt;/li&gt;
&lt;li&gt;CNM은 다른 벤더와 커뮤니티의 원격 IPAM 드라이버를 사용하는 인터페이스를 가지고 있다. 이러한 드라이버는 기존 벤더 또는 자체 내장 IPAM 도구에 통합될 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;컨테이너 IP 주소와 네트워크 서브넷의 수동 구성은 UCP, CLI 또는 도커 API를 사용해 수행할 수 있다. 주소 요청은 선택된 드라이버를 거친 후에 요청을 처리하는 방법을 결정한다.&lt;/p&gt;

&lt;p&gt;서브넷 크기와 설계는 주로 특정 애플리케이션과 특정 네트워크 드라이버에 의존한다. IP 주소 공간 설계는 다음 절에서 각 &lt;a href=&#34;https://success.docker.com/api/asset/.%2Frefarch%2Fnetworking%2F#models&#34; target=&#34;_blank&#34;&gt;네트워크 배포 모델&lt;/a&gt;에 대해 보다 심도 있게 다룬다. 포트 매핑, 오버레이 및 MACVLAN의 사용은 모두 IP 주소 할당 방법에 영향을 미친다. 일반적으로 컨테이너 주소 지정은 두 개의 버킷으로 나뉜다. 내부 컨테이너 네트워크(브리지 및 오버레이)는 기본적으로 물리적 네트워크에서 라우팅할 수 없는 IP 주소를 가진 컨테이너를 처리한다. MACVLAN 네트워크는 물리적 네트워크의 서브넷에 있는 컨테이너에 IP 주소를 제공한다. 따라서, 컨테이너 인터페이스의 트래픽은 물리적 네트워크에서 라우팅할 수 있다. 내부 네트워크(브리지, 오버레이)의 서브넷이 물리적 언더레이 네트워크의 IP 공간과 충돌하지 않아야 한다는 점에 유의해야 한다. 겹치는 주소 공간으로 인해 트래픽이 목적지에 도달하지 못할 수 있다.&lt;/p&gt;

&lt;h1 id=&#34;네트워크-트러블슈팅&#34;&gt;네트워크 트러블슈팅&lt;/h1&gt;

&lt;p&gt;도커 네트워크 트러블슈팅은 데브옵스 엔지니어와 네트워크 엔지니어에게 어려울 수 있다. 도커 네트워킹의 작동 방식과 적절한 도구 세트를 올바르게 이해하면 이러한 네트워크 문제를 해결할 수 있다. 한 가지 권장되는 방법은 &lt;a href=&#34;https://github.com/nicolaka/netshoot&#34; target=&#34;_blank&#34;&gt;netshoot&lt;/a&gt; 컨테이너를 사용하여 네트워크 문제를 해결하는 것이다. &lt;code&gt;netshoot&lt;/code&gt; 컨테이너에는 도커 네트워크 문제를 해결하는 데 사용할 수 있는 강력한 네트워킹 트러블슈팅 도구 모음이다.&lt;/p&gt;

&lt;p&gt;netshoot과 같은 트러블슈팅 컨테이너를 사용하는 것의 장점은 네트워크 트러블슈팅 도구가 이식 가능하다는 것이다. &lt;code&gt;netshoot&lt;/code&gt; 컨테이너는 호스트 네트워크의 뷰포인트를 검사하기 위해 어떤 네트워크에 연결되거나, 호스트 네트워크 네임스페이스, 또는 다른 컨테이너의 네트워크 네임스페이스에 배치될 수 있다.&lt;/p&gt;

&lt;p&gt;컨테이너에는 아래 도구 등이 포함된다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iperf&lt;/li&gt;
&lt;li&gt;tcpdump&lt;/li&gt;
&lt;li&gt;netstat&lt;/li&gt;
&lt;li&gt;iftop&lt;/li&gt;
&lt;li&gt;drill&lt;/li&gt;
&lt;li&gt;util-linux(nsenter)&lt;/li&gt;
&lt;li&gt;curl&lt;/li&gt;
&lt;li&gt;nmap&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;네트워크-배포-모델&#34;&gt;네트워크 배포 모델&lt;/h1&gt;

&lt;p&gt;다음 예제는 &lt;a href=&#34;https://github.com/mark-church/docker-pets&#34; target=&#34;_blank&#34;&gt;도커 펫&lt;/a&gt;이라는 가상의 앱을 사용하여 &lt;strong&gt;네트워크 배포 모델(Network Deployment Models)&lt;/strong&gt;을 보여준다. 백엔드 데이터베이스에서 페이지에 대한 히트 수를 계산하면서 웹페이지에 있는 애완동물의 이미지를 제공한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;web&lt;/code&gt;은 &lt;code&gt;chrch/docker-pets:1.0&lt;/code&gt; 이미지를 기반으로 하는 프런트엔드 웹 서버임&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db&lt;/code&gt;는 &lt;code&gt;consul&lt;/code&gt; 백엔드임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;chrch/docker-pets&lt;/code&gt;는 백엔드 &lt;code&gt;db&lt;/code&gt; 서비스를 찾는 방법을 알려주는 환경 변수 &lt;code&gt;DB&lt;/code&gt;를 기대한다.&lt;/p&gt;

&lt;h2 id=&#34;단일-호스트의-브리지-드라이버&#34;&gt;단일 호스트의 브리지 드라이버&lt;/h2&gt;

&lt;p&gt;이 모델은 네이티브 도커 &lt;code&gt;bridge&lt;/code&gt; 네트워크 드라이버의 기본 동작이다. &lt;code&gt;bridge&lt;/code&gt; 드라이버는 호스트 내부에 전용 네트워크를 생성하고 외부 연결을 위해 호스트 인터페이스에 외부 포트 매핑을 제공한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker network create -d bridge petsBridge

$ docker run -d --net petsBridge --name db consul

$ docker run -it --env &lt;span class=&#34;s2&#34;&gt;&amp;#34;DB=db&amp;#34;&lt;/span&gt; --net petsBridge --name web -p &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;:5000 chrch/docker-pets:1.0
Starting web container e750c649a6b5
 * Running on http://0.0.0.0:5000/ &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;IP 주소를 지정하지 않으면 호스트의 모든 인터페이스에 포트 매핑이 노출된다. 이 경우 컨테이너의 애플리케이션이 &lt;code&gt;0.0.0.0:8000&lt;/code&gt;에 노출된다. 알릴 특정 IP 주소를 제공하려면 플래그 &lt;code&gt;-p IP:host_port:container_port&lt;/code&gt;를 사용한다. 포트를 노출하는 추가 옵션은 &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#/expose-incoming-ports&#34; target=&#34;_blank&#34;&gt;도커 docs&lt;/a&gt;에서 찾을 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fsinglehost-bridge.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;애플리케이션은 모든 인터페이스의 포트 &lt;code&gt;8000&lt;/code&gt;에서 이 호스트에 로컬로 노출된다. 또한 백엔드 컨테이너의 이름을 제공하는 &lt;code&gt;DB=db&lt;/code&gt;도 공급된다. 도커 엔진의 내장 DNS를 통해 이 컨테이너 이름이 &lt;code&gt;db&lt;/code&gt;의 IP 주소로 확인된다. &lt;code&gt;bridge&lt;/code&gt;는 로컬 드라이버이기 때문에 DNS 레졸루션 범위는 단일 호스트에만 있다.&lt;/p&gt;

&lt;p&gt;아래의 출력은 우리의 컨테이너가 &lt;code&gt;petsBridge&lt;/code&gt; 네트워크의 &lt;code&gt;172.19.0.0/24&lt;/code&gt; IP 공간으로부터 개인 IP를 할당받았다는 것을 보여준다. 도커는 다른 IPAM 드라이버가 지정되지 않은 경우, 내장 IPAM 드라이버를 사용하여 적절한 서브넷에서 IP를 제공한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker inspect --format &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt;.NetworkSettings.Networks.petsBridge.IPAddress&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt; web
&lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.19.0.3

$ docker inspect --format &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt;.NetworkSettings.Networks.petsBridge.IPAddress&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt; db
&lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.19.0.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이러한 IP 주소는 &lt;code&gt;petsBridge&lt;/code&gt; 네트워크 내부의 통신에 내부적으로 사용된다. 이러한 IP는 호스트 밖으로 절대 노출되지 않는다.&lt;/p&gt;

&lt;h2 id=&#34;외부-서비스-검색의-멀티-호스트-브리지-드라이버&#34;&gt;외부 서비스 검색의 멀티 호스트 브리지 드라이버&lt;/h2&gt;

&lt;p&gt;브리지 드라이버는 로컬 범위 드라이버이기 때문에 다중 호스트 네트워킹에는 다중 호스트 서비스 검색 솔루션이 필요하다. 외부 SD는 컨테이너 또는 서비스의 위치와 상태를 등록한 다음 다른 서비스가 해당 위치를 검색할 수 있도록 한다. 브리지 드라이버는 외부 액세서를 위해 포트를 노출하므로, 외부 SD는 &lt;code&gt;host-ip:port&lt;/code&gt;를 지정된 컨테이너의 위치로 저장한다.&lt;/p&gt;

&lt;p&gt;다음 예에서는, 각 서비스의 위치가 수동으로 설정되어, 외부 서비스 검색을 시뮬레이션한다. &lt;code&gt;db&lt;/code&gt; 서비스의 위치는 &lt;code&gt;DB&lt;/code&gt; 환경 변수를 통해 웹으로 전달된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#백엔드 db 서비스를 생성하여 포트 8500에 노출
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;host-A $ docker run -d -p &lt;span class=&#34;m&#34;&gt;8500&lt;/span&gt;:8500 --name db consul

&lt;span class=&#34;c1&#34;&gt;#host-A의 호스트 IP 표시
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;host-A $ ip add show eth0 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep inet
    inet &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.31.21.237/20 brd &lt;span class=&#34;m&#34;&gt;172&lt;/span&gt;.31.31.255 scope global eth0
    inet6 fe80::4db:c8ff:fea0:b129/64 scope link

&lt;span class=&#34;c1&#34;&gt;#프론트엔드 웹 서비스를 생성하여 host-B의 포트 8000에 노출
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;host-B $ docker run -d -p &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;:5000 -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;DB=172.31.21.237:8500&amp;#39;&lt;/span&gt; --name web chrch/docker-pets:1.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;web&lt;/code&gt; 서비스는 이제 &lt;code&gt;host-B&lt;/code&gt; IP 주소의 포트 &lt;code&gt;8000&lt;/code&gt;에서 웹 페이지를 서비스해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Fmulti-host-bridge.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;이 예에서는 사용할 네트워크를 지정하지 않으므로, 기본 도커 &lt;code&gt;bridge&lt;/code&gt; 네트워크가 자동으로 선택된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;db&lt;/code&gt; 위치를 &lt;code&gt;172.31.237:8500&lt;/code&gt;으로 설정하면, 서비스 검색의 폼을 생성하게 된다. 우리는 웹 서비스를 위한 &lt;code&gt;db&lt;/code&gt; 서비스의 위치를 정적으로 설정하고 있다. 단일 호스트 예에서, 도커 엔진은 컨테이너 이름에 대해 내장 DNS 레졸루션을 제공했기 때문에, 자동으로 수행되었다. 이 다중 호스트 예제에서는 서비스 검색을 수동으로 수행하고 있다.&lt;/p&gt;

&lt;p&gt;프로덕션 환경에서는 애플리케이션 위치의 하드 코딩이 권장되지 않는다. 외부 서비스 검색 도구는 클러스터에서 컨테이너가 생성 및 파괴될 때 이러한 매핑을 동적으로 제공한다. 몇 가지 예는 &lt;a href=&#34;https://www.consul.io/&#34; target=&#34;_blank&#34;&gt;consul&lt;/a&gt;과 &lt;a href=&#34;https://coreos.com/etcd/&#34; target=&#34;_blank&#34;&gt;etcd&lt;/a&gt;이다.&lt;/p&gt;

&lt;p&gt;다음 섹션에서는 클러스터 전반에서 전역 서비스 검색을 내장 기능으로 제공하는 &lt;code&gt;overlay&lt;/code&gt; 드라이버 시나리오를 살펴본다. 이러한 단순성은 네트워크 서비스를 제공하기 위해 여러 외부 도구를 사용하는 것과 대조적인 &lt;code&gt;overlay&lt;/code&gt; 드라이버의 주요 장점이다.&lt;/p&gt;

&lt;h2 id=&#34;오버레이-드라이버가-있는-다중-호스트&#34;&gt;오버레이 드라이버가 있는 다중 호스트&lt;/h2&gt;

&lt;p&gt;이 모델은 네이티브 &lt;code&gt;overlay&lt;/code&gt; 드라이버를 사용하여 외부로 다중 호스트 연결성을 제공한다. 오버레이 드라이버의 기본 설정은 컨테이너 애플리케이션 내에서 내부 연결 및 서비스 검색뿐만 아니라 외부 세계에 대한 외부 연결을 제공한다. &lt;a href=&#34;https://success.docker.com/api/asset/.%2Frefarch%2Fnetworking%2F#overlayarch&#34; target=&#34;_blank&#34;&gt;오버레이 드라이버 구조&lt;/a&gt; 섹션에서는 이 섹션을 읽기 전에 검토해야 할 오버레이 드라이버의 내부를 검토한다.&lt;/p&gt;

&lt;p&gt;이 예제는 이전 &lt;code&gt;docker-pets&lt;/code&gt; 애플리케이션을 재사용한다. 이 예를 따르기 전에 도커 swarm를 설정하라. Swarm을 설정하는 방법에 대한 지침은 도커 문서를 참조하라. Swarm을 설정한 후, &lt;code&gt;docker service create&lt;/code&gt; 명령을 사용하여 Swarm이 관리할 컨테이너와 네트워크를 생성하라.&lt;/p&gt;

&lt;p&gt;다음은 Swarm을 검사하고, 오버레이 네트워크를 생성한 후, 해당 오버레이 네트워크에 일부 서비스를 프로비저닝하는 방법을 보여준다. 이 명령들은 UCP/Swarm 컨트롤러 노드에서 실행된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#이미 생성된 이 swarm 클러스터에 참여하는 노드 표시
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ docker node ls
ID                           HOSTNAME          STATUS  AVAILABILITY  MANAGER STATUS
a8dwuh6gy5898z3yeuvxaetjo    host-B  Ready   Active
elgt0bfuikjrntv3c33hr0752 *  host-A  Ready   Active        Leader

&lt;span class=&#34;c1&#34;&gt;#dognet 오버레이 네트워크 생성
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;host-A $ docker network create -d overlay petsOverlay

&lt;span class=&#34;c1&#34;&gt;#백엔드 서비스를 생성하여 dognet 네트워크에 배치
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;host-A $ docker service create --network petsOverlay --name db consul

&lt;span class=&#34;c1&#34;&gt;#프런트엔드 서비스를 생성하고 포트 8000에 외부 노출
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;host-A $ docker service create --network petsOverlay -p &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;:5000 -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;DB=db&amp;#39;&lt;/span&gt; --name web chrch/docker-pets:1.0

host-A $ docker service ls
ID            NAME  MODE        REPLICAS  IMAGE
lxnjfo2dnjxq  db    replicated  &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       consul:latest
t222cnez6n7h  web   replicated  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;/1       chrch/docker-pets:1.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2Foverlay-pets-example.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;단일 호스트 브릿지 예에서와 같이, 우리는 &lt;code&gt;web&lt;/code&gt; 서비스에 환경변수로 &lt;code&gt;DB=db&lt;/code&gt;를 전달한다. 오버레이 드라이버는 컨테이너의 오버레이 IP 주소로 서비스 이름 &lt;code&gt;db&lt;/code&gt;를 결정한다. &lt;code&gt;web&lt;/code&gt;과 &lt;code&gt;db&lt;/code&gt; 사이의 통신은 오버레이 IP 서브넷을 단독으로 사용하여 이루어진다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;오버레이 및 브리지 네트워크 내부에서는 컨테이너에 대한 모든 TCP 및 UDP 포트가 열려 오버레이 네트워크에 연결된 다른 모든 컨테이너가 액세스할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;web&lt;/code&gt; 서비스는 포트 &lt;code&gt;8000&lt;/code&gt;에 노출되며, 라우팅 메쉬는 Swarm 클러스터의 모든 호스트에 포트 &lt;code&gt;8000&lt;/code&gt;을 노출한다. 브라우저의 &lt;code&gt;&amp;lt;host-A&amp;gt;:8000&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;host-B&amp;gt;:8000&lt;/code&gt;에 가서 애플리케이션이 작동하는지 테스트하라.&lt;/p&gt;

&lt;h3 id=&#34;오버레이-장점-및-유즈케이스&#34;&gt;오버레이 장점 및 유즈케이스&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;소규모 및 대규모 구축을 위한 매우 단순한 다중 호스트 연결&lt;/li&gt;
&lt;li&gt;추가 구성 또는 컴포넌트 없이 서비스 검색 및 로드 밸런싱 제공&lt;/li&gt;
&lt;li&gt;암호화된 오버레이를 통한 동-서 마이크로 세분화에 유용&lt;/li&gt;
&lt;li&gt;라우팅 메쉬를 사용하여 전체 클러스터에 서비스를 알릴 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;튜토리얼-앱-macvlan-브리지-모드&#34;&gt;튜토리얼 앱: MACVLAN 브리지 모드&lt;/h2&gt;

&lt;p&gt;애플리케이션 또는 네트워크 환경에 언더레이 서브넷의 일부인 라우팅 가능한 IP 주소가 컨테이너에 필요한 경우가 있을 수 있다. MACVLAN 드라이버는 이를 가능케 하도록 구현되어 있다. &lt;a href=&#34;https://success.docker.com/api/asset/.%2Frefarch%2Fnetworking%2F#macvlan&#34; target=&#34;_blank&#34;&gt;MACVLAN 구조&lt;/a&gt; 섹션에 설명된 것처럼, MACVLAN 네트워크는 호스트 인터페이스에 바인딩된다. 물리적 인터페이스, 논리적 하위 인터페이스 또는 결합된 논리적 인터페이스가 될 수 있다. 가상 스위치 역할을 하며 동일한 MACVLAN 네트워크의 컨테이너들 사이에 통신을 제공한다. 각 컨테이너는 노드가 연결된 물리적 네트워크의 고유한 MAC 주소와 IP 주소를 수신한다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://success.docker.com/api/images/.%2Frefarch%2Fnetworking%2Fimages%2F2node-macvlan-app.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;이 예제에서 Pets 애플리케이션은 &lt;code&gt;host-A&lt;/code&gt; 및 &lt;code&gt;host-B&lt;/code&gt;에 배포된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#두 호스트에 로컬 macvlan 네트워크 생성
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;host-A $ docker network create -d macvlan --subnet &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.0/24 --gateway &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.1 -o &lt;span class=&#34;nv&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;eth0 petsMacvlan
host-B $ docker network create -d macvlan --subnet &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.0/24 --gateway &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.1 -o &lt;span class=&#34;nv&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;eth0 petsMacvlan

&lt;span class=&#34;c1&#34;&gt;#host-B에 db 컨테이너 생성
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;host-B $ docker run -d --net petsMacvlan --ip &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.5 --name db consul

&lt;span class=&#34;c1&#34;&gt;#host-A에 web 컨테이너 생성
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;host-A $ docker run -it --net petsMacvlan --ip &lt;span class=&#34;m&#34;&gt;192&lt;/span&gt;.168.0.4 -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;DB=192.168.0.5:8500&amp;#39;&lt;/span&gt; --name web chrch/docker-pets:1.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이는 다중 호스트 브리지 예제와 매우 비슷하게 보일 수 있지만 몇 가지 주목할 만한 차이점이 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;web&lt;/code&gt;에서 &lt;code&gt;db&lt;/code&gt;로의 참조는 호스트와 반대되는 &lt;code&gt;db&lt;/code&gt; 자체의 IP 주소를 사용한다. &lt;code&gt;macvlan&lt;/code&gt; 컨테이너 IP는 언더레이 네트워크에서 라우팅할 수 있다는 점을 기억하라.&lt;/li&gt;
&lt;li&gt;컨테이너에 열린 포트는 컨테이너 컨테이너 IP 주소를 사용하여 즉시 연결할 수 있으므로 &lt;code&gt;db&lt;/code&gt; 또는 &lt;code&gt;web&lt;/code&gt; 포트는 노출하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;macvlan&lt;/code&gt; 드라이버는 이러한 고유한 이점을 제공하지만, 희생되는 영역 중 하나는 이식성이다. MACVLAN 설정 및 배포는 언더레이 네트워크와 밀접하게 연관되어 있다. 컨테이너 어드레싱은 중복 주소 할당을 방지하는 것 외에 컨테이너 배치의 물리적 위치를 준수해야 한다. 이 때문에, MACVLAN 네트워크의 외부로 IPAM을 관리하는 데에 주의를 기울여야 한다. IP 어드레싱을 겹치거나 잘못된 서브넷을 사용하면 컨테이너 연결이 끊어질 수 있다.&lt;/p&gt;

&lt;h3 id=&#34;macvlan-장점-및-유즈케이스&#34;&gt;MACVLAN 장점 및 유즈케이스&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;NAT을 활용하지 않기 때문에 대기 시간이 매우 짧은 애플리케이션은 macvlan 드라이버의 이점을 누릴 수 있다.&lt;/li&gt;
&lt;li&gt;MACVLAN은 일부 환경에서는 요구 사항이 될 수 있는 컨테이너당 IP를 제공할 수 있다.&lt;/li&gt;
&lt;li&gt;IPAM에 대한 고려가 보다 신중히 이루어져야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;결론&#34;&gt;결론&lt;/h1&gt;

&lt;p&gt;도커는 빠르게 진화하는 기술이며, 네트워킹 옵션은 매일 점점 더 많은 유즈케이스를 충족시키기 위해 증가하고 있다. 현존 네트워킹 벤더, 순수 SDN 벤더 및 도커 모두 이 분야의 공헌자이다. 물리적 네트워크, 네트워크 모니터링 및 암호화와의 보다 긴밀한 통합은 모두 상당한 관심과 혁신의 영역이다.&lt;/p&gt;

&lt;p&gt;이 문서는 자세한 내용을 설명하지만, 존재하는 CNM 네트워크 드라이버와 가능한 모든 배치를 모두 다루진 않았다. 개별 드라이버와 이러한 드라이버를 구성하는 더 많은 방법이 있지만 일상적으로 배포되는 공통 모델은 몇 가지 뿐임을 알 수 있었으면 한다. 각 모델의 장단점을 이해하는 것이 장기적인 성공의 열쇠이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;기타&#34;&gt;기타&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://arisu1000.tistory.com/27850&#34; target=&#34;_blank&#34;&gt;Kubernetes 네트워킹: Pod 네트워킹&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sookocheff.com/post/kubernetes/understanding-kubernetes-networking-model/&#34; target=&#34;_blank&#34;&gt;A Guide to the Kubernetes Networking Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://supergiant.io/blog/kubernetes-networking-explained-introduction/&#34; target=&#34;_blank&#34;&gt;Kubernetes Networking Explained: Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/google-cloud/understanding-kubernetes-networking-pods-7117dd28727&#34; target=&#34;_blank&#34;&gt;Understanding kubernetes networking: pods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      
    </item>
    
    <item>
      <title>TGI Kubernetes:001 A Quick Tour</title>
      <link>https://ziwon.github.io/post/tgik-001/</link>
      <pubDate>Sun, 13 Jan 2019 17:12:00 +0000</pubDate>
      <author>Philbert Yoon</author>
      <guid>https://ziwon.github.io/post/tgik-001/</guid>
      <description></description>
      
      <content>

&lt;h1 id=&#34;tgik-thanks-god-it-s-kubernetes&#34;&gt;TGIK: Thanks God It&amp;rsquo;s Kubernetes&lt;/h1&gt;

&lt;p&gt;유튜브를 검색하다, 지난 2017년부터 Kubernetes라는 주제로 Heptio에서 매주 금요일마다 라이브 스트리밍을 하고 있다는 것을 알게 되었다. 아무래도 제한적인 실무 경험이나 개인적인 스터디만으로는 한계가 있기 때문에, 하나씩 팔로우업 해보고자 한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/heptio/tgik&#34; target=&#34;_blank&#34;&gt;TGIK 깃헙 리포지토리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLvmPtYZtoXOENHJiAQc6HmV2jmuexKfrJ&#34; target=&#34;_blank&#34;&gt;TGIK 유트브 공식채널&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/heptio/tgik/blob/master/playlist.md&#34; target=&#34;_blank&#34;&gt;TGIK 전체 목록&lt;/a&gt;, &lt;a href=&#34;https://github.com/recollir/tgik-playlist/blob/master/playlist.md&#34; target=&#34;_blank&#34;&gt;recollir&amp;rsquo;s Playlist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;a-quick-tour&#34;&gt;A Quick Tour&lt;/h1&gt;

&lt;p&gt;첫 번째 에피소드의 내용은 다음 링크를 참고한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/heptio/tgik/tree/master/episodes/001&#34; target=&#34;_blank&#34;&gt;https://github.com/heptio/tgik/tree/master/episodes/001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;내용은 &lt;code&gt;kubeadm&lt;/code&gt;을 기반으로 AWS에 Kubernetes 클러스터를 구동해보는 것이다. 이 내용은 APN(AWS Partner Network)의 기술 파트너인 Heptio가 AWS에 작성한 쿠버네티스 가이드 문서인 &lt;a href=&#34;https://aws.amazon.com/quickstart/architecture/heptio-kubernetes/&#34; target=&#34;_blank&#34;&gt;Quick Start for Kubernetes by Heptio&lt;/a&gt;에 소개되어 있다.&lt;/p&gt;

&lt;p&gt;영상에서 진행하는 데모의 깃헙 저장소와 단계별 상세 디플로이 문서의 링크는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/heptio/aws-quickstart&#34; target=&#34;_blank&#34;&gt;GitHub - aws-quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws-quickstart.s3.amazonaws.com/quickstart-heptio/doc/heptio-kubernetes-on-the-aws-cloud.pdf&#34; target=&#34;_blank&#34;&gt;Step by Step Guide - heptio-kubernetes-on-the-aws-cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;전체적인 아키텍처는 다음과 같다. AWS의 베스트 프랙티스를 따라, Public Network와 Private Network로 디자인하고 있다. Kubernets API를 외부에서 접속할 수 있도록 마스터 노드에 ELB를 연결한 것이 특이하다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
  &lt;img src=&#34;https://d1.awsstatic.com/partner-network/QuickStart/datasheets/heptio-kubernetes-architecture.4ce06fe6b45b290e2b46ddf5dc7a664d45d7aae2.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;데모에서는 CloudFormation을 사용해 다음의 컴포넌트들을 AWS에 구성하게 된다. (이상, &lt;a href=&#34;https://github.com/heptio/aws-quickstart/blob/master/templates/kubernetes-cluster-with-new-vpc.template&#34; target=&#34;_blank&#34;&gt;kubernetes-cluster-with-new-vpc.template 참조&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;단일 가용영 영역에 가상 프라이빗 클라우드 (VPC)&lt;/li&gt;
&lt;li&gt;서브넷 2개, 퍼블릭 1개 및 프라이빗 1개&lt;/li&gt;
&lt;li&gt;퍼브릭서브넷에서 바스티온 호스트로 작동하는 EC2 인스턴스 하나&lt;/li&gt;
&lt;li&gt;프라이빗 서브넷의 마스터 노드에 대한 자동 복구가 가능한 EC2 인스턴스 하나&lt;/li&gt;
&lt;li&gt;프라이빗 서브넷의 추가 노드에 대한 자동 스케일링 그룹의 EC2 인스턴스 1-20개&lt;/li&gt;
&lt;li&gt;Kubernetes API에 대한 HTTPS 액세스를 위한 Elastic Load Balancing(ELB) 로드 밸런싱 장치 1개&lt;/li&gt;
&lt;li&gt;모든 노드에 Ubuntu 16.04 LTS&lt;/li&gt;
&lt;li&gt;Linux에서 Kubernetes를 부트스트래핑하기 위한 Kubeadm&lt;/li&gt;
&lt;li&gt;Kubernetes가 의존하는 컨테이너 런타임에 대한 도커&lt;/li&gt;
&lt;li&gt;Pod 네트워킹을 위한 Calico 또는 Weave. 디폴트는 Calico이다.&lt;/li&gt;
&lt;li&gt;클러스터 DNS에 대한 CoreDNS 또는 KubeDNS 기본값은 CoreDNS이며, CoreDNS는 CoreDNS로 대체되며, CoreDNS를 지원할 수 없는 환경에만 제공.&lt;/li&gt;
&lt;li&gt;SSH 액세스를 위해 포트 22를 허용하는 스택 전용 security group, HTTPS 액세스를 위한 포트 6443 및 모든 포트의 노드 간 연결을 허용하는 단일 security group.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;깃헙의 다음 스크립트를 이용하면 CloudFormation 기반으로 바로 디플로이 할 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aws-quickstart/quickstart-heptio/blob/master/bin/boot-master-branch.sh&#34; target=&#34;_blank&#34;&gt;https://github.com/aws-quickstart/quickstart-heptio/blob/master/bin/boot-master-branch.sh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# This is where Heptio stores templates/scripts for the master branch of this repository
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;S3_BUCKET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;heptio-aws-quickstart-test
&lt;span class=&#34;nv&#34;&gt;S3_PREFIX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;heptio/kubernetes/master/

&lt;span class=&#34;c1&#34;&gt;# Where to place your cluster
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;REGION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;us-west-2
&lt;span class=&#34;nv&#34;&gt;AZ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;us-west-2b

&lt;span class=&#34;c1&#34;&gt;# What to name your CloudFormation stack
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;STACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Heptio-Kubernetes

&lt;span class=&#34;c1&#34;&gt;# What SSH key you want to allow access to the cluster (must be created ahead of time in your AWS EC2 account)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;KEYNAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;mykey

&lt;span class=&#34;c1&#34;&gt;# What IP addresses should be able to connect over SSH and over the Kubernetes API
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;INGRESS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.0.0.0/0

aws cloudformation create-stack &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --region &lt;span class=&#34;nv&#34;&gt;$REGION&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --stack-name &lt;span class=&#34;nv&#34;&gt;$STACK&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --template-url &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;S3_BUCKET&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.s3.amazonaws.com/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;S3_PREFIX&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;templates/kubernetes-cluster-with-new-vpc.template&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --parameters &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;ParameterKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;AvailabilityZone,ParameterValue&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$AZ&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;ParameterKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;KeyName,ParameterValue&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$KEYNAME&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;ParameterKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;AdminIngressLocation,ParameterValue&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$INGRESS&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;ParameterKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;QSS3BucketName,ParameterValue&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;S3_BUCKET&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;ParameterKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;QSS3KeyPrefix,ParameterValue&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;S3_PREFIX&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --capabilities&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;CAPABILITY_IAM&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;실제로 따라 해보지는 않았다. 테스트 클러스터라고 해도 Kops나 EKS를 사용할 것 같다. 영상에서도 CloudFormation과 Kops 중 어떤 게 더 좋냐고 물어보고 있는데, 이 예제는 익숙한 툴을 이용해 Kubernetes를 재빨리 디플로이 하기 위해 만든 것이며, (보안적인 어떤 면에서는 이 예제의 방식보다 덜 안전할 수도 있지만) Kops가 프로덕션에서 적절하게 튜닝할 수 있는 부가 기능이 많다고 한다. 또한, HA 클러스터 등 좀 더 안정적이기 때문에 프로덕션 레벨에서는 Kops를 사용할 수 있다고 한다. - &lt;a href=&#34;https://youtu.be/9YYeE-bMWv8?t=670&#34; target=&#34;_blank&#34;&gt;11:10&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kubernetes 클러스터가 구성된 후에는 Pod 등을 설명하고 스케쥴링하는 Kubernetes 관리자라면 비교적 익숙한 기본 명령어들을 다루고 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/jbeda/9a2097c726584560fa13f6c1ae13abfb&#34; target=&#34;_blank&#34;&gt;command line snippets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# This tells kubecfg to read its config from the local directory
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;KUBECONFIG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./kubeconfig

&lt;span class=&#34;c1&#34;&gt;# Looking at the cluster
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;kubectl get nodes
kubectl get pods --namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;kube-system

&lt;span class=&#34;c1&#34;&gt;# Running a single pod
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;kubectl run --generator&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;run-pod/v1 --image&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gcr.io/kuar-demo/kuard-amd64:1 kuard
kubectl get pods
kubectl run --generator&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;run-pod/v1 --image&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gcr.io/kuar-demo/kuard-amd64:1 kuard --dry-run -o yaml
kubectl get pods kuard -o yaml
kubectl port-forward kuard &lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;:8080
kubectl delete pod kuard

&lt;span class=&#34;c1&#34;&gt;# Running a deployment
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;kubectl run --image&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gcr.io/kuar-demo/kuard-amd64:1 kuard --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; --dry-run -o yaml
kubectl run --image&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gcr.io/kuar-demo/kuard-amd64:1 kuard --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
kubectl get pods

&lt;span class=&#34;c1&#34;&gt;# Running a service
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;kubectl expose deployment kuard --type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;LoadBalancer --port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; --target-port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt; --dry-run -o yaml
kubectl get service kuard -o wide

&lt;span class=&#34;c1&#34;&gt;# Wait a while for the ELB to be ready
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;KUARD_LB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get service kuard -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.status.loadBalancer.ingress[*].hostname}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

---
&lt;span class=&#34;c1&#34;&gt;# Doing a deployment
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;## Window 1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;## On the mac, install with `brew install watch`
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;watch -n &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.1 kubectl get pods

&lt;span class=&#34;c1&#34;&gt;## Window 2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;## On the mac, install with `brew install jq`
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; curl -s http://&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;KUARD_LB&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/env/api &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq &lt;span class=&#34;s1&#34;&gt;&amp;#39;.env.HOSTNAME&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;## Window 3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;kubectl scale deployment kuard --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
kubectl &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; image deployment kuard &lt;span class=&#34;nv&#34;&gt;kuard&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gcr.io/kuar-demo/kuard-amd64:2
kubectl rollout undo deployment kuard

---
&lt;span class=&#34;c1&#34;&gt;# Clean up
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;kubectl delete deployment,service kuard&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;개인적으로 Pod 스케쥴링과 스케일링에 간단한 node앱들을 사용했었는데 데모에서처럼 &amp;ldquo;Request 상세, Server 환경변수, Liveness Probe, Readiness Probe, DNS 쿼리, KeyGen Workload, MemQ 서버, 파일 시스템 브라우저&amp;rdquo; 등 여러가지를 살펴볼 수 있는 kuard를 이용하는 것도 괜찮아 보인다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-up-and-running/kuard&#34; target=&#34;_blank&#34;&gt;kuard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sig-scalability&#34;&gt;sig-scalability&lt;/h2&gt;

&lt;h3 id=&#34;etcd&#34;&gt;etcd&lt;/h3&gt;

&lt;p&gt;2000대 워커 노드 제한에 대한 병목은 무엇인가라는 질문이 있었는데, 5000대까지 테스트해보았으며, etcd의 확장성 가장 중요하다고 한다. 즉, 노드 간의 일관된 코디네이션을 할 수 있는 양이 관건이라고 한다. 클라이언트 수, 초당 요청수, 저장 데이터 크기에 따른 클러스터 크기별 etcd의 하드웨어 구성은 다음 문서를 참고한다. 문서에 따르면, 일반적인 클러스터의 경우 2~4개의 코어, 8GB 메모리면 충분하며, 디스크는 50개의 순차적인 IOPS가 필요하다. (디스크는 etcd 클러스터 배치 성능 및 안정성에 있어서 가장 중요한 요인이다. etcd의 합의 프로토콜은 메터데이터를 로그에 지속적으로 저장하는 것에 달려 있으므로, etcd 클러스터 멤버는 모든 요청을 디스크에 기록해야 한다. 따라서, 쓰기 지연이 발생하지 않고, 하트비트가 타임아웃이 되지 않고 일렉션이 발생하지 않도록 해야 한다. 장애 발생시, Disk 대역폭이 많을수록 복구 시간이 단축된다.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/hardware.md&#34; target=&#34;_blank&#34;&gt;Hardware recommendations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;메트릭-목표&#34;&gt;메트릭 목표&lt;/h3&gt;

&lt;p&gt;Kubernetes의 확장성에 관한 자세한 내용은 &lt;a href=&#34;https://github.com/kubernetes/community/blob/master/sig-scalability/goals.md&#34; target=&#34;_blank&#34;&gt;Kubernetes Scaling and Performance Goals&lt;/a&gt;를 참고하라고 한다. 간단히 살펴보면, 주 메트릭과 파생 메트릭으로 나뉜다.&lt;/p&gt;

&lt;p&gt;주 메트릭의 경우, 클러스터별 최대 코어 수는 20만이, 코어별 최대 Pod 수는 10개가 목표이다. 코어 비율은 1:1에서 4:1(GB/코어)라고 가정한다. 경험상 평균적으로 많은 Pod/프로세스가 코어별 1~4GB RAM이 필요한 것으로 나타났다고 한다. 노드별 관리 오버헤드는 최소 0.5코어, 1GB RAM으로 5% 미만이 목표이며,  Docker, KubeProxy, Kubelet, 메트릭 수집, 커널 제외한 수치이다. (예: 32개 코어, 64GB 머신, 1.6개 코어, 노드 관리를 위한 3.2GB RAM), 그리고 클러스터별 오버헤드는 1% 미만, 코어 2개 이상, 4GB RAM가 목표이며, apiserver, 스케줄러, 컨트롤러 등을 포함한 모든 비노드별 구성 요소 포함하고 DNS, 힙스터 등, HA 제외한 수치이다.&lt;/p&gt;

&lt;p&gt;파생 메트릭의 경우, 노드별 최대 코어수는 현재 64개, 향후 수백개가 목표이고, 머신별 최대 Pod 수는 500개라고 한다. 클러스터별 최대 머신수는 5000개이고, 클러스터별 최대 Pod의 수는 50만개이다. Pod의 엔드투엔드 스타트업 시간은 5초 이하가 목표이고, 스케쥴링의 스루풋은 초당 100개의 Pod이 목표라고 한다. 최대 클러스터 포화 시간은 90 분이 목표이다.&lt;/p&gt;

&lt;h3 id=&#34;클라우드별-테스팅-환경&#34;&gt;클라우드별 테스팅 환경&lt;/h3&gt;

&lt;p&gt;또한, 클라우드 프로바이더별로 Kubernetes 확장성의 테스팅 환경은 다음 문서를 참고한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/sig-scalability/configs-and-limits/provider-configs.md&#34; target=&#34;_blank&#34;&gt;Scalability Testing/Analysis Environment and Goals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;kubernetes-1-7&#34;&gt;Kubernetes 1.7&lt;/h2&gt;

&lt;p&gt;그리고 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.7.md#major-themes&#34; target=&#34;_blank&#34;&gt;Kubernetes 1.7 릴리즈 노트&lt;/a&gt;를 간략히 설명하고 있다. 1.7의 내용은 확장성과 보안이 두가지 주요 주제였다고 한다. 시스템의 커널, 즉 시스템의 핵심을 변경하지 않고, 각 컴포넌트를 플러그인하고 서로 빌드해가는 확장성을 계속해서 개선해 나갔으며, 또한 처음부터 여러 컴포넌트, 여러 어플리케이션, 여러 팀들이 개발을 해왔기 때문에 보안 이슈가 다른 컴포넌트 등으로 전파되지 않도록 해왔다고 한다. 이상, 다소 오래된 내용이라 넘어가기로 한다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Kubernetes 1.7은 Kubernetes의 광범위한 생산 사용에 의해 동기화된 보안, 뛰어난 애플리케이션 및 확장성 기능을 추가하는 릴리스다. 이 릴리스의 보안 강화에는 암호화된 시크릿(alpha), Pod간 통신을 위한 네트워크 정책, API 리소스에 대한 Kubelet 액세스를 제한하는 노드 작성자, Kubelet 클라이언트/서버 TLS 인증서 로테이션(alpha)이 포함된다. 상태 저장 애플리케이션의 주요 기능에는 StatefulSet 자동 업데이트, DaemonSet의 향상된 업데이트, 보다 빠른 StatefulSet 확장을 위한 버스트 모드,  (alpha) 로컬 스토리지에 대한 지원이 포함된다. 확장성 기능에는 API 집계(beta), ThirdPartyResources를 위한 CustomResourceDefinitions(beta), 확장 가능한 Admission controller(alpha), 플러그형 cloud provider(alpha) 및 CRI(컨테이너 런타임 인터페이스) 개선이 포함된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1.7 릴리즈에 대한 좀 자세한 내용은 &lt;a href=&#34;https://www.itworld.co.kr/news/105494&#34; target=&#34;_blank&#34;&gt;쿠버네티스 1.7의 새로운 기능 : 로컬 스토리지, 암호화 등&lt;/a&gt; 참고한다.&lt;/p&gt;

&lt;h2 id=&#34;ksonnet&#34;&gt;ksonnet&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ksonnet&lt;/code&gt;은 시간 관계상 다루지 못한 것 같다. 링크된 홈페이지에 소개된 것처럼, 다양한 클러스터 및 환경에서 설정을 관리하는 cli 툴인 것으로 보인다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Built on the JSON templating language Jsonnet, ksonnet provides an organizational structure and specialized features for managing configurations across different clusters and environments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ksonnet/ksonnet&#34; target=&#34;_blank&#34;&gt;https://github.com/ksonnet/ksonnet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bcho.tistory.com/1302?fbclid=IwAR2KJYAo7TBUTFynZ1NFY0xF7T2R6RJBS77wRlj8u5RoBUyGtbWlnMFSBbs&#34; target=&#34;_blank&#34;&gt;쿠버네티스 리소스 배포와 관리를 위한 ksonnet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이상으로, 간략히 TGIK 에피소드 1을 살펴보았다.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Kops에서 Bastion 호스트 SSH로 접속하기</title>
      <link>https://ziwon.github.io/post/bastion-in-kops/</link>
      <pubDate>Wed, 02 Jan 2019 12:12:00 +0000</pubDate>
      <author>Philbert Yoon</author>
      <guid>https://ziwon.github.io/post/bastion-in-kops/</guid>
      <description></description>
      
      <content>&lt;p&gt;네트워크에서 바스티온 호스트(Bastion Host)는 침입차단 소프트웨어가 설치되어 내부와 외부 네트워크 사이에서 일종의 게이트 역할을 수행하는 호스트로 네트워크 보안에 가장 중요한 방화벽 호스트로써 방화벽의 메인서버를 의미하기도 한다.&lt;sup&gt;&lt;a href=&#34;http://blog.pentasecurity.com/221034903499&#34; target=&#34;_blank&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;AWS 컨텍스트에서는 바스티온 호스트를 내부 네트워크에 접속할 수 있는 서버로 정의하는데 &lt;sup&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Bastion_host&#34; target=&#34;_blank&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, Kops에서는 바스티온 호스트를 프로비저닝하고 &lt;sup&gt;&lt;a href=&#34;https://github.com/kubernetes/kops/blob/master/docs/bastion.md&#34; target=&#34;_blank&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, 이를 통해 프라이빗 네트워크 인스턴스에 접속한다. (AWS 바스티온 구조 &lt;sup&gt;&lt;a href=&#34;https://docs.aws.amazon.com/quickstart/latest/linux-bastion/architecture.html&#34; target=&#34;_blank&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;)&lt;/p&gt;

&lt;p&gt;이를 테면, 다음과 같이 쿠버네티스 마스터 노드와 워커 노드가 구성되어 있다고 하자. 이들 인스턴스들은 내부 네트워크에 존재하므로 바스티온 호스트를 통해 접속해야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl get node
NAME                                            STATUS   ROLES    AGE   VERSION
ip-10-1-117-65.ap-northeast-1.compute.internal  Ready    master   49d   v1.10.11
ip-10-1-157-17.ap-northeast-1.compute.internal  Ready    master   49d   v1.10.11
ip-10-1-16-19.ap-northeast-1.compute.internal   Ready    master   49d   v1.10.11
ip-10-1-178-52.ap-northeast-1.compute.internal  Ready    node     45d   v1.10.11
ip-10-1-82-30.ap-northeast-1.compute.internal   Ready    node     44d   v1.10.11
ip-10-1-96-13.ap-northeast-1.compute.internal   Ready    node     44d   v1.10.11
ip-10-1-199-22.ap-northeast-1.compute.internal  Ready    node     45d   v1.10.11
ip-10-1-135-94.ap-northeast-1.compute.internal  Ready    node     45d   v1.10.11
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 때, 바스티온 호스트에 프라이빗 키를 복사해서 바스티온에 로그인하여 내부 서브넷 인스턴스로 접속할 수도 있지만, 다음과 같이 ssh 프락싱을 사용하고 &lt;sup&gt;&lt;a href=&#34;https://ekartco.com/2017/12/using-aws-bastion-hosts-correctly/&#34; target=&#34;_blank&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;, 접속하려는 호스트 네임을 동적으로 구성해서 좀 더 쉽게 접속할 수도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ vi ~/.ssh/config
Host k8s-prod
	HostName bastion.prod.k8s.example.net
	User core
	IdentityFile ~/.ssh/prod.k8s.id_rsa
	
Host ip-10-1-*
	User core
	ProxyCommand ssh -q -W %h:%p k8s-prod
	IdentityFile ~/.ssh/prod.k8s.id_rsa
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 구성이 끝나면, 다음과 같이 한번에 로컬에서 내부 서브넷 호스트에 접속할 수 있게 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ssh k8s-prod
Last login: Wed Jan  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;:20:25 UTC &lt;span class=&#34;m&#34;&gt;2019&lt;/span&gt; from &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.x.x.xx on ssh
Container Linux by CoreOS stable &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1911&lt;/span&gt;.5.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
core@ip-10-x-x-x ~ $

$ ssh ip-10-1-178-52.ap-northeast-1.compute.internal
Last login: Wed Jan  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;:47:40 UTC &lt;span class=&#34;m&#34;&gt;2019&lt;/span&gt; from &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.1.178.52 on pts/0
Container Linux by CoreOS stable &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1911&lt;/span&gt;.5.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
core@ip-10-1-178-52 ~ $&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
      
    </item>
    
    <item>
      <title>[번역] 최신 네트워크 로드 밸런싱 및 프록시 소개</title>
      <link>https://ziwon.github.io/post/modern-network-load-balancing-and-proxying/</link>
      <pubDate>Mon, 05 Nov 2018 02:37:00 +0000</pubDate>
      <author>Philbert Yoon</author>
      <guid>https://ziwon.github.io/post/modern-network-load-balancing-and-proxying/</guid>
      <description></description>
      
      <content>

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34;&gt;Envoy&lt;/a&gt; Creator인 &lt;a href=&#34;https://twitter.com/mattklein123&#34; target=&#34;_blank&#34;&gt;Matt Klein&lt;/a&gt;의 &lt;a href=&#34;https://youtu.be/RVZX4CwKhGE&#34; target=&#34;_blank&#34;&gt;Envoy 소개 동영상&lt;/a&gt;을 보고 Envoy에 완전히 매료되어 좀 더 자세한 배경지식을 알고자 번역해 보았습니다. 원본 출처는 &lt;a href=&#34;https://blog.envoyproxy.io/introduction-to-modern-network-load-balancing-and-proxying-a57f6ff80236&#34; target=&#34;_blank&#34;&gt;Introduction to modern network load balancing and proxying&lt;/a&gt;입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;최근 네트워크 로드 밸런싱과 프록시에 관한 입문 교육 자료가 부족하다는 사실이 관심을 끌었습니다. 어떻게 이게 가능하지? 라고 속으로 생각했습니다. 로드 밸런싱은 안정적인 분산 시스템 구축에 필요한 핵심 개념 중 하나입니다. 당연히 쓸만한 고급진 정보들이 있어야 합니다. 검색을 해보았으나 사실 쓸만한 것들이 별로 없다는 것을 알게 되었습니다. 위키피디아 기사에는 일부 개념에 대한 개요가 포함되어 있긴 하나, 우아한 내용들은 아니었습니다. 특히, 최신 마이크로 서비스 아키텍처에 관해서 말이죠. 로드 밸런싱을 대한 구글 검색은 주로 버즈 워드가 많고 내용은 없는 벤더 페이지들입니다.&lt;/p&gt;

&lt;p&gt;이 글에서 저는 최신 네트워크 로드밸런싱과 프록시를 소개하며 정보 부족을 해결하려고 합니다. 이것은, 솔직히 말해서, 책 한 권 전체의 주제가 될 수 있는 방대한 주제입니다. 이 포스트의 블로그 길이를 유념하면서 복잡한 주제 세트를 간단한 개요로 뽑아보려고 합니다. 관심과 피드백에 따라 추후 개별 주제에 대한 자세한 후속 포스트를 고려해 보겠습니다.&lt;/p&gt;

&lt;p&gt;특이하고 이상한 이 글을 왜 썼는지에 대한 약간의 배경과 함께 - 시작하겠습니다!&lt;/p&gt;

&lt;h2 id=&#34;네트워크-로드-밸런싱과-프록싱이-무엇인가요&#34;&gt;네트워크 로드 밸런싱과 프록싱이 무엇인가요?&lt;/h2&gt;

&lt;p&gt;위키피디아는 다음과 같이 로드 밸런싱을 정의합니다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;컴퓨팅에서 로드 밸런싱은 컴퓨터, 컴퓨터 클러스터, 네트워크 링크, 중앙 처리 장치 또는 디스크 드라이브와 같은 여러 컴퓨팅 리소스에서 작업 부하 분산을 향상시킵니다. 로드 밸런싱은 리소스 사용을 최적화하고 처리량을 극대화하며 응답 시간을 최소화하고 단일 리소스의 오버로드를 방지하는 것을 목표로 합니다. 단일 구성 요소 대신 로드 밸런싱과 함께 여러 구성 요소를 사용하면 이중화를 통해 안정성과 가용성을 높일 수 있습니다. 로드 밸런싱은 보통 멀티 레이어 스위치 또는 도메인 이름 시스템 서버 프로세스와 같은 전용 소프트웨어 또는 하드웨어가 사용됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 정의는 네트워크뿐만 아니라 컴퓨팅의 모든 측면에 적용됩니다. 운영 체제는 로드 밸런싱을 사용하여 물리적 프로세서 간에 작업을 스케줄링하고, Kubernetes과 같은 컨테이너 오케스트레이터는 로드 밸런싱을 사용하여 컴퓨팅 클러스터 전체에서 작업을 스케줄링하고, 네트워크 로드 밸런서는 사용 가능한 백엔드에서 네트워크 작업을 스케줄링합니다. 이 포스트의 나머지 부분에서는 네트워크 로드 밸런싱만 다룹니다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*cCV-7Q-DDw87xNnTIVIhEg.png&#34;/&gt;
&lt;small&gt;그림 1. 네트워크 로드 밸런싱 개요&lt;/center&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;그림 1은 네트워크 로드 밸런싱의 개략적인 개요를 보여줍니다. 일부 클라이언트는 일부 백엔드에 리소스를 요청하고 있습니다. 로드 밸런서는 클라이언트와 백엔드 사이에 위치하며 상위 레벨에서 몇 가지 중요한 작업을 수행합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;서비스 디스커버리&lt;/strong&gt;: 시스템에서 사용할 수 있는 백엔드는 무엇인가요? 그들 주소가 어떻게 되나요?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;헬스 체킹&lt;/strong&gt;: 현재 정상이며 요청을 수락할 수 있는 백엔드는 무엇인가요?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;로드 밸런싱&lt;/strong&gt;: 모든 정상적인 백엔드에 대한 개별 요청의 균형을 맞추기 위해 어떤 알고리즘을 사용해야 할까요?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;분산 시스템에서 로드 밸런싱을 적절하게 사용하면 다음과 같은 몇 가지 이점이 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;네이밍 추상화&lt;/strong&gt;: 모든 클라이언트가 모든 백엔드(서비스 디스커버리)을 알아야 하는 대신에, 클라이언트가 미리 정의된 메커니즘으로 로드 밸런서를 지칭하고, 이름 확인(Name resolution) 작업은 로드 밸런서에 위임할 수 있습니다. 미리 정의된 메커니즘은 기본 제공 라이브러리 및 잘 알려진 DNS/IP/포트 위치를 포함하며 아래에서 보다 자세히 설명합니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;장애 허용&lt;/strong&gt;: 상태 확인 및 다양한 알고리즘 기술을 통해 로드 밸런서는 불량 또는 과부하가 걸린 백엔드를 효과적으로 라우팅할 수 있습니다. 이는 운영자가 전형적인 여가 시간 대비 비상 조치로 불량 백엔드를 수정할 수 있다는 것을 뜻합니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;비용 및 성능 이점&lt;/strong&gt;: 분산 시스템 네트워크는 거의 동질적인 집단으로 구성되지 않습니다. 시스템은 여러 네트워크 Zone과 Region에 걸쳐 있을 가능성이 높습니다. Zone 내에서, 네트워크는 종종 상대적으로 요청량이 낮은 방법으로 구축됩니다. Zone 간에 과다 요청이 표준이 됩니다. 지능형 로드 밸런싱을 통해 가능한 많은 Zone 내에서 요청 트래픽을 유지할 수 있으므로 성능 (대기 시간 감소)이 향상되고 전체 시스템 비용이 절감됩니다 (Zone간 대역폭 및 광섬유 필요 감소).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;로드-밸런서-대-프록시&#34;&gt;로드 밸런서 대 프록시&lt;/h3&gt;

&lt;p&gt;네트워크 로드 밸런싱 장치에 대해 이야기할 때, 로드 밸런싱 장치 및 프록시라는 용어는 업계 내에서 대략적으로 서로 혼용할 수 있습니다. 이 포스트 또한 용어들을 일반적으로 동등한 것으로 취급합니다. (엄밀히 따지면, 모든 프록시가 로드 밸런서는 아니지만 대다수의 프록시는 로드 밸런싱이 기본적인 기능입니다.)&lt;/p&gt;

&lt;p&gt;일부에서는 내장형 클라이언트 라이브러리의 부분으로 로드 밸런싱을 수행하면 로드 밸런서가 실제로 프록시가 아니라고 덧붙이며 주장할 수 있습니다. 그러나, 저는 구별이 이미 혼란스러운 주제에 불필요한 복잡성을 더하는 것이라고 반박합니다. 로드 밸런서 토폴로지의 유형은 아래에서 자세히 설명되지만, 이 포스트에서는 내장형 로드 밸런서 토폴로지를 프록시 방식의 특수한 경우로 취급하는데 이 때 애플리케이션은 로드 밸런서와 동일한 추상화를 모두 제공하는 내장된 라이브러리를 통해 프록시합니다.&lt;/p&gt;

&lt;h3 id=&#34;l4-연결-세션-로드-밸런싱&#34;&gt;L4 (연결/세션) 로드 밸런싱&lt;/h3&gt;

&lt;p&gt;오늘날 업계 전반에서 로드 밸런싱을 논의할 때 솔루션은 종종 L4와 L7의 두 가지 범주로 분류됩니다. 이러한 범주는 OSI 모델의 4계층과 7계층을 참조합니다. L7 로드 밸런싱에 대해 논의할 때 명확해질 수 있는 이유 때문에, 이것이 우리가 사용하는 용어라는 것은 유감스러운 일이라고 생각합니다. OSI 모델은 TCP 및 UDP와 같은 기존 4계층 프로토콜을 포함하지만 종종 다양한 OSI 계층의 이런저런 잡동사니 프로토콜(예, 만약 L4 TCP 로드 밸런서가 마찬가지로 TLS을 지원하게 되면, 이제 L7 로드 밸런서가 되는 건가요?)을 포함하기 일쑤인지라 로드 밸런싱 솔루션의 복잡성에 대한 매우 낮은 근사치입니다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*1PjTpM3hLnm3iEAd4-_AaQ.png&#34;/&gt;
&lt;small&gt;그림 2. TCP L4 종료 로드 밸런싱&lt;/center&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;그림 2는 기존 L4 TCP 로드 밸런서를 보여줍니다. 이 경우 클라이언트는 로드 밸런서에 TCP를 연결합니다. 로드 밸런서는 연결을 종료하고(예, SYN에 직접 응답하고) 백엔드를 선택한 다음 새 TCP 연결을 만듭니다(예, 새 SYN 전송). 다이어그램의 세부 정보는 중요하지 않으며 아래 L4 로드 밸런싱에 할애된 섹션에서 자세히 논의하겠습니다.&lt;/p&gt;

&lt;p&gt;이 섹션의 핵심 사항은 L4 로드 밸런서가 일반적으로 L4 TCP/UDP 연결/세션 수준에서만 작동한다는 것입니다. 따라서 로드 밸런서는 바이트 앞뒤를 거칠게 셔플해서, 동일한 세션의 바이트가 동일한 백엔드에서 끝나도록 합니다. L4 로드 밸런서는 셔플링 중인 바이트의 애플리케이션 세부 정보를 인식하지 못합니다. 바이트는 HTTP, Redis, MongoDB 또는 다른 애플리케이션 프로토콜일 수 있습니다.&lt;/p&gt;

&lt;h3 id=&#34;l7-어플리케이션-로드-밸런싱&#34;&gt;L7 (어플리케이션) 로드 밸런싱&lt;/h3&gt;

&lt;p&gt;L4 로드 밸런싱은 간단하면서도 널리 사용됩니다. L7 (애플리케이션) 로드 밸런싱 투자를 보증하는 L4 로드 밸런싱의 단점은 무엇일까요? 다음 L4 관련 사례를 예로 들어 보겠습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;두 개의 gRPC/HTTP2 클라이언트는 백엔드와 통신하며 L4 로드 밸런서를 통해 연결하려고 합니다.&lt;/li&gt;
&lt;li&gt;L4 로드 밸런서는 들어오는 각 TCP 연결에 대해 단일 송신 TCP 연결을 생성하므로 두 개의 수신 연결과 두 개의 송신 연결이 발생합니다.&lt;/li&gt;
&lt;li&gt;그런데, 클라이언트 A는 연결을 통해 분당 1개의 요청(RPM)을 보내고 클라이언트 B는 연결을 통해 초당 50개의 요청(RPS)을 보냅니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이전 시나리오에서 클라이언트 A를 처리하기 위해 선택된 백엔드는 클라이언트 B를 처리하기 위해 선택된 백엔드에 비해 약 3,000배의 부하를 처리합니다! 이것은 큰 문제이며, 일반적으로 시작부터 로드 밸런싱의 목적을 무산시킵니다. 또한 이 문제는 모든 멀티플렉싱, keep-alive 프로토콜에서 발생합니다. (멀티플렉싱은 단일 L4 연결을 통해 동시 응용 프로그램 요청을 보내고 사용 중인 요청이 없을 때 연결을 닫지 않는 것을 의미합니다.) 최신 프로토콜은 모두 효율성 이유(특히 TLS를 사용하여 연결을 암호화하는 경우)로 멀티플렉싱와 keep-alive 두 가지로 진화하고 있으므로 L4 로드 밸런서의 임피던스 불일치가 시간이 지남에 따라 더욱 뚜렷해지고 있습니다. L7 로드 밸런서가 이 문제를 해결합니다.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*zsaxjSziEm1Tipr6kxs5Zg.png&#34;/&gt;
&lt;small&gt;그림 3. HTTP/2 L7 종료 로드 밸런싱&lt;/center&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;그림 3은 L7 HTTP/2 로드 밸런서를 보여줍니다. 이 경우 클라이언트는 로드 밸런서에 단일 HTTP/2 TCP를 연결합니다. 그런 다음 로드 밸런서는 두 개의 백엔드 연결을 만듭니다. 클라이언트가 두 개의 HTTP/2 스트림을 로드 밸런서에 전송하면 스트림 1은 백엔드 1로 전송되고 스트림 2는 백엔드 2로 전송됩니다. 따라서 요청 부하가 매우 다른 멀티플렉싱 클라이언트도 백엔드에서 효율적으로 균형을 맞출 것입니다. 이것이 바로 L7 로드 밸런싱이 최신 프로토콜에 매우 중요한 이유입니다.&lt;/p&gt;

&lt;h3 id=&#34;l7-로드-밸런싱-그리고-osi-모델&#34;&gt;L7 로드 밸런싱 그리고 OSI 모델&lt;/h3&gt;

&lt;p&gt;앞서 L4 로드 밸런싱 섹션에서 말씀드린 것처럼 로드 밸런싱 기능을 설명하기 위해 OSI 모델을 사용하는 것은 문제가 있습니다. 그 이유는, 다른 것은 몰라도 OSI 모델에서 기술되는 것과 같이, L7 자체가 로드 밸런싱 추상화의 여러 개별 계층을 포괄하기 때문입니다. 예를 들어 HTTP 트래픽의 경우 다음과 같은 하위 계층을 생각해 볼 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;선택적 TLS(Transport Layer Security). 네트워크쪽 사람들이 어떤 OSI 계층이 TLS에 속하는지 논의 중입니다. 이 논의를 위해 우리는 TLS L7을 검토할 것입니다.&lt;/li&gt;
&lt;li&gt;물리적 HTTP 프로토콜(HTTP/1 또는 HTTP/2).&lt;/li&gt;
&lt;li&gt;논리적 HTTP 프로토콜(헤더, 본문 데이터 및 트레일러).&lt;/li&gt;
&lt;li&gt;메시징 프로토콜(gRPC, REST 등).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정교한 L7 로드 밸런싱 장치는 위의 각 하위 계층과 관련된 기능을 제공할 수 있습니다. 다른 L7 로드 밸런서에는 L7 범주에 속하는 기능 중 작은 부분만 있을 수 있습니다. 즉, L7 로드 밸런서 환경은 L4 범주보다 기능을 비교하는 관점에서 훨씬 더 복잡합니다. (물론 이 섹션에서는 HTTP에 대해 좀전에 다루었습니다. Redis, Kafka, MongoDB 등은 모두 L7 로드 밸런싱의 이점을 제공하는 L7 애플리케이션 프로토콜의 예입니다.)&lt;/p&gt;

&lt;h2 id=&#34;로드-밸런서-기능&#34;&gt;로드 밸런서 기능&lt;/h2&gt;

&lt;p&gt;이 섹션에서는 로드 밸런서가 제공하는 상위 레벨 기능을 간략하게 요약합니다. 모든 로드 밸런서가 모든 기능을 제공하는 것은 아닙니다.&lt;/p&gt;

&lt;h3 id=&#34;서비스-디스커버리-service-discovery&#34;&gt;서비스 디스커버리 (Service discovery)&lt;/h3&gt;

&lt;p&gt;서비스 디스커버리는 로드 밸런서가 사용 가능한 백엔드 셋을 결정하는 프로세스입니다. 방법은 매우 다양하며 다음과 같은 예를 들 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;정적 환경설정 파일.&lt;/li&gt;
&lt;li&gt;DNS.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zookeeper.apache.org/&#34; target=&#34;_blank&#34;&gt;Zookeeper&lt;/a&gt;, &lt;a href=&#34;https://coreos.com/etcd/&#34; target=&#34;_blank&#34;&gt;Etcd&lt;/a&gt;, &lt;a href=&#34;https://www.consul.io/&#34; target=&#34;_blank&#34;&gt;Consul&lt;/a&gt; 등.&lt;/li&gt;
&lt;li&gt;Envoy의 &lt;a href=&#34;https://medium.com/@mattklein123/the-universal-data-plane-api-d15cec7a&#34; target=&#34;_blank&#34;&gt;범용 데이터 플레인 API&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;헬스-체킹-health-checking&#34;&gt;헬스 체킹 (Health checking)&lt;/h3&gt;

&lt;p&gt;헬스 체킹은 로드 밸런서가 트래픽을 처리하는데 백엔드를 사용할 수 있는지 여부를 결정하는 프로세스입니다. 헬스 체킹은 일반적으로 두 가지 범주로 나뉩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;활성&lt;/strong&gt;: 로드 밸런서가 주기적인 간격(예: HTTP 요청을 &lt;code&gt;/healthcheck&lt;/code&gt; 엔드포인트에 전송)을 통해 상태를 측정합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;수동&lt;/strong&gt;: 로드 밸런서가 주 데이터 플로우에서 상태를 감지합니다. 예를 들어, L4 로드 밸런서는 연속 3개의 연결 오류가 있는 경우 백엔드가 비정상이라고 결정할 수 있습니다. L7 로드 밸런서는 연속 세 개의 HTTP 503 응답 코드가 있는 경우 백엔드가 비정상이라고 결정할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;부하-분산-load-balancing&#34;&gt;부하 분산 (Load balancing)&lt;/h3&gt;

&lt;p&gt;그렇죠. 로드 밸런서는 실제로 부하 분산을 해야합니다! 정상적인 백엔드 셋이 주어질 때, 연결이나 요청에 적합한 백엔드는 어떻게 선택될까요? 로드 밸런싱 알고리즘은 활발한 리서치 영역이며 랜덤 선택 및 라운드 로빈과 같은 단순한 영역에서 다양한 레이턴시 및 백엔드 부하를 계산하는 복잡한 알고리즘에 이르기까지 다양합니다. 성능과 단순성을 고려할 때 가장 널리 사용되는 로드 밸런싱 알고리즘 중 하나는 &lt;a href=&#34;https://brooker.co.za/blog/2012/01/17/two-random.html&#34; target=&#34;_blank&#34;&gt;두 가지 최소 요청 로드 밸런싱의 힘&lt;/a&gt;으로 알려져 있습니다. (역자 주, 링크 제목은 &amp;lsquo;두 가지 무작위 선택의 힘&amp;rsquo;)&lt;/p&gt;

&lt;h3 id=&#34;고정-세션-sticky-sessions&#34;&gt;고정 세션 (Sticky sessions)&lt;/h3&gt;

&lt;p&gt;특정 애플리케이션에서는 같은 세션에 의한 요청이 같은 백엔드에 도달하는 것이 중요합니다. 이는 캐싱, 일시적인 복합 구성 상태 등과 관련이 있을 수 있습니다. 세션의 정의는 다양하며 HTTP 쿠키, 클라이언트 연결 속성 또는 기타 속성을 포함할 수 있습니다. 많은 L7 로드 밸런서는 고정 세션을 지원합니다. 한편, 세션의 고착도(stickiness)는 본질적으로 취약하기 때문에 세션에 의존하는 시스템을 설계할 때는 주의해야 합니다.&lt;/p&gt;

&lt;h3 id=&#34;tls-종료-tls-termination&#34;&gt;TLS 종료 (TLS termination)&lt;/h3&gt;

&lt;p&gt;TLS 주제와 에지 서비스 및 서비스와 서비스 간의 통신 보안 모두에서 TLS의 역할은 따로 포스트할 만큼의 가치가 있습니다. 이에 따라 많은 L7 로드 밸런서는 종료, 인증서 확인 및 핀닝, SNI를 사용한 인증서 서비스 등을 포함한 대량의 TLS 작업을 처리합니다.&lt;/p&gt;

&lt;h3 id=&#34;관측성-observability&#34;&gt;관측성 (Observability)&lt;/h3&gt;

&lt;p&gt;말씀드린 대로, &amp;ldquo;관측성, 관측성, 관측성&amp;rdquo; 입니다. 네트워크는 본질적으로 신뢰할 수 없으며, 로드 밸런서는 종종 작업자가 문제를 해결할 수 있도록 무엇이 잘못되었는지 파악하는 데 도움이 되는 통계, 추적 및 로그를 내보낼 책임이 있습니다. 로드 밸런서는 관측성에 따라 크게 다릅니다. 가장 진보된 로드 밸런서는 숫자 통계, 분산 추적 및 사용자 지정 가능한 로깅을 포함하는 많은 출력을 제공합니다. 향상된 관측성은 거저 얻어지는 게 아니라고 지적하고 싶습니다. 왜냐하면, 로드 밸런서는 이를 생성하기 위한 추가적인 작업을 해야하기 때문입니다. 그러나 이들 데이터가 주는 이득은 상대적으로 성능이 약해서 생기는 결과보다 훨씬 큽니다.&lt;/p&gt;

&lt;h3 id=&#34;보안-및-dos-완화-security-and-dos-mitigation&#34;&gt;보안 및 DoS 완화 (Security and DoS mitigation)&lt;/h3&gt;

&lt;p&gt;특히 에지 배포를 위한 토폴로지(아래 참조)에서는 로드 밸런서가 속도 제한, 인증 및 DoS 완화(예: IP 주소 태깅 및 판독, 타피팅(tarpitting) 등)를 비롯한 다양한 보안 기능을 구현하는 경우가 많습니다.&lt;/p&gt;

&lt;h3 id=&#34;환경-설정-및-컨트롤-플레인-configuration-and-control-plane&#34;&gt;환경 설정 및 컨트롤 플레인 (Configuration and control plane)&lt;/h3&gt;

&lt;p&gt;로드 밸런서는 환경 설정을 해주어야 합니다. 대규모 배포에서 이는 상당한 작업이 될 수 있습니다. 일반적으로, 로드 밸런서를 구성하는 시스템은 &amp;ldquo;컨트롤 플레인(control plane)&amp;ldquo;으로 알려져 있으며 구현이 매우 다양합니다. 이 항목에 대한 자세한 내용은 &lt;a href=&#34;https://medium.com/@mattklein123/service-mesh-data-plane-vs-control-plane-2774e720f7fc&#34; target=&#34;_blank&#34;&gt;데이터 플레인 대 제어 플레인 서비스 메쉬&lt;/a&gt;에 대한 저의 포스트를 참조하세요.&lt;/p&gt;

&lt;h3 id=&#34;그-외-정말-다양한-기능들-and-a-whole-lot-more&#34;&gt;그 외 정말 다양한 기능들 (And a whole lot more)&lt;/h3&gt;

&lt;p&gt;이 섹션에서는 로드 밸런서가 제공하는 기능들의 유형을 수박 겉핥기 식으로 다루어 보았습니다. 아래의 L7 로드 밸런서 섹션에서 추가적인 논의를 확인할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&#34;로드-밸런서-토폴로지-종류&#34;&gt;로드 밸런서 토폴로지 종류&lt;/h2&gt;

&lt;p&gt;이제 로드 밸런서가 무엇인지, L4와 L7 로드 밸런서의 차이와 로드 밸런서 기능의 요약에 대해 개괄적으로 살펴보았으므로 로드 밸런서가 적용된 다양한 분산 시스템 토폴로지로 옮겨 가겠습니다. (다음 토폴로지 중 각 항목은 L4 및 L7 로드 밸런서에 모두 적용됩니다.)&lt;/p&gt;

&lt;h3 id=&#34;미들-프록시&#34;&gt;미들 프록시&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*cCV-7Q-DDw87xNnTIVIhEg.png&#34;/&gt;
&lt;small&gt;그림 4. 미들 프록시 로드 밸런싱 토폴로지&lt;/center&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;그림 4에 표시된 미들 프록시 토폴로지는 대부분의 독자들이 로드 밸런싱을 확보하는 가장 익숙한 방법입니다. 이 범주에는 Cisco, Juniper, F5 등의 하드웨어 장치, Amazon의 &lt;a href=&#34;https://aws.amazon.com/elasticloadbalancing/&#34; target=&#34;_blank&#34;&gt;ALB 및 NLB&lt;/a&gt;와 Google의 &lt;a href=&#34;https://cloud.google.com/load-balancing/&#34; target=&#34;_blank&#34;&gt;클라우드 로드 밸런서&lt;/a&gt; 같은 클라우드 소프트웨어 솔루션 및 &lt;a href=&#34;https://www.haproxy.com/&#34; target=&#34;_blank&#34;&gt;HAProxy&lt;/a&gt;, &lt;a href=&#34;https://www.nginx.com/&#34; target=&#34;_blank&#34;&gt;NGINX&lt;/a&gt;, 그리고 &lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34;&gt;Envoy&lt;/a&gt;와 같은 순수 소프트웨어 자체 호스팅 솔루션이 포함됩니다. 미들 프록시 솔루션의 핵심은 사용자 단순성입니다. 일반적으로 사용자는 DNS를 통해 로드 밸런서에 연결되므로 다른 어떤 것도 걱정할 필요가 없습니다. 미들 프록시 솔루션의 핵심은 프록시(클러스터된 경우에도)가 단일 장애 지점이며 병목 현상도 증가한다는 점입니다. 미들 프록시도 운영을 어렵게 만드는 블랙박스입니다. 클라이언트에서 보여지는 문제가 있나요? 물리적 네트워크에서? 중간 프록시에서? 백엔드에서? 매우 알기 어려울 수 있습니다.&lt;/p&gt;

&lt;h3 id=&#34;에지-프록시&#34;&gt;에지 프록시&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*4zSWjsKnaC6QQmJ7PTj7Eg.png&#34;/&gt;
&lt;small&gt;그림 5. 에지 프록시 로드 밸런싱 토폴로지&lt;/center&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;그림 5에 표시된 에지 프록시 토폴로지는 실제로 인터넷을 통해 로드 밸런서에 액세스할 수 있는 미들 프록시 토폴로지의 변형일 뿐입니다. 이 시나리오에서는 일반적으로 로드 밸런서가 TLS 종료, 속도 제한, 인증 및 정교한 트래픽 라우팅과 같은 추가 &amp;ldquo;API 게이트웨이&amp;rdquo; 기능을 제공해야 합니다. 에지 프록시의 장단점은 미들 프록시와 같습니다. 일반적으로 인터넷을 지향하는 대규모 분산 시스템에서 전용 에지 프록시를 배포할 수 없다는 것이 주의사항입니다. 클라이언트는 일반적으로 서비스 소유자가 제어하지 않는 임의의 네트워크 라이브러리를 사용하여 DNS를 통해 시스템에 액세스해야 합니다(다음 섹션에서 설명하는 내장형 클라이언트 라이브러리 또는 사이드카 프록시 토폴로지는 클라이언트에서 직접 실행하기에는 실용적이지 않습니다). 추가적으로, 보안상의 이유로 모든 인터넷 트래픽이 시스템에 들어오는 수단으로 단일 게이트웨이를 사용하는 것이 좋습니다.&lt;/p&gt;

&lt;h3 id=&#34;내장형-클라이언트-라이브러리&#34;&gt;내장형 클라이언트 라이브러리&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*nuqZiYoFEkDe2cUgMh0aQw.png&#34;/&gt;
&lt;small&gt;그림 6. 내장형 클라이언트 라이브러리를 통한 로드 밸런싱&lt;/center&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;미들 프록시 토폴로지에 내재된 단일 장애 지점과 확장 문제를 피하기 위해, 보다 정교한 인프라는 그림 6에서 보는 것처럼 라이브러리를 통해 로드 밸런서를 서비스에 직접 내장하는 쪽으로 이동했으며, 대부분의 라이브러리들은 다양한 기능을 지원하고 있습니다. &lt;a href=&#34;https://twitter.github.io/finagle/&#34; target=&#34;_blank&#34;&gt;Finagle&lt;/a&gt;, &lt;a href=&#34;https://netflix.github.io/&#34; target=&#34;_blank&#34;&gt;Eureka/Ribbon/Hystrix&lt;/a&gt; 및 &lt;a href=&#34;https://grpc.io/&#34; target=&#34;_blank&#34;&gt;gRPC&lt;/a&gt;(Stougy라고 하는 내부 Google 시스템을 기반으로 함) 라이브러리 기반 솔루션의 주요 장점은 로드 밸런서의 모든 기능을 각 클라이언트에 완전히 분산하여 단일 장애 지점(single point of failure)과 앞서 설명한 확장성 이슈를 제거한다는 것입니다. 라이브러리 기반 솔루션의 주된 단점은 라이브러리가 조직에서 사용하는 모든 언어로 구현되어야 한다는 점입니다. 분산형 아키텍처는 점점 더 &amp;ldquo;폴리글랏(다중 언어)&amp;ldquo;이 증가하고 있습니다. 이러한 환경에서는 여러 언어로 매우 정교한 네트워킹 라이브러리를 다시 구축하는 비용이 엄청나게 들 수 있습니다. 마지막으로, 대규모 서비스 아키텍처에 걸쳐 라이브러리 업그레이드를 배포하는 것은 매우 고통스러울 수 있으며, 다양한 버전의 라이브러리가 운영 환경에서 동시에 실행되게 함으로써 운영 인지 부하(operational cognitive load)가 증가할 가능성이 매우 높습니다.&lt;/p&gt;

&lt;p&gt;모두 그렇다고 해도, 위에서 언급한 라이브러리들은 프로그래밍 언어의 확산을 제한하고 라이브러리 업그레이드 고통을 극복한 회사들에게는 성공적이었습니다.&lt;/p&gt;

&lt;h3 id=&#34;사이드카-프록시&#34;&gt;사이드카 프록시&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*wPoZoz6cKAo0HBi1wmNZtA.png&#34;/&gt;
&lt;small&gt;그림 7. 사이드카를 통한 로드 밸런싱&lt;/center&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;내장형 클라이언트 라이브러리 로드 밸런서 토폴로지의 변형은 그림 7에 표시된 사이드카 프록시 토폴로지입니다. 최근 몇 년간 이 토폴로지는 &amp;ldquo;서비스 메시&amp;rdquo;로 대중화되었습니다. 사이드카 프록시 이면의 아이디어는 다른 프로세스에 뛰어들어 약간의 지연 시간 페널티를 지불하는 비용으로 내장된 라이브러리 접근 방식의 모든 장점을 프로그래밍 언어를 락(제한)하지 않아도 얻을 수 있다는 것입니다. 이 글을 작성할 때, 가장 인기 있는 사이드카 프록시 로드 밸런서는 &lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34;&gt;Envoy&lt;/a&gt;, &lt;a href=&#34;https://www.nginx.com/&#34; target=&#34;_blank&#34;&gt;NGINX&lt;/a&gt;, &lt;a href=&#34;https://www.haproxy.com/&#34; target=&#34;_blank&#34;&gt;HAProxy&lt;/a&gt; 및 &lt;a href=&#34;https://linkerd.io/&#34; target=&#34;_blank&#34;&gt;Linkerd&lt;/a&gt;입니다. 사이드카 프록시 접근 방식에 대한 보다 자세한 처리에 대해서는 &lt;a href=&#34;https://eng.lyft.com/announcing-envoy-c-l7-proxy-and-communication-bus-92520b6c8191&#34; target=&#34;_blank&#34;&gt;Envoy를 소개하는 블로그 포스트&lt;/a&gt;와 또한 &lt;a href=&#34;https://medium.com/@mattklein123/service-mesh-data-plane-vs-control-plane-2774e720f7fc&#34; target=&#34;_blank&#34;&gt;서비스 메시 데이터 플레인 대 컨트롤 플레인&lt;/a&gt;에 대한 저의 포스트를 참조하시길 바랍니다.&lt;/p&gt;

&lt;h3 id=&#34;다른-로드-밸런서-토폴로지-장단점-요약&#34;&gt;다른 로드 밸런서 토폴로지 장단점 요약&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;미들 프록시 토폴로지는 일반적으로 사용하기 가장 쉬운 로드 밸런싱 토폴로지입니다. 단일 장애 지점, 스케일링 제한 및 블랙 박스 운영으로 인해 성능이 떨어집니다.&lt;/li&gt;
&lt;li&gt;에지 프록시 토폴로지는 미들 프록시와 유사하지만 전형적으로 피해갈 수는 없습니다.&lt;/li&gt;
&lt;li&gt;내장된 클라이언트 라이브러리 토폴로지는 최고의 성능과 확장성을 제공하지만 라이브러리를 모든 언어로 구현해야 하는 필요성뿐 아니라 모든 서비스에 걸쳐 라이브러리를 업그레이드해야 하는 필요성 때문에 어려움을 겪고 있습니다.&lt;/li&gt;
&lt;li&gt;사이드카 프록시 토폴로지는 내장된 클라이언트 라이브러리 토폴로지와 성능이 떨어지지는 않지만 그 어떤 제한으로부터 어려움을 겪지는 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;전반적으로, 저는 사이드카 프록시 토폴로지(서비스 메시)가 서비스 간의 통신을 위해 다른 모든 토폴로지를 점차 대체할 것이라고 생각합니다. 에지 프록시 토폴로지는 항상 트래픽이 서비스 메쉬로 들어가기 전에 필요합니다.&lt;/p&gt;

&lt;h2 id=&#34;l4-로드-밸런싱의-기술-현황&#34;&gt;L4 로드 밸런싱의 기술 현황&lt;/h2&gt;

&lt;h3 id=&#34;l4-로드-밸런서는-여전히-관련이-있을까요&#34;&gt;L4 로드 밸런서는 여전히 관련이 있을까요?&lt;/h3&gt;

&lt;p&gt;이 포스트는 이미 L7 로드 밸런싱 장치가 현대적 프로토콜에 얼마나 대단한지에 대해 논의했으며, 더 자세한 L7 로드 밸런서 기능에 대해 아래에서 살펴볼 예정입니다. 이는 L4 로드 밸런서가 더 이상 관련이 없다는 뜻일까요? 아니요! 비록 L7 로드 밸런서가 궁극적으로 서비스 간의 통신을 위해 L4 로드 밸런서를 완전히 대체하겠지만, L4 로드 밸런서는 여전히 에지에서 매우 유효합니다. 왜냐하면 대부분의 대규모 분산 아키텍처는 2가지 티어의 L4/L7 로드 밸런싱를 사용하기 때문입니다. 에지 배치에서 L7 로드 밸런서보다 먼저 전용 L4 로드 밸런서를 배치하여 얻는 이득은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;L7 로드 밸런서는 애플리케이션 트래픽의 훨씬 더 정교한 분석, 변환 및 라우팅을 수행하므로 최적화된 L4 로드 밸런서보다 원시 트래픽 로드(초당 패킷 및 초당 바이트로 측정)의 상대적으로 작은 부분을 처리할 수 있습니다. 이러한 사실은 일반적으로 L4 로드 밸런서가 더 나은 위치에서 특정 유형의 DoS 공격(예: SYN 플러딩, 일반 패킷 플러딩 공격 등)을 처리하도록 합니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;L7 로드 밸런서는 L4 로드 밸런서보다 더 활발하게 개발되고, 더 자주 배치되며, 버그가 더 많습니다. L7 로드 밸런서를 배포하는 동안, 헬스 체킹하고 축출할 수 있는 L4 로드 밸런서를 전면에 배치하는 것은 일반적으로 BGP 및 ECMP를 사용하는 최신 L4 로드 밸런서에 사용되는 배치 메커니즘보다 훨씬 더 쉽습니다(아래 내용 참조). 그리고 마지막으로, L7 로드 밸런서는 복잡한 기능들로 인해 버그를 가질 가능성이 높기 때문에, 장애 및 이상 징후를 중심으로 라우팅할 수 있는 L4 로드 밸런서를 사용하면, 보다 안정적인 전체 시스템이 만들어집니다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음 섹션에서는 미들/에지 프록시 L4 로드 밸런서를 위한 여러가지 디자인에 대해 설명합니다. 이 디자인들은 일반적으로 클라이언트 라이브러리 및 사이드카 프록시 토폴로지에는 적용되지 않습니다.&lt;/p&gt;

&lt;h3 id=&#34;tcp-udp-종료-termination-로드-밸런서&#34;&gt;TCP/UDP 종료 (termination) 로드 밸런서&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*1PjTpM3hLnm3iEAd4-_AaQ.png&#34;/&gt;
&lt;small&gt;그림 8. L4 종료 로드 밸런서&lt;/center&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;여전히 사용 중인 L4 로드 밸런서의 첫 번째 유형은 그림 8에 표시된 종료 로드 밸런서입니다. 위의 L4 로드 밸런싱 소개에서 본 것과 동일한 로드 밸런서입니다. 이러한 유형의 로드 밸런서에서는 클라이언트와 로드 밸런서 간에, 그리고 로드 밸런서와 백엔드 간에 서로 다른 두 개의 TCP 연결이 사용됩니다.&lt;/p&gt;

&lt;p&gt;L4 종료 로드 밸런서는 다음 두 가지 이유로 계속 사용됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;이들은 상대적으로 구현이 쉽습니다.&lt;/li&gt;
&lt;li&gt;클라이언트와 아주 근접한 (낮은 지연 시간) 연결 종료는 상당한 성능 영향을 미칩니다. 특히, 종료 로드 밸런서를 손실된 네트워크(예: 셀룰러)를 사용하는 클라이언트 가까이에 배치할 수 있는 경우, 최종 위치로 전송 도중에 데이터가 안정적인 광섬유 전송 장치로 이동되기 전 재전송이 더 빨리 발생할 수 있습니다. 달리 말하면, 이러한 유형의 로드 밸런서는 원시 TCP 연결 종료의 POP(Point of Presence) 시나리오에서 사용될 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tcp-udp-패스스루-passthrough-로드-밸런서&#34;&gt;TCP/UDP 패스스루 (passthrough) 로드 밸런서&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*mf0S8BrWjxSBU-mP4ZpC9A.png&#34;/&gt;
&lt;small&gt;그림 9. L4 패스스루 로드 밸런서&lt;/center&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;두 번째 유형의 L4 로드 밸런서는 그림 9에 표시된 패스스루 로드 밸런서입니다. 이 유형의 로드 밸런서에서는 TCP 연결이 로드 밸런서에 의해 종료되지 않습니다. 대신 연결 추적 및 NAT(&lt;a href=&#34;https://en.wikipedia.org/wiki/Network_address_translation&#34; target=&#34;_blank&#34;&gt;네트워크 주소 변환&lt;/a&gt;)이 수행된 후 각 연결에 대한 패킷이 선택된 백엔드로 전달됩니다. 먼저 연결 추적과 NAT을 정의하겠습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;연결 추적&lt;/strong&gt;: 모든 활성 TCP 연결의 상태를 추적하는 프로세스입니다. 여기에는 핸드셰이크가 완료되었는지 여부, FIN이 수신되었는지 여부, 연결 유휴 상태가 얼마나 오래되었는지, 연결에 대해 어떤 백엔드를 선택했는지에 대한 데이터가 포함됩니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;NAT&lt;/strong&gt;: NAT은 연결 추적 데이터를 사용하여 패킷이 로드 밸런서를 통과할 때 패킷의 IP/포트 정보를 변경하는 프로세스입니다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;연결 추적과 NAT을 모두 사용하며 로드 밸런서는 클라이언트에서 백엔드로 원시 TCP 트래픽을 대부분 전달할 수 있습니다. 예를 들어, 클라이언트가 &lt;code&gt;1.2.3.4:80&lt;/code&gt;을 가리키고 있고 선택한 백엔드는 &lt;code&gt;10.0.2:9000&lt;/code&gt;에 있다고 가정해 보겠습니다. 클라이언트 TCP 패킷은 &lt;code&gt;1.2.3.4:80&lt;/code&gt;에 로드 밸런서에 도착합니다. 그런 다음 로드 밸런서는 패킷의 대상 IP 및 포트를 &lt;code&gt;10.0.2:9000&lt;/code&gt;으로 교환하고 패킷의 소스 IP를 로드 밸런서의 IP 주소로 교환합니다. 따라서 백엔드가 TCP 연결에서 응답하면 패킷은 연결 추적을 실행하는 로드 밸런서로 다시 돌아가고 NAT은 역방향으로 다시 수행될 수 있습니다.&lt;/p&gt;

&lt;p&gt;이전 섹션에서 설명한 종료 로드 밸런서 대신 더 복잡한 이 유형의 로드 밸런서가 사용되는 이유는 무엇일까요? 몇 가지 이유는 다음과 같습니다:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;성능 및 리소스 사용&lt;/strong&gt;: 패스스루 로드 밸런서는 TCP 연결을 종료하지 않으므로 TCP 연결 윈도우를 버퍼링할 필요가 없습니다. 연결당 저장된 상태의 양은 매우 작고 일반적으로 효율적인 해시 테이블 검색을 통해 액세스됩니다. 이 때문에 패스스루 로드 밸런서는 일반적으로 종료 로드 밸런서보다 훨씬 많은 수의 액티브 연결 및 초당 패킷(PPS)을 처리할 수 있습니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;백엔드가 사용자 지정 혼잡 제어(congestion control)를 할 수 있게 합니다.&lt;/strong&gt;: &lt;a href=&#34;https://en.wikipedia.org/wiki/TCP_congestion_control&#34; target=&#34;_blank&#34;&gt;TCP 정체 제어&lt;/a&gt;는 어느 인터넷 엔드포인트가 사용 가능한 대역폭과 버퍼를 초과하지 않도록 전송되는 데이터를 제어하는 메커니즘입니다. 패스스루 로드 밸런서는 TCP 연결을 종료하지 않으므로 혼잡 제어에 참여하지 않습니다. 이 사실은 백엔드가 애플리케이션 유즈 케이스에 따라 다양한 혼잡 제어 알고리즘을 사용할 수 있게 해준다는 것입니다. 또한 혼잡 제어 변경(예: 최근 &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=3022184&#34; target=&#34;_blank&#34;&gt;BBR&lt;/a&gt; 롤아웃)에 대한 실험도 보다 쉽게 할 수 있습니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;DSR(Direct Server Return) 및 클러스터 L4 로드 밸런싱의 기준을 구성합니다.&lt;/strong&gt;: DSR 및 분산 컨시스턴트 해싱을 사용한 클러스터링과 같은 고급 L4 로드 밸런싱 기법에는 패스스루 로드 밸런싱이 필요합니다(다음 섹션에서 설명함).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;dsr-direct-server-return&#34;&gt;DSR (direct server return)&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*4IW2Y8SvovEMrWpuZA-mtg.png&#34;/&gt;
&lt;small&gt;그림 10. L4 DSR (irect server return)&lt;/center&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;그림 10은 DSR(Direct Server Return) 로드 밸런서를 보여주고 있습니다. DSR은 이전 섹션에서 설명한 패스스루 로드 밸런서를 기반으로 합니다. DSR은 수신(ingress)/요청(request) 패킷만 로드 밸런서를 횡단하는 최적화입니다. 송신(engress)/응답(response) 패킷은 로드 밸런서 주위를 다시 클라이언트로 이동합니다. DSR을 수행하는 것이 흥미로운 주된 이유는 많은 작업 부하에서 응답 트래픽이 요청 트래픽을 작아지게 하기 때문입니다. (예: 전형적인 HTTP 요청/응답 패턴). 10%의 트래픽이 요청 트래픽이고 90%의 트래픽이 응답 트래픽이라고 가정한다면, 용량의 1/10을 사용하는 로드 밸런서는 시스템의 요구를 충족할 수 있습니다. 역사적으로 로드 밸런서는 매우 비싸기 때문에 이러한 유형의 최적화는 시스템 비용과 신뢰성에 상당한 영향을 미칠 수 있습니다(적은 게 항상 좋습니다). DSR 로드 밸런싱 장치는 다음과 같이 패스스루 로드 밸런서의 개념을 확장합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;로드 밸런서는 여전히 부분적인 연결 추적을 일반적으로 수행합니다. 응답 패킷은 로드 밸런서를 이동하지 않으므로 로드 밸런서는 전체 TCP 연결 상태를 인식하지 못합니다. 그러나 로드 밸런서는 클라이언트 패킷을 보고 다양한 유형의 유휴 시간 타임아웃을 사용하여 상태를 견고히 추론할 수 있습니다.&lt;/li&gt;
&lt;li&gt;NAT 대신 로드 밸런서는 일반적으로 &lt;a href=&#34;https://en.wikipedia.org/wiki/Generic_Routing_Encapsulation&#34; target=&#34;_blank&#34;&gt;GRE(Generic Routing Encapsulation)&lt;/a&gt;를 사용하여 로드 밸런서에서 백엔드로 전송되는 IP 패킷을 캡슐화합니다. 따라서 백엔드가 캡슐화된 패킷을 받으면 패킷을 분해해서 클라이언트의 원래 IP 주소와 TCP 포트를 알 수 있습니다. 이렇게 하면 응답 패킷이 로드 밸런서를 통과하지 않고 백엔드가 클라이언트에 직접 응답할 수 있습니다.&lt;/li&gt;
&lt;li&gt;DSR 로드 밸런서의 중요한 부분은 *백엔드가 로드 밸런싱에 참여한다*는 것입니다. 백엔드에 GRE 터널이 올바르게 구성되어 있어야 하며 네트워크 설정의 하위 레벨 세부 정보에 따라 자체 연결 추적, NAT 등이 필요할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;패스스루 로드 밸런서와 DSR 로드 밸런서 디자인 모두 로드 밸런서와 백엔드에서 연결 추적을 설정할 수 있는 다양한 방법이 있습니다. 불행히도 이 주제는 이 포스트의 범위를 벗어납니다.&lt;/p&gt;

&lt;h3 id=&#34;고가용성-페어를-통한-장애-허용&#34;&gt;고가용성 페어를 통한 장애 허용&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*dgVKtmARcboQe0up5dQiBQ.png&#34;/&gt;
&lt;small&gt;그림 11. HA 페어와 연결 추적을 통한 L4 장애 허용&lt;/center&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;지금까지 우리는 단일 L4 로드 밸런서의 디자인을 고려해 왔습니다. 패스스루 및 DSR 로드 밸런서에는 모두 로드 밸런서 자체에서 어느 정도의 연결 추적과 상태가 필요합니다. 로드 밸런서가 죽으면 어떻게 될까요? 로드 밸런서의 단일 인스턴스가 죽으면 로드 밸런서를 통과하는 모든 연결이 끊어집니다. 이는 애플리케이션에 따라 애플리케이션 성능에 상당한 영향을 미칠 수 있습니다.&lt;/p&gt;

&lt;p&gt;역사적으로 L4 로드 밸런싱 장치는 일반적인 벤더(Cisco, Juniper, F5 등)에서 구입한 하드웨어 장치입니다. 이 장치들은 매우 비싸고 많은 양의 트래픽을 처리합니다. 단일 로드 밸런서 장애로 인해 모든 연결이 끊어져 어플리케이션 중단이 발생하는 것을 피하기 위해, 그림 11과 같이 로드 밸런서는 일반적으로 고가용성 페어로 배포되었습니다. 일반적인 HA 로드 밸런서 설정은 다음과 같이 디자인되었습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;한 페어의 HA 에지 라우터는 몇 가지 가상 IP(VIP)를 서비스합니다. 이러한 에지 라우터는 BGP(Border Gateway Protocol)를 사용하여 VIP를 알립니다. 기본 에지 라우터는 백업보다 BGP 가중치가 높으므로 모든 트래픽을 처리할 수 있습니다. (BGP는 매우 복잡한 프로토콜이므로, 이 포스트의 목적을 위해, BGP를, 네트워크 장치가 다른 네트워크 장치에서 트래픽을 가져올 수 있다는 사실을 알리며 각 링크가 링크 트래픽의 우선 순위를 매길 수 있는 메커니즘으로 간주합니다.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;마찬가지로, 기본 L4 로드 밸런싱 장치는 BGP 가중치가 백업보다 높은 BGP 가중치를 가진 에지 라우터로 자신을 알리므로 모든 트래픽을 안정적으로 처리합니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;기본 로드 밸런서는 백업에 교차 연결되고 모든 연결 추적 상태를 공유합니다. 따라서 기본 로드 밸런서가 죽으면 백업이 모든 액티브 연결을 처리할 수 있습니다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;두 개의 에지 라우터와 두 개의 로드 밸런서는 모두 상호 연결되어 있습니다. 즉, 에지 라우터 중 하나 또는 로드 밸런서 중 하나가 죽거나 다른 이유로 인해 BGP 알림이 취소된 경우 백업이 모든 트래픽을 처리할 수 있습니다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 설정은 많은 상위 트래픽 인터넷 어플리케이션이 오늘날까지도 서비스되고 있는 방식입니다. 그러나 위의 접근 방식에는 상당한 단점이 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VIP 사용량을 고려하여 HA 로드 밸런서 페어 간에 VIP를 올바르게 분할해야 합니다. 단일 VIP가 단일 HA 페어의 용량을 초과하여 확장되는 경우 VIP를 여러 VIP로 분할해야 합니다.&lt;/li&gt;
&lt;li&gt;시스템의 리소스 사용이 열악합니다. 용량의 50%는 정상 상태에서 유휴 상태입니다. 역사적으로 하드웨어 로드 밸런싱 장치가 매우 비싸기다는 것을 감안할 때, 상당한 유휴 자본이 발생합니다.&lt;/li&gt;
&lt;li&gt;최신 분산 시스템 디자인은 액티브/백업보다 장애 허용(fault torlence)이 더 큰 것을 선호합니다. 예를 들어, 시스템이 여러 가지 동시 장애를 겪고 계속 작동할 수 있어야 합니다. HA 로드 밸런서 페어는 활성 및 백업 로드 밸런서가 동시에 죽을 경우, 전체 장애가 쉽게 발생할 수 있습니다.&lt;/li&gt;
&lt;li&gt;벤더의 독점적인 대형 하드웨어 장치는 매우 고가이며 벤더에 종속됩니다. 일반적으로 이러한 하드웨어 장치를 범용 컴퓨팅 서버를 사용하여 구축된 수평 확장 가능한 소프트웨어 솔루션으로 교체하는 것이 좋습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;분산-컨시스턴트-해싱이-있는-클러스터를-통한-장애-허용-및-확장&#34;&gt;분산 컨시스턴트 해싱이 있는 클러스터를 통한 장애 허용 및 확장&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*q5ZtVZb4UhzuGyhIa5lARA.png&#34;/&gt;
&lt;small&gt;그림 12. 분산 컨시스턴트 해싱이 있는 클러스터를 통한 L4 장애 허용 및 확장&lt;/center&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;이전 섹션에서는 HA 페어를 통한 L4 로드 밸런서 장애 허용과 해당 디자인의 고유한 문제점을 소개했습니다. 2000년대 초반부터 중반에 이르러 대규모 인터넷 인프라는 그림 12와 같이 대규모 병렬 L4로드 밸런싱 시스템을 디자인하고 구축하기 시작했습니다. 이러한 시스템의 목표는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;이전 섹션에서 설명한 HA 페어 디자인의 단점을 모두 완화&lt;/li&gt;
&lt;li&gt;벤더의 독점 하드웨어 로드 밸런서에서 표준 컴퓨팅 서버 및 NIC를 사용하여 구축된 범용 소프트웨어 솔루션으로 이동&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 L4 로드 밸런서 설계를 클러스터링 및 분산 컨시스턴트 해싱을 통해 장애 허용 및 확장이라고 지칭하는 것이 가장 좋습니다. 이는 다음과 같이 작동합니다:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;N 에지 라우터는 모든 애니캐스트 VIP를 동일한 BGP 가중치로 알립니다. 일반적으로 단일 플로우의 모든 패킷이 동일한 에지 라우터에 도달하도록 하기 위해 ECMP(동일한 비용의 다중 경로 라우팅, Equal-Cost Multi-Path Routing)이 사용됩니다. 플로우는 일반적으로 출발지 IP/포트 및 목적지 IP/포트 4개의 튜플입니다. (요컨대, ECMP는 컨시턴트 해싱을 사용하여 패킷을 동일한 가중치 네트워크 링크 집합으로 배포하는 방법입니다.) 에지 라우터 자체는 어떤 패킷이 어디에 도착할지 특별히 신경 쓰지는 않지만, 일반적으로 플로우의 모든 패킷이 성능을 저하시키는 잘못된 순서의 패킷을 피하도록 동일한 링크 집합을 통과하는 것이 좋습니다.&lt;/li&gt;
&lt;li&gt;N L4 로드 밸런서 시스템은 모든 VIP를 에지 라우터에 동일한 BGP 가중치로 알립니다. ECMP를 다시 사용하면 에지 라우터는 일반적으로 플로우에 대해 동일한 로드 밸런서 시스템을 선택합니다.&lt;/li&gt;
&lt;li&gt;각 L4 로드 밸런서 시스템은 일반적으로 부분 연결 추적을 수행한 다음 컨시스턴트 해싱을 사용하여 플로우를 위한 백엔드를 선택합니다. GRE는 로드 밸런서에서 백엔드로 전송된 패킷을 캡슐화하는 데 사용됩니다.&lt;/li&gt;
&lt;li&gt;그런 다음 DSR을 사용하여 에지 라우터를 통해 백엔드에서 클라이언트로 직접 패킷을 전송합니다.&lt;/li&gt;
&lt;li&gt;L4 로드 밸런서가 사용하는 실제 컨시스턴트 해싱 알고리즘은 활발한 리서치 영역입니다. 로드 평준화, 지연 시간 최소화, 백엔드 변경 시 운영 중단 최소화, 메모리 오버헤드 최소화와 관련된 장단점이 있습니다. 이 주제에 대한 전체적인 논의는 이 포스트의 범위를 벗어납니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 디자인이 HA 페어 접근 방식의 모든 단점을 어떻게 완화하는지 살펴보겠습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;필요에 따라 새 에지 라우터 및 로드 밸런서 시스템을 추가할 수 있습니다. 컨시스턴트 해싱은 새 시스템을 추가할 때 영향을 받는 플로우의 수를 가능한 많이 줄이기 위해 모든 계층에서 사용됩니다.&lt;/li&gt;
&lt;li&gt;시스템의 리소스 사용량은 버스트 마진과 장애 허용을 충분히 유지하면서 원하는 만큼 높게 실행할 수 있습니다.&lt;/li&gt;
&lt;li&gt;에지 라우터와 로드 밸런서 모두는 이제 기존 하드웨어 로드 밸런싱에 비해 훨씬 적은 비용으로 일반 하드웨어를 사용하여 구축할 수 있습니다(자세한 내용은 아래 참조).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 디자인에 대해 일반적으로 묻는 한 가지 질문은 &amp;ldquo;에지 라우터가 ECMP를 통해 백엔드와 바로 연결되지 않는 이유는 무엇인가요? 대체 왜 로드 밸런서가 필요한가요?&amp;ldquo;입니다. 그 이유는 주로 DoS 완화 및 백엔드 운영 편의성과 관련이 있습니다. 로드 밸런서가 없으면 각 백엔드가 BGP에 참여해야 하며 롤링 배포를 수행하는 데 훨씬 더 많은 시간이 걸립니다.&lt;/p&gt;

&lt;p&gt;모든 최신 L4 로드 밸런싱 시스템은 이 디자인(또는 그 변형)으로 이동하고 있습니다. 가장 널리 알려진 두 가지 예는 Google의 &lt;a href=&#34;https://research.google.com/pubs/pub44824.html&#34; target=&#34;_blank&#34;&gt;Maglev&lt;/a&gt;와 Amazon의 &lt;a href=&#34;http://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html&#34; target=&#34;_blank&#34;&gt;NLB(Network Load Balancer)&lt;/a&gt;입니다. 현재 이 디자인을 구현한 OSS 로드 밸런서는 없지만 2018년 OSS 하나를 출시할 계획 중인 것으로 알고 있는 한 회사가 있습니다. 최신 L4 로드 밸런서는 네트워킹 영역의 OSS가 놓치고 있는 가장 중요한 부분이므로 이번 릴리스에 대해 저는 매우 기쁘게 생각합니다.&lt;/p&gt;

&lt;h2 id=&#34;l7-로드-밸런싱의-기술-현황&#34;&gt;L7 로드 밸런싱의 기술 현황&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The proxy wars in tech currently is &lt;em&gt;quite literally&lt;/em&gt; the proxy wars.&lt;br&gt;&lt;br&gt;Or the &amp;quot;war of the proxies&amp;quot;.&lt;br&gt;&lt;br&gt;Nginx plus, HAProxy, linkerd, Envoy all quite literally killing it. &lt;br&gt;&lt;br&gt;And proxy-as-a-service/routing-as-a-service SaaS vendors raising the bar as well. Very interesting times!&lt;/p&gt;&amp;mdash; Cindy Sridharan (@copyconstruct) &lt;a href=&#34;https://twitter.com/copyconstruct/status/935354313617977345?ref_src=twsrc%5Etfw&#34;&gt;November 28, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;기술 분야의 프록시 워즈는 현재 &lt;em&gt;문자 그대로&lt;/em&gt; 프록시 워즈이다.&lt;/p&gt;

&lt;p&gt;또는 &amp;ldquo;프록시들의 전쟁&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Nginx 플러스, HAProxy, linkerd, Envoy 모두 문자 그대로 죽인다. (역자 주: 대박이다는 뜻?)&lt;/p&gt;

&lt;p&gt;서비스형 프록시/서비스형 라우팅 SaaS 벤더들도 그 기준을 높였다. 아주 흥미로운 시대이다!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;네, 확실히 그렇습니다. 지난 몇 년 동안 L7로드 밸런서/프록시 개발이 부활했습니다. 이 길은 분산 시스템에서 마이크로 서비스 아키텍처로가 지속적인 추진으로 아주 잘 다져지고 있습니다. 본질적으로 결함이 있는 네트워크는 더 자주 사용될 때 효율적으로 작동하기가 훨씬 더 어려워집니다. 또한 오토 스케일링, 컨테이너 스케줄러 등의 등장으로 정적 파일에 정적 IP를 프로비저닝하는 시대는 오래 전에 사라졌습니다. 시스템은 네트워크를 더 많이 활용하고 있을 뿐만 아니라 로드 밸런서에서 새로운 기능을 요구하면서 훨씬 더 동적으로 변하고 있습니다. 이 섹션에서는 최신 L7로드 밸런서에서 가장 많이 발전한 부분을 간략히 설명하겠습니다.&lt;/p&gt;

&lt;h3 id=&#34;프로토콜-지원&#34;&gt;프로토콜 지원&lt;/h3&gt;

&lt;p&gt;최신 L7 로드 밸런서는 여러 가지 다른 프로토콜을 명시적으로 지원합니다. 로드 밸런서가 애플리케이션 트래픽에 대해 더 많은 지식을 가질수록 관측성 아웃풋(observability output), 고급 로드 밸런싱 및 라우팅 등과 관련하여 보다 정교한 작업을 수행할 수 있습니다. 예를 들어, 현재 Envoy는 HTTP/1, HTTP2, gRPC, Redis, MongoDB 및 DynamoDB에 대한 L7 프로토콜 구문 분석 및 라우팅을 명시적으로 지원합니다. 앞으로 MySQL과 Kafka를 포함해 더 많은 프로토콜이 추가될 것입니다.&lt;/p&gt;

&lt;h3 id=&#34;동적-구성&#34;&gt;동적 구성&lt;/h3&gt;

&lt;p&gt;위에서 설명한 것처럼, 분산형 시스템의 점진적 동적 특성은 동적 및 반응형 제어 시스템을 만드는 데 병렬 투자를 필요로 합니다. &lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34;&gt;Istio&lt;/a&gt;는 그러한 시스템의 한 예입니다. 이 주제에 대한 자세한 내용은 &lt;a href=&#34;https://medium.com/@mattklein123/service-mesh-data-plane-vs-control-plane-2774e720f7fc&#34; target=&#34;_blank&#34;&gt;서비스 메시 데이터 플레인 대 컨트롤 플레인&lt;/a&gt;에 있는 저의 포스트를 참조하세요.&lt;/p&gt;

&lt;h3 id=&#34;고급-로드-밸런싱&#34;&gt;고급 로드 밸런싱&lt;/h3&gt;

&lt;p&gt;L7 로드 밸런서는 일반적으로 타임 아웃, 재시도, 속도 제한, 서킷 브레이킹, 섀도우링, 버퍼링, 컨텐츠 기반 라우팅 등과 같은 고급 로드 밸런싱 기능이 기본적으로 내장되어 있습니다.&lt;/p&gt;

&lt;h3 id=&#34;관측성&#34;&gt;관측성&lt;/h3&gt;

&lt;p&gt;일반 로드 밸런서 기능에 대해 위의 섹션에서 설명한 것처럼 배포되고 있는 점진적 동적 시스템을 디버그하는 것이 점점 어려워지고 있습니다. 견고한 프로토콜별 관측성 아웃풋(observability output)은 현대의 L7 로드 밸런서가 제공하는 가장 중요한 기능일 수 있습니다. 이제 모든 L7 로드 밸런싱 솔루션에 숫자 통계, 분산 추적 및 사용자 지정 가능한 로깅이 사실상 필요합니다.&lt;/p&gt;

&lt;h3 id=&#34;확장성&#34;&gt;확장성&lt;/h3&gt;

&lt;p&gt;최신 L7 로드 밸런서 사용자는 사용자 지정 기능을 추가하기 위해 쉽게 로드 밸런서를 확장하고자 하는 경우가 많습니다. 이 작업은 로드 밸런서에 로드되는 플러그형 필터를 작성하여 수행할 수 있습니다. 대부분의 로드 밸런서는 일반적으로 &lt;a href=&#34;https://www.lua.org/&#34; target=&#34;_blank&#34;&gt;Lua&lt;/a&gt;를 통해 스크립팅을 지원합니다.&lt;/p&gt;

&lt;h3 id=&#34;장애-허용&#34;&gt;장애 허용&lt;/h3&gt;

&lt;p&gt;L4 로드 밸런서 장애 허용에 대해 꽤 썼습니다. L7 로드 밸런서 장애 허용은 어떻습니까? 일반적으로 L7 로드 밸런서는 소모적이고 스테이트리스인 것으로 취급합니다. 범용 소프트웨어를 사용하면 L7 로드 밸런서를 쉽게 수평으로 확장할 수 있습니다. 또한 L7 로드 밸런서가 수행하는 처리 및 상태 추적은 L4 보다 훨씬 더 복잡합니다. L7 로드 밸런서의 HA 페어링을 구축하려는 시도는 기술적으로 가능하지만 중요한 비지니스가 될 것입니다.&lt;/p&gt;

&lt;p&gt;전반적으로 L4 및 L7 로드 밸런싱 도메인 모두에서 업계는 HA 페어링을 떠나 컨시스턴트 해싱을 통해 수렴되는 수평 확장 가능한 시스템으로 이동하고 있습니다.&lt;/p&gt;

&lt;h3 id=&#34;그-외의-것들&#34;&gt;그 외의 것들&lt;/h3&gt;

&lt;p&gt;L7 로드 밸런서는 엄청난 속도로 진화하고 있습니다. Envoy가 제공하는 예를 보려면 Envoy의 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/arch_overview&#34; target=&#34;_blank&#34;&gt;아키텍처 개요&lt;/a&gt;를 참조하세요.&lt;/p&gt;

&lt;h2 id=&#34;글로벌-로드-밸런싱-및-중앙형-컨트롤-플레인&#34;&gt;글로벌 로드 밸런싱 및 중앙형 컨트롤 플레인&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*WMjv7B0UzZgJje_uQPtvtg.png&#34;/&gt;
&lt;small&gt;그림 13. 글로벌 로드밸런싱&lt;/center&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;로드 밸런싱의 미래는 점점 더 개별 로드 밸런서를 범용 장치로 취급할 것입니다. 제 생각에는, 진정한 혁신과 상업적 기회는 모두 컨트롤 플레인 안에 있습니다. 그림 13은 글로벌 로드 밸런싱 시스템의 예를 보여 줍니다. 이 예에서는 다음과 같은 몇 가지 다른 작업이 수행됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;각 사이드카 프록시는 세 개의 다른 Zone(A, B, C)에서 백엔드와 통신합니다.&lt;/li&gt;
&lt;li&gt;그림처럼 트래픽의 90%가 Zone C로 전송되고 트래픽의 5%는 Zone A와 B로 전송됩니다.&lt;/li&gt;
&lt;li&gt;사이드카 프록시 및 백엔드는 모두 글로벌 로드 밸런서에 주기적인 상태를 보고합니다. 이를 통해 글로벌 로드 밸런서에서 대기 시간, 비용, 로드, 현재 장애 등을 고려하여 결정을 내릴 수 있습니다.&lt;/li&gt;
&lt;li&gt;글로벌 로드 밸런서는 주기적으로 각 사이드카 프록시를 현재 라우팅 정보로 구성합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;글로벌 로드 밸런서는 개별 로드 밸런서가 스스로 수행할 수 없는 정교한 작업을 점점 더 많이 수행할 수 있게 됩니다. 예를 들면 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;자동으로 Zone 장애를 감지하고 라우팅합니다.&lt;/li&gt;
&lt;li&gt;글로벌 보안 및 라우팅 정책을 적용합니다.&lt;/li&gt;
&lt;li&gt;머신 러닝 및 신경망을 사용하여 DDoS 공격을 비롯한 트래픽 이상을 탐지하고 완화합니다.&lt;/li&gt;
&lt;li&gt;엔지니어가 전체 분산 시스템을 이해하고 작동할 수 있도록 중앙 집중식 UI 및 시각화를 제공합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;글로벌 로드 밸런싱을 가능하게 하려면 데이터 플레인으로 사용되는 로드 밸런서가 정교한 동적 구성 기능을 가지고 있어야 합니다. 이 항목에 대한 자세한 내용은 &lt;a href=&#34;https://medium.com/@mattklein123/the-universal-data-plane-api-d15cec7a&#34; target=&#34;_blank&#34;&gt;Envoy의 범용 데이터 플레인 API&lt;/a&gt; 및 &lt;a href=&#34;https://medium.com/@mattklein123/service-mesh-data-plane-vs-control-plane-2774e720f7fc&#34; target=&#34;_blank&#34;&gt;서비스 메시 데이터 플레인 대 컨트롤 플레인&lt;/a&gt;에 있는 저의 포스트를 참조하세요.&lt;/p&gt;

&lt;h2 id=&#34;하드웨어에서-소프트웨어로의-진화&#34;&gt;하드웨어에서 소프트웨어로의 진화&lt;/h2&gt;

&lt;p&gt;지금까지 이 포스트는 하드웨어와 소프트웨어를 갼략히 언급했으며, 주로 과거 L4 로드 밸런서 HA 페어와 관련된 내용이었습니다. 이 분야의 업계 동향은 어떨까요?&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I&amp;#39;ve seen the new OSI stack of eight layers of software. &lt;br&gt;I think it&amp;#39;s more like this: &lt;a href=&#34;https://t.co/6K84IJYGAi&#34;&gt;pic.twitter.com/6K84IJYGAi&lt;/a&gt;&lt;/p&gt;&amp;mdash; Brian Glas (@infosecdad) &lt;a href=&#34;https://twitter.com/infosecdad/status/888221481590816768?ref_src=twsrc%5Etfw&#34;&gt;July 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;소프트웨어의 8계층의 새로운 OSI 스택을 보았다.&lt;/p&gt;

&lt;p&gt;내 생각에 이게 더 맞는 것 같다:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 트윗은 유머러스한 과장이지만 여전히 트렌드를 잘 보여주고 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;역사적으로, 라우터와 로드 밸런싱 장치는 매우 비싼 독점 하드웨어로 제공되어 왔습니다.&lt;/li&gt;
&lt;li&gt;점차적으로 대부분의 독점적인 L3/L4 네트워킹 장치가 &lt;a href=&#34;http://www.linuxvirtualserver.org/software/ipvs.html&#34; target=&#34;_blank&#34;&gt;IPVS&lt;/a&gt;, &lt;a href=&#34;http://dpdk.org/&#34; target=&#34;_blank&#34;&gt;DPDK&lt;/a&gt; 및 &lt;a href=&#34;https://fd.io/&#34; target=&#34;_blank&#34;&gt;fd.io&lt;/a&gt;와 같은 프레임워크를 기반으로 구축된 범용 서버 하드웨어, 범용 NIC 및 특수 소프트웨어 솔루션으로 대체되고 있습니다. 5K 미만의 비용이 드는 최신 데이터 센터 시스템은 Linux를 사용하여 매우 작은 패킷과 DPDK를 사용하여 작성된 커스텀 유저스페이스 애플리케이션으로 80Gbps NIC를 쉽게 포화시킬 수 있습니다. 한편, 놀랄만한 총 대역폭과 패킷 전송 속도로 ECMP 라우팅을 수행할 수 있는 저렴하고 기본적인 라우터/스위치 ASIC는 범용 라우터로 패키지화되고 있습니다.&lt;/li&gt;
&lt;li&gt;NGINX, HAProxy, Envoy와 같은 정교한 L7 소프트웨어 로드 밸런싱 장치도 F5와 같은 벤더의 영역을 빠르게 이터레이션하며 잠식하고 있습니다. 따라서 L7 로드 밸런서도 범용 소프트웨어 솔루션을 향해 적극적으로 이동하고 있습니다.&lt;/li&gt;
&lt;li&gt;동시에, 업계 전반의 IaaS, CaaS 및 FaaS를 향한 움직임과 주요 클라우드 프로바이더에 의한 확산은 점점 더 소수의 엔지니어들만이 물리적 네트워크의 작동 방식을 이해하면 된다는 것을 의미합니다 (이들은 위의 &amp;ldquo;블랙매직&amp;rdquo;과 &amp;ldquo;더 이상 우리가 힘들게 알 필요가 없는 어떤 것&amp;rdquo;입니다).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;결론-및-로드-밸런싱의-미래&#34;&gt;결론 및 로드 밸런싱의 미래&lt;/h2&gt;

&lt;p&gt;요약하자면, 이 포스트의 주요 내용은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;로드 밸런서는 최신 분산 시스템의 핵심 구성 요소입니다.&lt;/li&gt;
&lt;li&gt;로드 밸런서에는 L4와 L7의 두 가지 일반 클래스가 있습니다.&lt;/li&gt;
&lt;li&gt;L4 및 L7 로드 밸런서는 모두 최신 아키텍처에 적합합니다.&lt;/li&gt;
&lt;li&gt;L4 로드 밸런서가 수평 확장 가능한 분산형 해싱 솔루션으로 이동하고 있습니다.&lt;/li&gt;
&lt;li&gt;L7 로드 밸런서는 동적 마이크로서비스 아키텍처의 확산으로 인해 최근에 많은 투자를 받고 있습니다.&lt;/li&gt;
&lt;li&gt;글로벌 로드 밸런싱 그리고 컨트롤 플레인과 데이터 플레인의 분리는 로드 밸런싱의 미래이며 향후 혁신 및 상업적 기회의 대부분을 발견할 수 있는 곳입니다.s&lt;/li&gt;
&lt;li&gt;업계에서는 네트워킹 솔루션을 위한 범용 OSS 하드웨어와 소프트웨어를 적극적으로 추진하고 있습니다. 저는 F5와 같은 기존의 로드 밸런싱 벤더가 우선 OSS 소프트웨어와 클라우드 벤더에 의해 교체될 것이라고 생각합니다. Arista/Cumulus/etc와 같은 전통적인 라우터/스위치 벤더는 온프레미스 구축이라는 커다란 탈주로가 있지만, 결국 퍼블릭 클라우드 공급업체와 자체 개발한 물리적 네트워크에 의해 이전될 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;종합적으로 저는 지금이 컴퓨터 네트워킹에 있어 매력적인 시기라고 생각합니다! 대부분의 시스템에서 OSS와 소프트웨어를 개발하려는 움직임은 이터레이션 속도를 몇 배의 규모로 높이고 있습니다. 뿐만 아니라, 분산 시스템이 &amp;ldquo;서버리스(serverless)&amp;rdquo; 패러다임을 통해 역동적인 발전을 계속함에 따라, 기본 네트워크와 로드 밸런싱 시스템의 정교함도 그만큼 발전해야할 필요가 있습니다.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>[번역] 파이썬 매직 메소드 (Python&#39;s Magic Methods)</title>
      <link>https://ziwon.github.io/post/python_magic_methods/</link>
      <pubDate>Mon, 30 Jan 2017 03:37:00 +0000</pubDate>
      <author>Philbert Yoon</author>
      <guid>https://ziwon.github.io/post/python_magic_methods/</guid>
      <description></description>
      
      <content>

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/RafeKettler/magicmethods&#34; target=&#34;_blank&#34;&gt;A guide to Python&amp;rsquo;s magic methods&lt;/a&gt;를 번역한 문서입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;서론&#34;&gt;서론&lt;/h2&gt;

&lt;p&gt;이 가이드는 몇 달 간의 블로그 게시물의 정점입니다. 주제는 &lt;strong&gt;매직 메소드(magic methods)&lt;/strong&gt; 입니다.&lt;/p&gt;

&lt;p&gt;매직 메소드가 뭘까요? 이들은 객체지향 파이썬의 모든 것입니다. 클래스에 &amp;ldquo;마법&amp;rdquo;을 추가하기 위해 정의할 수 있는 특수한 메소드입니다. 항상 두 개의 밑줄로 둘러싸입니다. (예: &lt;code&gt;__init__&lt;/code&gt; 또는 &lt;code&gt;__lt__&lt;/code&gt;) 또한 필요한 만큼 문서화되지 않았습니다. 파이썬에 대한 모든 매직 메소드가 파이썬 문서의 동일한 섹션에 있지만, 흩어져 있고, 느슨하게 구성되어 있습니다. 섹션에서 예제는 거의 찾기 어렵습니다. (그리고 모두 지루한 문법 설명과 함께 언어 레퍼런스에 자세히 설명되어 있으므로 잘 설계되어 있을 것입니다.)&lt;/p&gt;

&lt;p&gt;그래서, 파이썬의 문서에서 제가 인지한 바를 수정하기 위해 저는 파이썬의 매직 메소드에 대한 좀 더 일반화된 예제 중심의 문서를 제공하기 시작했습니다. 저는 주간 블로그 포스트로 시작했는데, 이제 그 연재가 끝나서 이 가이드를 만들었습니다.&lt;/p&gt;

&lt;p&gt;여러분 마음에 들었으면 좋겠습니다. 이를 튜토리얼, 리프레셔 또는 레퍼런스로 사용하시길 바랍니다. 왜냐하면, 파이썬의 매직 메소드에 대한 사용자 친화적인 가이드로 만들었기 때문입니다.&lt;/p&gt;

&lt;h2 id=&#34;생성-및-초기화&#34;&gt;생성 및 초기화&lt;/h2&gt;

&lt;p&gt;가장 기본적인 매직 메소드인 &lt;code&gt;__init__&lt;/code&gt;는 모두 알고 있습니다. 우리가 객체의 초기화 동작을 정의할 수 있는 방법이죠. 그러나 &lt;code&gt;x = SomeClass()&lt;/code&gt; 를 호출하면 &lt;code&gt;__init__&lt;/code&gt;이 먼저 호출되지 않습니다. 사실, 이는 &lt;code&gt;__new__&lt;/code&gt;라는 메소드로, 실제로 인스턴스를 생성한 다음 생성시에 인수를 초기화 프로그램에 전달합니다. 객체 수명의 다른 끝에는 &lt;code&gt;__del__&lt;/code&gt;이 있습니다. 이 3가지 방법을 자세히 살펴 보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__new__(cls, [...)&lt;/code&gt; : &lt;code&gt;__new__&lt;/code&gt;은 객체의 인스턴스화에서 호출되는 첫 번째 메소드입니다. 클래스를 취한 다음 &lt;code&gt;__init__&lt;/code&gt;에 전달할 다른 인수를 취합니다. &lt;code&gt;__new__&lt;/code&gt;는 거의 사용되지 않지만 튜플이나 문자열과 같은 불변 유형을 서브 클래싱하는 경우에는 그 용도가 있습니다. 아주 유용하지는 않기 때문에 &lt;code&gt;__new__&lt;/code&gt;에 대해 너무 자세히 설명하고 싶지는 않지만
&lt;a href=&#34;http://www.python.org/download/releases/2.2/descrintro/#__new__&#34; target=&#34;_blank&#34;&gt;파이썬 문서&lt;/a&gt;에서 자세히 다루고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__init__(self, [...)&lt;/code&gt; : 클래스 이니셜라이저. 기본 생성자가 호출된 것과 관계없이 전달됩니다. (예를 들어, x = SomeClass (10, &amp;lsquo;foo&amp;rsquo;)를 호출하면 &lt;code&gt;__init__&lt;/code&gt;은 인수로 &amp;lsquo;10&amp;rsquo;과 &amp;lsquo;foo&amp;rsquo;를 전달합니다.) &lt;code&gt;__init__&lt;/code&gt;은 파이썬 클래스
정의에서 거의 보편적으로 사용됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__del__(self)&lt;/code&gt; : &lt;code&gt;__new__&lt;/code&gt;와 &lt;code&gt;__init__&lt;/code&gt;이 객체의 생성자를 구성한다면, &lt;code&gt;__del__&lt;/code&gt;이 소멸자입니다. &lt;code&gt;del x&lt;/code&gt;에 대한 동작을 구현하지 않기 때문에 코드는 &lt;code&gt;x.__del__()&lt;/code&gt;로 변환되지 않습니다. 오히려, 객체가 가비지 수집되는 경우에 대한 동작을 정의합니다. 소켓이나 파일 객체와 같이 삭제시 추가 정리가 필요할 수 있는 객체에 매우 유용할 수 있습니다. 그러나 인터프리터가 종료될 때 개체가 아직 살아 있다면 &lt;code&gt;__del__&lt;/code&gt;이 실행된다는 보장이 없으므로 주의하시길 바립니다. 따라서 &lt;code&gt;__del__&lt;/code&gt;은 좋은 코딩 방법의 대안으로 사용할 수 없습니다 (예: 작업이 끝나면 항상 연결을 닫는 등). 사실, &lt;code&gt;__del__&lt;/code&gt;은 불리한 환경 때문에 거의 절대 사용되어서는 안 됩니다. 그러니 주의해서 사용하십시오!&lt;/p&gt;

&lt;p&gt;정리해보겠습니다. 다음은 &lt;code&gt;__init__&lt;/code&gt;와 &lt;code&gt;__del__&lt;/code&gt;의 실제 예제입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os.path&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FileObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;파일 삭제될 때 파일 닫기를 보장하는 파일 객체에 대한 래퍼&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sample.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 읽기 쓰기 모드로 파일 경로의 파일을 엽니다.&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;r+&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__del__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;del&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;사용자-정의-클래스에서-연산자-만들기&#34;&gt;사용자 정의 클래스에서 연산자 만들기&lt;/h2&gt;

&lt;p&gt;파이썬의 매직 메소드를 사용하는 가장 큰 장점 중 하나는 객체가 내장 타입처럼 동작하도록 하는 간단한 방법을 제공한다는 것입니다. 즉, 기본 운영자를 수행하는 경우 보기 흉하고, 직관적이지 않은 비표준 방식을 피할 수 있습니다. 일부 언어에서는 다음과 같이하는 것이 일반적입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other_instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# do something&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;물론 파이썬에서도 이 작업을 수행할 수는 있지만 혼란이 일어나고 불필요하게 자세한 정보가 표시됩니다. 다른 라이브러리는 같은 작업에 대해 다른 이름을 사용할 수 있으므로, 클라이언트가 필요한 것보다 더 많은 일을 합니다. 그러나 매직 매소드의 힘으로 우리는 하나의 메소드(이 경우에는 &lt;code&gt;__eq__&lt;/code&gt;)를 정의할 수 있으며 대신에 우리가 의미하는 바를 말할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other_instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#do something&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이는 매직 매소드 힘의 일부입니다. 이들 대다수는 연산자에게 의미를 정의할 수 있도록 해서, 내장 타입인 것처럼 클래스에서 이들을 사용할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&#34;매직-매소드-비교&#34;&gt;매직 매소드 비교&lt;/h3&gt;

&lt;p&gt;파이썬에는 연산자를 사용하여 객체 간에 직관적인 비교를 구현하도록 설계된 수많은 매직 메소드가 있습니다. 이상한 메소드 호출이 아닙니다. 또한 객체 비교를 위한 기본 파이썬 동작을 재정의하는 방법을 제공합니다 (참조 기준). 다음은 메소드의 목록과 메소드가 하는 일입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__cmp__(self, other)&lt;/code&gt; : &lt;code&gt;__cmp__&lt;/code&gt;는 비교 매직 메소드의 가장 기본입니다. 모든 비교 연산자 (&amp;lt;, ==,! = 등)에 대해 실제로 동작을 구현하지만 원하는대로 수행되지 못할 수 있습니다 (예를 들어, 한 인스턴스가 다른 인스턴스와 동일한 지 여부가 하나의 기준에 의해 결정되고 인스턴스가 다른 인스턴스보다 큰지 아닌지가 다른 것으로 결정되는 경우) &lt;code&gt;__cmp__&lt;/code&gt;은 &lt;code&gt;self &amp;lt; other&lt;/code&gt;이면 음수를 반환하고 &lt;code&gt;self == other&lt;/code&gt;이면 0을 반환하고 &lt;code&gt;self &amp;gt; other&lt;/code&gt;이면 양수를 반환해야합니다. 일반적으로 한 번에 정의할 필요없이 각 비교를 정의하는 것이 가장 좋지만, &lt;code&gt;__cmp__&lt;/code&gt;은 비슷한 기준으로 구현된 모든 비교가 필요할 때 반복을 저장하고 명확성을 향상시키는 좋은 방법이 될 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__eq__(self, other)&lt;/code&gt; : 항등 연산자, &lt;code&gt;==&lt;/code&gt; 에 대한 동작을 정의합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__ne__(self, other)&lt;/code&gt; : 부등호 연산자, &lt;code&gt;!=&lt;/code&gt; 에 대한 동작을 정의합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__lt__(self, other)&lt;/code&gt; : 보다 작음 연산자, &lt;code&gt;&amp;lt;&lt;/code&gt; 에 대한 동작을 정의합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__gt__(self, other)&lt;/code&gt; : 보다 큼 연산자, &lt;code&gt;&amp;gt;&lt;/code&gt; 에 대한 동작을 정의합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__le__(self, other)&lt;/code&gt; : 보다 작거나 같음 연산자, &lt;code&gt;&amp;lt;=&lt;/code&gt; 에 대한 동작을 정의합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__ge__(self, other)&lt;/code&gt; : 크거나 같음 연산자, &lt;code&gt;&amp;gt;=&lt;/code&gt; 에 대한 동작을 정의합니다.&lt;/p&gt;

&lt;p&gt;예를 들어, 단어를 모델링 하는 클래스를 생각해보세요. 문자열에 대한 비교 동작인 단어를 사전식으로 (알파벳 기준) 비교할 수도 있지만, 길이 또는 음절의 수와 같이 다른 기준에 따라 비교할 수도 있습니다. 예제에서는 길이를 비교합니다. 구현 방법은 다음과 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;단어에 대한 클래스로, 단어 길이에 따라 비교를 정의합니다.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# __new__ 를 사용해야 합니다. 왜냐하면 str은 불변형이므로,&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 초기에 (생성시에) 초기화해야 합니다.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Value contains spaces. Truncating to first space.&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Word는 이제 첫 번째 공백 앞에 모든 문자가 있습니다.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__gt__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__lt__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__ge__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__le__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 &lt;code&gt;Word(&#39;foo&#39;)&lt;/code&gt;와 &lt;code&gt;Word(&#39;bar&#39;)&lt;/code&gt;를 사용하여 두 단어를 만들고 길이에 따라 비교할 수 있습니다. 그러나 &lt;code&gt;__eq__&lt;/code&gt; 및 &lt;code&gt;__ne__&lt;/code&gt;은 정의하지 않았습니다. 이는 &lt;code&gt;Word(&#39;foo&#39;) == Word (&#39;bar&#39;)&lt;/code&gt;가 참으로 평가된다는 이상한 행동으로 이어질 수 있기 때문입니다. 길이에 기반한 동일성을 테스트하는 것은 의미가 없으므로 &lt;code&gt;str&lt;/code&gt;의 동일성 구현에 의존합니다.&lt;/p&gt;

&lt;p&gt;이제 다채로운 비교를 획득하기 위하여 모든 비교 매직 메소드를 정의할 필요가 없다는 것을 알아두면 좋을 것입니다. 표준 라이브러리는 &lt;code&gt;functools&lt;/code&gt; 모듈에 클래스 장식자를 제공하여 여러분이 &lt;code&gt;__eq__&lt;/code&gt; 및 기타 (예 : &lt;code&gt;__gt__&lt;/code&gt;, &lt;code&gt;__lt__&lt;/code&gt; 등) 만 정의하면, 모든 다양한 비교 방법을 정의해줍니다. 이 기능은 파이썬 2.7에서만 사용할 수 있지만 여러분에게 많은 시간과 노력을 절약할 기회를 줍니다. 여러분의 클래스 정의 위에 &lt;code&gt;@total_ordering&lt;/code&gt;을 두어 이를 사용할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&#34;숫자-매직-메소드&#34;&gt;숫자 매직 메소드&lt;/h3&gt;

&lt;p&gt;비교 연산자와 비교될 클래스의 인스턴스에 대한 방법을 만들 수 있는 것처럼 숫자 연산자에 대한 동작을 정의할 수 있습니다. 좌석 벨트 버클, 사람들 &amp;hellip; 등 숫자들은 많이 있습니다. 조직화하기 위해 숫자 매직 메소드를 단항 연산자, 일반 산술 연산자, 리플렉트 산술 연산자 (자세한 내용은 나중에 설명함), 추가 할당 및 유형 변환 등 다섯 가지 범주로 나눴습니다.&lt;/p&gt;

&lt;h4 id=&#34;단항-연산자와-함수&#34;&gt;단항 연산자와 함수&lt;/h4&gt;

&lt;p&gt;단항 연산자 및 함수는 부정, 절댓값 등 하나의 피연산자만을 갖습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__pos__(self)&lt;/code&gt; : 단항 긍정 (예 : &lt;code&gt;+some_object&lt;/code&gt;)에 대한 동작을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__neg__(self)&lt;/code&gt; : 부정 (예 : &lt;code&gt;-some_object&lt;/code&gt;)에 대한 동작을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__abs__(self)&lt;/code&gt; : 내장된 &lt;code&gt;abs()&lt;/code&gt; 함수의 동작을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__invert__(self)&lt;/code&gt; : &lt;code&gt;~&lt;/code&gt; 연산자를 사용하여 반전에 대한 동작을 구현합니다. 이 작업에 대한 설명은 &lt;a href=&#34;http://en.wikipedia.org/wiki/Bitwise_operation#NOT&#34; target=&#34;_blank&#34;&gt;비트 연산에 대한 Wikipedia 기사&lt;/a&gt;를 참조하세요.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__round__(self, n)&lt;/code&gt; : 내장된 &lt;code&gt;round()&lt;/code&gt; 함수의 동작을 구현합니다. &lt;code&gt;n&lt;/code&gt;은 반올림할 소수 자릿수입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__floor__(self)&lt;/code&gt; : &lt;code&gt;math.floor()&lt;/code&gt;에 대한 동작을 구현합니다. 즉, 가장 가까운 정수로 반올림합니다.&lt;/p&gt;

&lt;h4 id=&#34;일반-산술-연산자&#34;&gt;일반 산술 연산자&lt;/h4&gt;

&lt;p&gt;이제 우리는 전형적인 바이너리 연산자 +, -, * 등을 다룹니다. 이들은 대부분 꽤 자명합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__add__(self, other)&lt;/code&gt; : 덧셈을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__sub__(self, other)&lt;/code&gt; : 뺄셈을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__mul__(self, other)&lt;/code&gt; : 곱셈을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__floordiv__(self, other)&lt;/code&gt; : &lt;code&gt;//&lt;/code&gt; 연산자를 사용하여 정수 나눗셈을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__div__(self, other)&lt;/code&gt; : &lt;code&gt;/&lt;/code&gt; 연산자를 사용하여 나눗셈을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__truediv__(self, other)&lt;/code&gt; : 진짜 &lt;em&gt;정확한&lt;/em&gt; 나눗셈을 구현합니다. 이것은 &lt;code&gt;__future__ import division&lt;/code&gt; 이 유효한 경우에만 동작합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__mod__(self, other)&lt;/code&gt; : &lt;code&gt;%&lt;/code&gt; 연산자를 사용하여 나머지를 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__divmod__(self, other)&lt;/code&gt; : &lt;code&gt;divmod()&lt;/code&gt; 내장 함수를 사용하여 &lt;code&gt;long&lt;/code&gt; 나눗셈을 위한 동작을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__pow__&lt;/code&gt; : &lt;code&gt;**&lt;/code&gt; 연산자를 사용하여 지수에 대한 동작을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__lshift__(self, other)&lt;/code&gt; : &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 연산자를 사용하여 왼쪽 비트 시프트를 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__rshift__(self, other)&lt;/code&gt; : &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 연산자를 사용하여 오른쪽 비트 시프트를 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__and__(self, other)&lt;/code&gt; : &lt;code&gt;&amp;amp;&lt;/code&gt; 연산자를 사용하여 비트간 논리곱을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__or__(self, other)&lt;/code&gt; : &lt;code&gt;|&lt;/code&gt; 연산자를 사용하여 비트간 논리합을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__xo__(self, other)&lt;/code&gt; : &lt;code&gt;^&lt;/code&gt; 연산자를 사용하여 비트간 배타적 논리합을 구현합니다.&lt;/p&gt;

&lt;h4 id=&#34;뒤집힌-산술-연산자&#34;&gt;뒤집힌 산술 연산자&lt;/h4&gt;

&lt;p&gt;여러분은 제가 어떻게 뒤집힌 산술 연산자 (Reflected arithmetic operators)라는 개념에 도달할 것인지 아시나요? 여러분 중 일부는 크고 무서운 외래 개념이라고 생각할 수 있습니다. 사실, 아주 간단합니다. 다음은 예제입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;some_object&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이는 일반적인 덧셈입니다. 뒤집힌 동치는 다음과 같이 피연산자가 전환된 경우를 제외하고는 같은 것입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;some_object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;따라서 이러한 모든 매직 메소드는 other를 첫 번째 피연산자로 사용하고, self를 두 번째 피연산자로 사용하는 것 외에는 일반적인 동치에 해당하는 것들과 같은 작업을 수행합니다. 대부분의 경우 뒤집힌 결과는 일반적인 것과 동일하므로 &lt;code&gt;__add__&lt;/code&gt;를 호출하는 것으로 &lt;code&gt;__radd__&lt;/code&gt;를 정의하는 결과가 발생할 수 있습니다. 연산자의 왼쪽에 있는 객체 (예제에서 other)는 뒤집히지 않은 버전의 연산자에 대해 정의하거나 반환하지 않아야 합니다 (또는 NotImplemented를 반환). 예를 들어, 이 예에서 &lt;code&gt;some_object.__ radd__&lt;/code&gt;은 &lt;code&gt;__add__&lt;/code&gt; 을 정의하지 않은 경우에만 호출됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__radd__(self, other)&lt;/code&gt; : 뒤집힌 덧셈을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__rsub__(self, other)&lt;/code&gt; : 뒤집힌 뺄셈을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__rmul__(self, other)&lt;/code&gt; : 뒤집힌 곱셈을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__rfloordiv__(self, other)&lt;/code&gt; : &lt;code&gt;//&lt;/code&gt; 연산자를 사용하여 뒤집힌 정수 나눗셈을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__rdiv__(self, other)&lt;/code&gt; : &lt;code&gt;/&lt;/code&gt; 연산자를 사용하여 뒤집힌 나눗셈을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__rtruediv__(self, other)&lt;/code&gt; : 뒤집힌 정확한 나눗셈을 구현합니다. 이것은 &lt;code&gt;__future__ import division&lt;/code&gt; 이 유효한 경우에만 작동합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__rmod__(self, other)&lt;/code&gt; : &lt;code&gt;%&lt;/code&gt; 연산자를 사용하여 뒤집힌 나머지를 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__rdivmod__(self, other)&lt;/code&gt; : &lt;code&gt;divmod(other, self)&lt;/code&gt;가 호출될 때 &lt;code&gt;divmod()&lt;/code&gt; 내장 함수를 사용하여 long 나눗셈에 대한 동작을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__rpow__&lt;/code&gt; : &lt;code&gt;**&lt;/code&gt; 연산자를 사용하여 뒤집힌 지수에 대한 동작을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__rlshift__(self, other)&lt;/code&gt; : &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 연산자를 사용하여 뒤집힌 왼쪽 비트 시프트를 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__rrshift__(self, other)&lt;/code&gt; : &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 연산자를 사용하여 뒤집힌 오른쪽 비트 시프트를 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__rand__(self, other)&lt;/code&gt; : &lt;code&gt;&amp;amp;&lt;/code&gt; 연산자를 사용하여 뒤집힌 비트간 논리곱을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__ror__(self, other)&lt;/code&gt; : &lt;code&gt;|&lt;/code&gt; 연산자를 사용하여 뒤집힌 비트간 논리합을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__rxor__(self, other)&lt;/code&gt; : &lt;code&gt;^&lt;/code&gt; 연산자를 사용하여 뒤집힌 비트간 배타논리합을 구현합니다&lt;/p&gt;

&lt;h4 id=&#34;증가된-할당&#34;&gt;증가된 할당&lt;/h4&gt;

&lt;p&gt;파이썬은 또한 커스텀 비헤이비어가 증가된 할당(augmented assignment)을 위해 정의될 수 있도록 하는 다양한 방법을 가지고 있습니다. 여러분은 아마도 이미 증가된 할당에 익숙할 것입니다. 이는 &amp;ldquo;일반적인&amp;rdquo; 연산자와 할당을 결합합니다. 아직도 제가 무슨 소린지 하는지 모르겠다면, 다음은 그 예제입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 다른 표현으로 x = x + 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 메소드들 각각은 왼쪽에 있는 변수가 할당되어야 하는 값을 반환해야합니다 (예를 들어, &lt;code&gt;+= b&lt;/code&gt; 일 경우 &lt;code&gt;__iadd__&lt;/code&gt;는 &lt;code&gt;a&lt;/code&gt;에 지정된 &lt;code&gt;+b&lt;/code&gt;를 반환할 수 있습니다). 다음은 목록입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__iadd__(self, other)&lt;/code&gt; : 할당된 덧셈을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__isub__(self, other)&lt;/code&gt; : 할당된 뺄셈을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__imul__(self, other)&lt;/code&gt; : 할당된 곱셈을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__ifloordiv__(self, other)&lt;/code&gt; : &lt;code&gt;//&lt;/code&gt; 연산자를 사용하여 할당된 정수 나눗셈을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__idiv__(self, other)&lt;/code&gt; : &lt;code&gt;/=&lt;/code&gt; 연산자를 사용하여 할당된 나눗셈를 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__itruediv__(self, other)&lt;/code&gt; : 할당된 정확한 나눗셈을 구현합니다. 이것은 &lt;code&gt;__future__ import division&lt;/code&gt; 이 유효한 경우에만 작동합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__imod__(self, other)&lt;/code&gt; : &lt;code&gt;%=&lt;/code&gt; 연산자를 사용하여 할당된 나머지를 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__ipow__&lt;/code&gt; : &lt;code&gt;**=&lt;/code&gt; 연산자를 사용하여 할당된 지수의 동작을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__ilshift__(self, other)&lt;/code&gt; : &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; 연산자를 사용하여 할당된 왼쪽 비트 시프트를 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__irshift__(self, other)&lt;/code&gt; : &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 연산자를 사용하여 할당된 오른쪽 비트 시프트를 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__iand__(self, other)&lt;/code&gt; : &lt;code&gt;&amp;amp;=&lt;/code&gt; 연산자를 사용하여 할당된 비트간 논리곱을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__ior__(self, other)&lt;/code&gt; : &lt;code&gt;|=&lt;/code&gt; 연산자를 사용하여 할당된 비트간 논리합을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__ixor__(self, other)&lt;/code&gt; : &lt;code&gt;^=&lt;/code&gt; 연산자를 사용하여 할당된 비트간 배타논리합을 구현합니다.&lt;/p&gt;

&lt;h4 id=&#34;타입-변환-매직-메소드&#34;&gt;타입 변환 매직 메소드&lt;/h4&gt;

&lt;p&gt;파이썬은 또한 &lt;code&gt;float()&lt;/code&gt; 같은 내장 타입 변환 함수의 동작을 구현하도록 설계된 일련의 매직 메소드를 가지고 있습니다. 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__int__(self)&lt;/code&gt; : int로 타입 변환을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__long__(self)&lt;/code&gt; : long으로 타입 변환을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__float__(self)&lt;/code&gt; : float로 타입 변환을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__complex__(self)&lt;/code&gt; : complex로 타입 변환을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__oct__(self)&lt;/code&gt; : 8진수로 타입 변환을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__hex__(self)&lt;/code&gt; : 16진수로 타입 변환을 구현합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__index__(self)&lt;/code&gt; : 슬라이스 표현식에서 객체가 사용될 때 타입 변환을 int로 구현합니다. 슬라이싱에 사용할 수 있는 사용자 지정 숫자 타입을 정의하는 경우, &lt;code&gt;__index__&lt;/code&gt;를 정의해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__trunc__(self)&lt;/code&gt; : &lt;code&gt;math.trunc(self)&lt;/code&gt; 가 호출될 때 호출됩니다. &lt;code&gt;__trunc__&lt;/code&gt;는 &lt;code&gt;self&lt;/code&gt;의 값을 정수형 (대개 long)으로 반환해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__coerce__(self, other)&lt;/code&gt; : 혼합 모드 산술을 구현하는 메소드. 타입 변환이 불가능할 경우 &lt;code&gt;__coerce__&lt;/code&gt;은 &lt;code&gt;None&lt;/code&gt;을 반환해야 합니다. 그렇지 않으면 동일한 타입을 갖도록 조작된 &lt;code&gt;self&lt;/code&gt;와 &lt;code&gt;other&lt;/code&gt;의 쌍 (2-tuple)을 반환해야 합니다.&lt;/p&gt;

&lt;h2 id=&#34;클래스-표현하기&#34;&gt;클래스 표현하기&lt;/h2&gt;

&lt;p&gt;클래스를 문자열로 표현하는 것이 종종 유용합니다. 파이썬에는 클래스 정의에서 구현할 수 있는 몇 가지 메소드가 있으며, 클래스의 표현을 반환하는 내장 함수의 작동 방식을 사용자 정의합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__str__(self)&lt;/code&gt; : 클래스의 인스턴스에서 &lt;code&gt;str()&lt;/code&gt;이 호출될 때의 동작을 정의합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__repr__(self)&lt;/code&gt; : 클래스의 인스턴스에서 &lt;code&gt;repr()&lt;/code&gt;이 호출될 때의 동작을 정의합니다. &lt;code&gt;str()&lt;/code&gt;과 &lt;code&gt;repr()&lt;/code&gt; 사이의 주요 차이점은 만들어진 대상입니다. &lt;code&gt;repr()&lt;/code&gt;은 주로 기계가 읽을 수 있는 출력(대부분의 경우, 유효한 파이썬 코드일 수도 있습니다)을 생성하기 위한 것이며, 반면에 &lt;code&gt;str()&lt;/code&gt;은 사람이 읽을 수 있도록 만들어졌습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__unicode__(self)&lt;/code&gt; : 클래스의 인스턴스에서 &lt;code&gt;unicode()&lt;/code&gt;가 호출될 때의 동작을 정의합니다. &lt;code&gt;unicode()&lt;/code&gt;는 &lt;code&gt;str()&lt;/code&gt;과 비슷하지만 유니코드 문자열을 반환합니다. 주의하십시오 : 클라이언트가 클래스의 인스턴스에서 &lt;code&gt;str()&lt;/code&gt;을 호출하고 &lt;code&gt;__unicode__()&lt;/code&gt; 만 정의한 경우 작동하지 않습니다. 누군가 유니 코드를 사치스럽게 사용하지 못하는 경우를 대비하여 항상 &lt;code&gt;__str__()&lt;/code&gt;을 정의해야합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__format__(self, formatstr)&lt;/code&gt; : 클래스의 인스턴스가 새로운 스타일 문자열 포맷으로 사용될 때의 동작을 정의합니다. 예를 들어 &lt;code&gt;&amp;quot;Hello, {0 : abc}!&amp;quot;.format(a)&lt;/code&gt;은 &lt;code&gt;a.__format__(&amp;quot;abc&amp;quot;)&lt;/code&gt;를 호출합니다. 특수 서식 옵션을 제공하려는 고유한 숫자 또는 문자열 유형을 정의할 때 유용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__hash__(self)&lt;/code&gt; : 클래스의 인스턴스에서 &lt;code&gt;hash()&lt;/code&gt;가 호출될 때의 동작을 정의합니다. 이 메소드는 정수를 반환해야 하며 그 결과는 사전에서 빠른 키 비교에 사용됩니다. 보통 &lt;code&gt;__eq__&lt;/code&gt;도 구현해야 함을 주의하십시오. &lt;code&gt;a == b&lt;/code&gt;는 &lt;code&gt;hash (a) == hash (b)&lt;/code&gt;를 의미한다는 규칙을 따릅니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__nonzero__(self)&lt;/code&gt; : 클래스의 인스턴스에서 &lt;code&gt;bool()&lt;/code&gt;이 호출될 때의 동작을 정의합니다. 인스턴스를 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt;로 간주할지에 따라 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt;를 반환해야합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__dir__(self)&lt;/code&gt; : 클래스의 인스턴스에서 &lt;code&gt;dir()&lt;/code&gt;이 호출 될 때의 동작을 정의합니다. 이 메소드는 사용자의 속성 목록을 반환해야 합니다. 일반적으로 &lt;code&gt;__dir__&lt;/code&gt;을 구현하는 것은 불필요하지만 &lt;code&gt;__getattr__&lt;/code&gt; 또는 &lt;code&gt;__getattribute__&lt;/code&gt; (다음 섹션 참조)를 재정의하거나 그렇지 않으면 동적으로 속성을 생성하는 경우 클래스를 대화식으로 사용하는 것이 매우 중요할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__sizeof__(self)&lt;/code&gt; : 클래스의 인스턴스에서 &lt;code&gt;sys.getsizeof()&lt;/code&gt;가 호출될 때의 동작을 정의합니다. 이 메소드는 객체의 크기를 바이트 단위로 반환해야 합니다. 이것은 일반적으로 C확장으로 구현된 Python 클래스에 더 유용하지만, 이를 인식하는 데 도움이됩니다.&lt;/p&gt;

&lt;p&gt;우리는 매직 메소드 가이드의 지루하고 (그리고 예제가 없는) 부분으로 끝내고 있습니다. 이제는 좀 더 기본적인 매직 메소드에 대해 살펴 보았으니 이제는 더 고급 자료로 이동할 때입니다.&lt;/p&gt;

&lt;h2 id=&#34;속성-접근-제어하기&#34;&gt;속성 접근 제어하기&lt;/h2&gt;

&lt;p&gt;다른 언어로부터 파이썬에 온 많은 사람들은 클래스에 대한 진정한 캡슐화가 부족하다고 불평합니다. 즉, 공용 &lt;code&gt;getter&lt;/code&gt; 및 &lt;code&gt;setter&lt;/code&gt; 를 사용하여 개인 속성을 정의할 수 있는 방법이 없습니다. 이는 사실과 다릅니다. 파이썬은 메소드나 필드에 대한 명시적 변경자 대신 &amp;ldquo;매직&amp;rdquo;을 통해 많은 양의 캡슐화를 그냥 수행한다는  것입니다. 보세요:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__getattr__(self, name)&lt;/code&gt; : 사용자가 존재하지 않는 속성에 액세스하려고 시도할 때의 행위를 정의할 수 있습니다. 이는 일반적인 맞춤법 오류를 포착하고 리다이렉트하고, 더 이상 사용되지 않는 속성 (원하는 경우 해당 속성을 계산하고 반환하도록 선택할 수 있음) 사용에 대한 경고를 제공하거나, &lt;code&gt;AttributeError&lt;/code&gt;를 손쉽게 전달할 때 유용할 수 있습니다. 그러나 존재하지 않는 속성에 액세스할 때만 호출되므로 실제 캡슐화 솔루션이 아닙니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__setattr__(self, name, value)&lt;/code&gt; : &lt;code&gt;__getattr__&lt;/code&gt;과 달리 &lt;code&gt;__setattr__&lt;/code&gt;은 캡슐화 솔루션입니다. 이 속성을 사용하면 특성값의 변경 사항에 대한 사용자 지정 규칙을 정의할 수 있으므로 해당 특성의 존재 여부에 관계없이 특성에 할당할 동작을 정의할 수 있습니다. 그러나 목록 끝에 있는 예제가 보여주고 있듯이 &lt;code&gt;__setattr__&lt;/code&gt;을 사용하는 방법에 주의를 기울여야합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__delattr__(self, name)&lt;/code&gt; : 이것은 &lt;code&gt;__setattr__&lt;/code&gt;과 완전히 동일하지만 속성을 설정하는 대신 삭제하는 것입니다. 무한 재귀(&lt;code&gt;__delattr__&lt;/code&gt; 구현시 &lt;code&gt;del self.name&lt;/code&gt;을 호출하면 무한 재귀가 발생합니다)를 방지하기 위해 &lt;code&gt;__setattr__&lt;/code&gt;과 동일한 예방 조치를 취해야합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__getattribute__(self, name)&lt;/code&gt; : &lt;code&gt;__getattribute__&lt;/code&gt;는 &lt;code&gt;__setattr__&lt;/code&gt; 및 &lt;code&gt;__delattr__&lt;/code&gt;와 매우 잘 어울립니다. 그러나, 사용하지 않는 것이 좋습니다. &lt;code&gt;__getattribute__&lt;/code&gt;는 새로운 스타일의 클래스에서만 사용할 수 있습니다. 모든 클래스는 최신 버전의 파이썬에서 새로운 스타일이며, 이전 버전에서는 객체를 서브클래싱하여 새로운 스타일을 만들 수 있습니다. 이 메소드는 속성값에 액세스할 때마다 규칙을 정의할 수 있습니다. 이 메소드는 그들의 공범자와 같이 비슷한 무한재귀 문제를 겪습니다. (이번에는 베이스 클래스의 &lt;code&gt;__getattribute__&lt;/code&gt; 메소드를 호출하여 이것을 방지합니다). 또한 &lt;code&gt;__getattr__&lt;/code&gt;에 대한 필요성을 제거합니다. &lt;code&gt;__getattribute__&lt;/code&gt;가 구현되면 명시적으로 호출되거나 &lt;code&gt;AttributeError&lt;/code&gt;가 발생하는 경우에만 호출됩니다. 이 메소드를 사용할 수는 있지만 (결국 사용자의 선택사항입니다.) 사용 사례가 적기 때문에 권장하지 않습니다. (값을 할당하는 것보다 값을 획득할 때 특별한 조작이 필요한 상황은 훨씬 더 드뭅니다. (역자: 보통 값을 set할 때보다 get할 때에는 별다른 코드가 필요없다는 뜻인 것 같아요) 왜냐하면 버그없이 구현하는 것은 정말로 어렵기 때문입니다.&lt;/p&gt;

&lt;p&gt;속성 액세스를 제어하는 메소드를 정의하는데, 쉽게 문제가 발생할 수 있습니다. 다음 예제를 고려하십시오.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__setattr__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 속성이 할당될 때마다 __setattr__()이 호출됩니다. 이것은 재귀입니다.&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 그래서 이것은 정말로 self.__setattr__(&amp;#39;name&amp;#39;, value)를 의미합니다. 이 메서드는&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 계속 호출하므로 이 재귀는 영원히 계속 충돌합니다&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__setattr__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__dict__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 클래스의 dict의 이름에 할당&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 커스텀 동작을 정의&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다시 말하지만, 파이썬의 매직 메소드는 믿을 수 없을 정도로 강력합니다. 그리고 큰 힘에는 큰 책임이 따릅니다. 코드가 손상되지 않도록 매직 메소드를 사용하는 제대로 된 방법을 아는 것이 중요합니다.&lt;/p&gt;

&lt;p&gt;자, 파이썬에서 사용자 정의 속성 액세스에 대해 배웠던 것은 무엇입니까? 속성 액세스는 가볍게 사용되지 않습니다. 사실 과도하게 강력하고 반직관적인 경향이 있습니다. 그러나 이들이 존재하는 이유는 특정한 가려움을 긁어주기 때문입니다. 파이썬은 나쁜 일을 불가능하게 만들려고 하지 않고 단지 어렵게 만듭니다. 자유가 가장 중요한 것인 것처럼, 여러분은 여러분이 원하는 것이라면 무엇이든지 할 수 있습니다. 다음은 특수한 속성 액세스 메소드의 예제입니다 (모든 클래스가 &lt;code&gt;__dict__&lt;/code&gt; 속성을 가지고 있지 않기 때문에 &lt;code&gt;super&lt;/code&gt;를 사용합니다).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AccessCounter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39; 값을 지니고 있고 액세스 카운터를 구현하는 클래스입니다.
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    값이 변경 될 때마다 카운터가 증가합니다.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AccessCounter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__setattr__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;counter&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AccessCounter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__setattr__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__setattr__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AccessCounter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__setattr__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;counter&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 무조건 이렇게 합니다.&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 다른 속성을 설정하지 않으려면, AttributeError 오류를 발생시킵니다.&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AccessCounter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__setattr__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__delattr__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AccessCounter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__setattr__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;counter&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AccessCounter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__delattr__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;커스텀-시퀀스-만들기&#34;&gt;커스텀 시퀀스 만들기&lt;/h2&gt;

&lt;p&gt;파이썬 클래스가 내장 시퀀스(dict, tuple, list, str 등)처럼 동작하도록 하는 방법은 여러 가지가 있습니다. 이들은 파이썬에서 제가 가장 좋아하는 매직 메소드입니다. 왜냐하면 여러분에게 주는 터무니없는 통제력과 마법처럼 배열의 (글로벌) 함수 전체를 여러분 클래스의 인스턴스에서 아름답게 동작하도록 만드는 방식 때문입니다. 그러나 우리가 좋은 물건에 관심을 가지기 전에, 요구사항에 관한 것들을 신속하게 말씀드리겠습니다.&lt;/p&gt;

&lt;h3 id=&#34;요구사항&#34;&gt;요구사항&lt;/h3&gt;

&lt;p&gt;자, 우리는 파이썬에서 자신의 시퀀스를 만드는 것에 대해 말하고 있는데, 프로토콜에 대해 이야기할 차례입니다. 프로토콜은 사용자가 정의해야 하는 일련의 메소드를 제공한다는 점에서 다른 언어의 인터페이스와 다소 유사합니다. 그러나 파이썬 프로토콜은 완전히 비공식적이므로 명시적 선언을 구현할 필요가 없습니다. 오히려 그들은 가이드 라인과 같습니다.&lt;/p&gt;

&lt;p&gt;왜 지금 프로토콜에 대해 이야기하고 있습니까? 파이썬에서 사용자 정의 컨테이너 타입을 구현하려면 이러한 프로토콜 중 일부가 필요합니다. 첫째, 불변 컨테이너를 정의하는 프로토콜이 있습니다. 불변 컨테이너를 만들기 위해서는 &lt;code&gt;__len__&lt;/code&gt;과 &lt;code&gt;__getitem__&lt;/code&gt;(나중에 자세히 설명)만 정의하면 됩니다. 가변 컨테이너 프로토콜에는 불변 컨테이너에 필요한 모든 항목과 &lt;code&gt;__setitem__&lt;/code&gt; 및 &lt;code&gt;__delitem__&lt;/code&gt;이 필요합니다. 마지막으로, 객체를 반복할 수 있게 하려면 반복자를 반환하는 &lt;code&gt;__iter__&lt;/code&gt;를 정의해야 합니다. 이 반복자는 반복자 프로토콜을 준수해야 합니다. 반복자에는 &lt;code&gt;__iter__(자체를 반환)&lt;/code&gt;와 &lt;code&gt;next&lt;/code&gt;라는 메서드가 있어야 합니다.&lt;/p&gt;

&lt;h3 id=&#34;컨테이너-뒤의-마법&#34;&gt;컨테이너 뒤의 마법&lt;/h3&gt;

&lt;p&gt;컨테이너가 사용하는 매직 메소드는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__len__(self)&lt;/code&gt; : 컨테이너의 길이를 반환합니다. 불변 및 가변 컨테이너에 대한 프로토콜의 일부입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__getitem__(self, key)&lt;/code&gt; : &lt;code&gt;self[key]&lt;/code&gt; 표기법을 사용하여 항목에 액세스할 때의 동작을 정의합니다. 이것은 가변 컨테이너 프로토콜과 불변 컨테이너 프로토콜의 일부이기도 합니다. 또한 적절한 예외를 발생시켜야합니다. 즉, 키의 유형이 잘못된 경우 &lt;code&gt;TypeError&lt;/code&gt;를, 키에 해당하는 값이 없는 경우 &lt;code&gt;KeyError&lt;/code&gt;를 지정하십시오.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__setitem__(self, key, value)&lt;/code&gt; : &lt;code&gt;self[nkey] = value&lt;/code&gt; 표기법을 사용하여 항목이 할당된 경우의 동작을 정의합니다. 이것은 가변 컨테이너 프로토콜의
일부입니다. 다시, &lt;code&gt;KeyError&lt;/code&gt;와 &lt;code&gt;TypeError&lt;/code&gt;를 적절히 발생시켜야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__delitem__(self, key)&lt;/code&gt; : 항목이 삭제 된 경우의 동작을 정의합니다(예 : &lt;code&gt;del self[key]&lt;/code&gt;). 이것은 가변 컨테이너 프로토콜의 일부일뿐입니다. 유효하지 않은 키가 사용되면 적절한 예외를 발생시켜야합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__iter__(self)&lt;/code&gt; : 컨테이너에 대한 반복자를 반환해야합니다. 반복자는 많은 컨텍스트에서 반환됩니다. 특히 &lt;code&gt;iter()&lt;/code&gt; 내장 함수와 &lt;code&gt;for x in container:&lt;/code&gt; 형태를 사용하여 컨테이너가 반복될 때 가장 많이 볼 수 있습니다. 반복자는 자체가 객체이며 자체를 반환하는 &lt;code&gt;__iter__&lt;/code&gt; 메서드를 정의해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__reversed__(self)&lt;/code&gt; : &lt;code&gt;reversed()&lt;/code&gt; 내장 함수의 동작을 구현하기 위해 호출됩니다. 시퀀스의 반대 버전을 반환해야합니다. 시퀀스 클래스가 &lt;code&gt;list&lt;/code&gt; 또는 &lt;code&gt;tuple&lt;/code&gt;과 같이 정렬된 경우에만 이를 구현하시길 바랍니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__contains__(self, item)&lt;/code&gt; : &lt;code&gt;__contains__&lt;/code&gt;는 &lt;code&gt;in&lt;/code&gt;과 &lt;code&gt;not in&lt;/code&gt;을 사용하여 멤버십 테스트에 대한 동작을 정의합니다. 이 부분이 시퀀스 프로토콜의 일부가 아닌 이유를 물으신다면, &lt;code&gt;__contains__&lt;/code&gt;가 정의되어 있지 않을 때, 파이썬은 그냥 시퀀스를 반복하며 찾고 있는 항목을 발견할 경우 &lt;code&gt;True&lt;/code&gt;를 반환하기 때문입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__missing__(self, key)&lt;/code&gt; : &lt;code&gt;__missing__&lt;/code&gt;은 &lt;code&gt;dict&lt;/code&gt;의 서브 클래스에서 사용됩니다. 사전에 존재하지 않는 키에 액세스 할 때마다 동작을 정의합니다 (예를 들어, 딕셔러니 &lt;code&gt;d&lt;/code&gt;가 있고 &lt;code&gt;&amp;quot;george&amp;quot;&lt;/code&gt;가 &lt;code&gt;dict&lt;/code&gt;에서 키가 아닌데 &lt;code&gt;d[&amp;quot;george&amp;quot;]&lt;/code&gt;라고 말한 경우, &lt;code&gt;d.__missing__(&amp;quot;george&amp;quot;)&lt;/code&gt;가 호출됩니다.&lt;/p&gt;

&lt;h3 id=&#34;예제&#34;&gt;예제&lt;/h3&gt;

&lt;p&gt;예를 들어, 다른 언어에서 익숙해질 수 있는 몇 가지 함수형 생성자를 구현하는 리스트를 살펴보겠습니다. (예, 하스켈)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FunctionalList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;head, tail, init, last, drop 및 take와 같은 추가적인 함수형 매직으로
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    목록을 래핑하는 클래스입니다.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;


    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__len__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__getitem__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# key의 타입이나 값이 유효하지 않은 경우,리스트의 값은 에러를 발생시킵니다.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__setitem__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__delitem__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;del&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__iter__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;iter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__reversed__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;reversed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 첫 번째 요소를 가져옵니다.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 첫 번째 이후의 모든 요소들을 가져옵니다.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 마지막 까지의 직전 요소들을 가져옵니다.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 마지막 요소를 가져옵니다.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;drop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 처음 n개를 제외한 모든 요소를 가져옵니다.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;take&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 처음 n개의 요소를 가져옵니다.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;바로 자신만의 시퀀스를 구현하는 방법에 대한 유용한 예제였습니다. 물론 사용자 정의 시퀀스의 보다 유용한 응용 프로그램이 있지만, &lt;code&gt;Counter&lt;/code&gt;, &lt;code&gt;OrderedDict&lt;/code&gt; 및 &lt;code&gt;NamedTuple&lt;/code&gt;과 같이 그들 중 일부는 표준 라이브러리 (배터리 포함)에 이미 구현되어 있습니다.&lt;/p&gt;

&lt;h2 id=&#34;리플렉션&#34;&gt;리플렉션&lt;/h2&gt;

&lt;p&gt;또한 여러분은 내장함수 &lt;code&gt;isinstance()&lt;/code&gt;와 &lt;code&gt;issubclass()&lt;/code&gt;로  매직 메서드를 정의하여 리플렉션이 동작하는 방식을 제어할 수 있습니다. 매직 메소드는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__instancecheck__(self, instance)&lt;/code&gt; : 인스턴스가 정의한 클래스의 인스턴스인지 확인합니다 (예 : &lt;code&gt;isinstance(instance, class)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__subclasscheck__(self, subclass)&lt;/code&gt; : 클래스가 정의한 클래스의 하위 클래스인지 확인합니다 (예 : &lt;code&gt;issubclass(subclass, class)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;이 매직 메소드의 유즈케이스는 미미해 보일 수 있으며, 이는 사실일 수 있습니다. 리플렉션 매직 메소드에 너무 많은 시간을 할애하지는 않겠지만, 파이썬과 파이썬에서 객체지향 프로그래밍에 대해 중요한 것을 반영합니다. 설령 필요하지 않더라도, 뭔가를 하기 위한 쉬운 방법이 거의 항상 있다는 것입니다. 이 매직 메소드는 유용하지 않을 수도 있지만, 필요할 때면 그들이 거기에 있다는 것을 알게 될 것입니다 (그리고 이 가이드를 읽었으니깐요!).&lt;/p&gt;

&lt;h2 id=&#34;호출-가능한-객체&#34;&gt;호출 가능한 객체&lt;/h2&gt;

&lt;p&gt;이미 알고 있겠지만, 파이썬에서는 함수가 일급객체입니다. 즉, 마치 다른 종류의 객체인 것처럼 함수와 메소드에 전달할 수 있습니다. 이것은 매우 강력한 기능입니다.&lt;/p&gt;

&lt;p&gt;파이썬의 특별한 매직 메소드는 클래스의 인스턴스가 마치 함수인 것처럼 동작하게 할 수 있으므로, 인스턴스를 &amp;ldquo;호출&amp;rdquo;할 수 있고 함수를 인수로 사용하는 함수에  인스턴스를 전달할 수 있습니다. 이것은 파이썬 프로그래밍을 훨씬 더 매력적으로 만드는 또 다른 강력한 기능입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__call__(self, [args ...])&lt;/code&gt; : 클래스의 인스턴스를 함수로 호출할 수 있습니다. 본질적으로 이것은 &lt;code&gt;x()&lt;/code&gt; 가 &lt;code&gt;x.__call__()&lt;/code&gt;과 동일하다는 것을 의미합니다. &lt;code&gt;__call__&lt;/code&gt;은 가변 개수의 인수(argument)를 취합니다. 이는 다른 함수처럼 &lt;code&gt;__call__&lt;/code&gt;을 정의한다는 것을 의미합니다. 그러나 원하는 많은 인수를 취합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__call__&lt;/code&gt;은 종종 상태를 변경해야 하는 인스턴스가 있는 클래스에서 유용할 수 있습니다. 객체의 상태를 변경하기 위해 인스턴스를 &amp;ldquo;호출&amp;rdquo;하는 것은 직관적이고 우아한 방법입니다. 예제는 비행기에서 엔티티의 위치를 나타내는 클래스일 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;엔티티를 나타내는 클래스입니다. 엔터티의 위치를 업데이트하기 위해 호출 가능함.&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    def __init__(self, size, x, y):
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;        self.x, self.y = x, y
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;        self.size = size
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    def __call__(self, x, y):
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;엔티티의&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;위치를&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;변경합니다&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;        self.x, self.y = x, y
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    # 생략...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;컨텍스트-매니저&#34;&gt;컨텍스트 매니저&lt;/h2&gt;

&lt;p&gt;파이썬 2.5에서는 코드 재사용을 위한 새로운 메소드와 새로운 키워드가 도입되었습니다. 바로 &lt;code&gt;with&lt;/code&gt; 문입니다. 컨텍스트 관리자의 개념은 파이썬에서 거의 새로운 개념이 아니었습니다 (이전에는 라이브러리 일부로 구현되었지만). &lt;a href=&#34;http://www.python.org/dev/peps/pep-0343/&#34; target=&#34;_blank&#34;&gt;PEP 343&lt;/a&gt;이 받아 들여지기 전에는 일급 언어 구성자로서의 지위를 얻지 못했습니다. 다음과 같이 여러분은 이전에 &lt;code&gt;with&lt;/code&gt; 문을 본 적이 있을 겁니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;foo.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# bar로 어떤 액션을 수행합니다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;객체 생성을 &lt;code&gt;with&lt;/code&gt; 문으로 래핑할 때, 객체에 대한 셋업 및 클린업 조치를 할 수 있게 됩니다. 컨텍스트 관리자의 동작은 두 가지 방법으로 결정됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__enter__(self)&lt;/code&gt; : with 문에 의해 생성된 블록의 시작 부분에서 컨텍스트 관리자가 수행해야 하는 작업을 정의합니다. &lt;code&gt;__enter__&lt;/code&gt;의 반환값은 &lt;code&gt;with&lt;/code&gt; 문의 대상 또는 &lt;code&gt;as&lt;/code&gt; 다음의 이름에 바인딩됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__exit__(self, exception_type, exception_value, traceback)&lt;/code&gt; : 블록이 실행(또는 종료) 된 후에 컨텍스트 관리자가 해야할 일을 정의합니다. 예외를 처리하거나, 클린업을 실행하거나 또는 블록의 실행 직후에 항상 수행되는 작업을 진행할 수 있습니다. 블록이 성공적으로 실행되면 &lt;code&gt;exception_type&lt;/code&gt;, &lt;code&gt;exception_value&lt;/code&gt; 및 &lt;code&gt;traceback&lt;/code&gt;은 &lt;code&gt;None&lt;/code&gt;이 됩니다. 그렇지 않으면 예외를 처리하도록 선택하거나 사용자가 처리하도록 선택할 수 있습니다. 여러분이 (별도로) 처리하고 싶다면, &lt;code&gt;__exit__&lt;/code&gt;이 모두 진술되고 완료된 후에 &lt;code&gt;True&lt;/code&gt;를 반환하는지 확인하세요. 컨텍스트 관리자가 예외를 처리하지 못하게 하려면 그냥 그대로 두면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__enter__&lt;/code&gt; 및 &lt;code&gt;__exit__&lt;/code&gt;은 셋업과 및 클린업에 대해 잘 정의되고 공통된 동작을 하는 특정 클래스에 유용할 수 있습니다. 이 메소드를 사용하여 다른 객체를 래핑하는 일반 컨텍스트 매니저를 작성할 수도 있습니다. 다음은 그 예제입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Closer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;with 문에서 close 메소드를 사용하여 객체를 자동으로 닫는 컨텍스트
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    관리자입니다.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__enter__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# bound to target&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exception_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exception_val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;trace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
           &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;AttributeError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 객체를 닫을 수 없는 경우입니다.&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Not closable.&amp;#39;&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 예외가 성공적으로 처리되었습니다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음은 FTP 연결을 사용한, 클로저 가능한 클로저의 예입니다 (클로저 가능한 소켓).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-pythonconsole&#34; data-lang=&#34;pythonconsole&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from magicmethods import Closer
&amp;gt;&amp;gt;&amp;gt; from ftplib import FTP
&amp;gt;&amp;gt;&amp;gt; with Closer(FTP(&amp;#39;ftp.somesite.com&amp;#39;)) as conn:
...     conn.dir()
...
# 길어서 출력은 생략
&amp;gt;&amp;gt;&amp;gt; conn.dir()
# 긴 AttributeError 메세지, 닫힌 연결은 사용할 수 없습니다.
&amp;gt;&amp;gt;&amp;gt; with Closer(int(5)) as i:
...     i += 1
...
Not closable.
&amp;gt;&amp;gt;&amp;gt; i
6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;래퍼가 적절하고 부적절한 사용을 어떻게 우아하게 처리하는지 보셨나요? 이것이 바로 컨텍스트 매니저와 매직 메소드의 힘입니다. 파이썬 표준 라이브러리에는 거의 같은 작업을 하는, &lt;code&gt;contextlib.closing()&lt;/code&gt;라는 컨텍스트 매니저를 지닌 &lt;code&gt;contextlib&lt;/code&gt;가 포함되어 있습니다 (객체에 &lt;code&gt;close()&lt;/code&gt; 메서드가 없는 경우는 다루지 않음).&lt;/p&gt;

&lt;h2 id=&#34;추상-베이스-클래스&#34;&gt;추상 베이스 클래스&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.python.org/2/library/abc.html&#34; target=&#34;_blank&#34;&gt;http://docs.python.org/2/library/abc.html&lt;/a&gt; 를 참조하세요.&lt;/p&gt;

&lt;h2 id=&#34;디스크립터-객체-만들기&#34;&gt;디스크립터 객체 만들기&lt;/h2&gt;

&lt;p&gt;디스크립터는 가져 오기, 설정 또는 삭제를 통해 액세스할 때 다른 객체를 변경할 수 있는 클래스입니다. 디스크립터는 단독으로 존재하지 않습니다. 오히려, 이들은 소유자 클래스에 의해 소유됩니다. 디스크립터는 값이 서로 의존하는 속성을 가진 객체지향 데이터베이스 또는 클래스를 빌드할 때 유용할 수 있습니다. (역자 주: 어떤 변수나 함수에 접근, 변경, 삭제하는 것을 제어하거나 로그 출력 등의 이벤트를 걸고 싶을 때에도 유용합니다.) 디스크립터는 특히 여러 측정 단위로 속성을 표현하거나 계산된 속성(클래스의 원점에서 그리드의 한 점을 나타내는 거리와 같은)을 나타낼 때 특히 유용합니다.&lt;/p&gt;

&lt;p&gt;디스크립터가 되려면 클래스에 &lt;code&gt;__get__&lt;/code&gt;, &lt;code&gt;__set__&lt;/code&gt; 및 &lt;code&gt;__delete__&lt;/code&gt; 중 하나 이상이 구현되어 있어야 합니다. 이들의 매직 메소드를 살펴봅시다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__get__(self, instance, owner)&lt;/code&gt; : 디스크립터의 값이 회수될 때의 동작을 정의합니다. &lt;code&gt;instance&lt;/code&gt;는 소유자 객체의 인스턴스입니다. &lt;code&gt;owner&lt;/code&gt;는 소유자 클래스 자체입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__set__(self, instance, value)&lt;/code&gt; : 디스크립터의 값이 변경될 때의 동작을 정의합니다. &lt;code&gt;instance&lt;/code&gt;는 소유자 클래스의 인스턴스이고 &lt;code&gt;value&lt;/code&gt;는 디스크립터에 설정하는 값입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__delete__(self, instance)&lt;/code&gt; : 디스크립터의 값이 삭제될 때의 동작을 정의합니다. &lt;code&gt;instance&lt;/code&gt;는 소유자 객체의 인스턴스입니다.&lt;/p&gt;

&lt;p&gt;자, 디스크립터의 유용한 응용 예제, 단위 변환입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Meter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;meter에 대한 디스크립터 &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__get__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__set__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Foot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;footer에 대한 디스크립터&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__get__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;meter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.2808&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__set__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;meter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.2808&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Distance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;feet 와 meter에 대한 두 개의 디스크립터를 나타내는 클래스입니다.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;meter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Meter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;foot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Foot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;복사하기&#34;&gt;복사하기&lt;/h2&gt;

&lt;p&gt;때로는 변경 가능한 객체를 처리할 때, 특히 복사한 객체에 영향을 주지 않고 객체를 복사하고 변경할 수 있기를 원합니다. 이것은 파이썬의 &lt;code&gt;[copy](http://docs.python.org/library/copy.html)&lt;/code&gt;가 나온 배경입니다. 그러나 (다행스럽게도) 파이썬 모듈은 민감하지 않으므로 리눅스 기반의 로봇의 폭동 (a Linux-based robot uprising)에 대해 걱정할 필요는 없지만, 파이썬에게 효율적으로 복사하는 방법을 알려줘야합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__copy__(self)&lt;/code&gt; : 클래스의 인스턴스에 대해 &lt;code&gt;copy.copy()&lt;/code&gt;에 대한 동작을 정의합니다. &lt;code&gt;copy.copy()&lt;/code&gt;는 객체의 단순 복사본을 반환합니다. 즉, 인스턴스 자체가 새 인스턴스이지만 모든 데이터가 참조됩니다. 즉, 객체 자체는 복사되지만 데이터는 계속 참조됩니다. 따라서 얕은 사본의 데이터가 변경되면 원본이 변경 될 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__deepcopy__(self, memodict = {})&lt;/code&gt; : 클래스의 인스턴스에 대해 &lt;code&gt;copy.deepcopy()&lt;/code&gt;에 대한 동작을 정의합니다. &lt;code&gt;copy.deepcopy()&lt;/code&gt;는 객체의 전체 복사본을 반환합니다. 객체와 그 데이터는 모두 복사됩니다. &lt;code&gt;memodict&lt;/code&gt;는 이전에 복사된 객체의 캐시입니다.이 방법은 복사를 최적화하고 재귀적 데이터 구조를 복사할 때 무한 재귀를 방지합니다. 개별 속성을 깊이 복사하려면, &lt;code&gt;memdeict&lt;/code&gt;를 첫 번째 인수로 사용하여 해당 속성에 대해 &lt;code&gt;copy.deepcopy()&lt;/code&gt;를 호출하시면 됩니다.&lt;/p&gt;

&lt;p&gt;이 매직 메소드의 유즈케이스는 무엇일까요? 언제나 그렇듯이 기본 동작이 제공하는 것보다 세분화된 제어가 필요한 경우가 있습니다. 예를 들어, 딕셔너리에 캐시를 저장하는 객체를 복사하려고 시도하면 (크기가 클 수 있음), 캐시를 복사하는 것이 적절하지 않을 수 있습니다. 인스턴스간에 메모리에서 캐시를 공유할 수 있다면 그렇게 해야합니다.&lt;/p&gt;

&lt;h2 id=&#34;객체-피클링하기&#34;&gt;객체 피클링하기&lt;/h2&gt;

&lt;p&gt;다른 파이썬 프로그래머와 함께 시간을 보내고 있다면, 적어도 피클링에 대해 들어 본 적이 있을 것입니다. 피클링은 파이썬 데이터 구조의 직렬화 프로세스이며, 객체를 저장하고 나중에 검색해야 할 때 (대개 캐싱을 위해) 매우 유용할 수 있습니다. 또한 걱정과 혼란의 주요 원인이기도 합니다.&lt;/p&gt;

&lt;p&gt;피클링은 매우 중요하므로 자체 모듈(&lt;code&gt;pickle&lt;/code&gt;)이 아니라 자체 프로토콜과 함께 사용하는 매직 메소드가 필요합니다. 그러나 먼저 기존 유형을 피클링하는 방법에 대한 간단한 것들을 말씀드리겠습니다 (이미 알고있는 경우 건너 뛸 수 있음).&lt;/p&gt;

&lt;h3 id=&#34;피클링-소금물에-빨리-절이기&#34;&gt;피클링: 소금물에 빨리 절이기&lt;/h3&gt;

&lt;p&gt;피클링에 빠져 보죠. 나중에 저장하고 조회하고 싶은 딕셔너리가 있다고 합시다. 내용을 파일에 쓸 수 있으며, 올바른 구문을 작성했는지 확인한 다음 &lt;code&gt;exec()&lt;/code&gt; 또는 파일 입력 처리를 사용하여 내용을 조회할 수 있습니다. 그러나 이것은 매우 위험합니다. 중요한 데이터를 일반 텍스트로 저장하면 프로그램이 충돌하거나 악성 코드가 컴퓨터에서 실행되도록 다양한 방법으로 손상되거나 변경될 수 있습니다. 대신, 우리는 그것을 피클하려고합니다 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pickle&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;jar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data.pkl&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pickle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dump&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# jar 파일에 피클된 데이터를 기록합니다.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;jar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;몇 시간 후, 우리는 되돌리기 원합니다. 우리가 해야 할 일은 언피클하는 것입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pickle&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;pkl_file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data.pkl&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 피클한 데이터에 연결합니다.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pickle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pkl_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 데이터를 변수로 로드합니다.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pkl_file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;도대체 무슨 일이 일어난 걸까요? 정확히 여러분이 기대하는 것이죠. 우리가 데이터를 모두 가지고 있었던 것과 같습니다.&lt;/p&gt;

&lt;p&gt;자, 주의 사항을 말씀드리겠습니다. 피클링은 완벽하지 않습니다. 피클 파일은 실수로 또는 고의로 쉽게 손상됩니다. 피클링은 무난한 텍스트 파일을 사용하는 것보다 안전할 수 있지만 악성 코드를 실행하는 데에 여전히 사용될 수 있습니다. 다른 버전의 파이썬에서도 호환되지 않으므로 피클링된 객체를 배포하고 사람들이 이를 열 수 있을 것으로 기대하지 마세요. 그러나 캐싱 및 기타 일반적인 직렬화 작업을 위한 강력한 도구가 될 수도 있습니다.&lt;/p&gt;

&lt;h3 id=&#34;자신의-객체-피클링하기&#34;&gt;자신의 객체 피클링하기&lt;/h3&gt;

&lt;p&gt;피클링은 내장 타입을 위한 것이 아닙니다. 피클 프로토콜을 따르는 모든 클래스를 위한 것입니다. 피클 프로토콜에는 파이썬 객체가 동작하는 방식을 사용자 정의할 수 있는 4가지 선택적 메소드가 있습니다 (C 확장의 경우에는 약간 다르지만 범위에는 포함되지 않습니다).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__getinitargs__(self)&lt;/code&gt; : 클래스가 언피클되었을 때 &lt;code&gt;__init__&lt;/code&gt;을 호출하고 싶다면, &lt;code&gt;__getinitargs__&lt;/code&gt;를 정의할 수 있습니다. 이 &lt;code&gt;__getinitargs__&lt;/code&gt;는 &lt;code&gt;__init__&lt;/code&gt;에 전달할 인수의 튜플을 반환해야 합니다. 이 메소드는 구식 클래스에서만 작동합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__getnewargs__(self)&lt;/code&gt; : 새로운 스타일의 클래스의 경우, 언피클링을 할 때 &lt;code&gt;__new__&lt;/code&gt;에 전달되는 인수에 영향을 줄 수 있습니다. 이 메소드는 &lt;code&gt;__new__&lt;/code&gt;로 전달되는 인수 튜플을 반환해야합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__getstate__(self)&lt;/code&gt; : 객체의 &lt;code&gt;__dict__&lt;/code&gt; 속성이 저장되는 대신 객체가 피클될 때 저장할 수 있는 사용자 정의 상태를 반환할 수 있습니다. 그 상태는 객체가 언피클 되었을 때 &lt;code&gt;__setstate__&lt;/code&gt;에 의해 사용됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__setstate__(self, state)&lt;/code&gt; : 객체가 언피클 되었을 때 &lt;code&gt;__setstate__&lt;/code&gt;가 정의 되었다면, 객체의 상태는 객체의 &lt;code&gt;__dict__&lt;/code&gt;에 직접 적용되지 않고 전달됩니다. 이것은 &lt;code&gt;__getstate__&lt;/code&gt;와 함께 사용됩니다 : 둘 다 정의되면 객체의 피클된 상태를 여러분이 원하는대로 나타낼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__reduce__(self)&lt;/code&gt; : 확장 타입(즉, 파이썬의 C API를 사용하여 구현된 타입)을 정의 할 때 파이썬에서 피클링하려는 경우 피클링 방법을 지정해야합니다. &lt;code&gt;__reduce__()&lt;/code&gt;는 정의된 객체가 피클될 때 호출됩니다. 파이썬이 찾고 피클하는 전역 이름을 나타내는 문자열 또는 튜플을 반환할 수 있습니다. 튜플은 2 ~ 5 개의 요소를 포함합니다. 객체를 다시 생성하기 위해 호출되는 호출 가능 객체, 호출 가능 객체에 대한 인수의 튜플, &lt;code&gt;__setstate__&lt;/code&gt;에 전달될 상태 (선택 사항), 피클링될 리스트 항목을 생성하는 반복자(선택 사항), 피클링할 딕셔너리 항목을 생성하는 반복자 (선택 사항)가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__reduce_ex__(self)&lt;/code&gt; : &lt;code&gt;__reduce_ex__&lt;/code&gt;은 호환성을 위해 존재합니다. 정의된 경우, &lt;code&gt;__reduce_ex__&lt;/code&gt;는 피클링시에 &lt;code&gt;__reduce__&lt;/code&gt;를 통해 호출됩니다. &lt;code&gt;__reduce__&lt;/code&gt;는 &lt;code&gt;__reduce_ex__&lt;/code&gt;을 지원하지 않는 이전 버전의 피클링 API에 대해서도 정의할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&#34;예제-1&#34;&gt;예제&lt;/h3&gt;

&lt;p&gt;예제는 슬레이트(Slate)로, 그 값이 무엇인지, 그 값이 쓰여졌을 때를 기억합니다. 그러나 이 특정 슬레이트는 피클될 때마다 공백으로 표시됩니다. 현재 값은 저장되지 않습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;time&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Slate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;문자열과 변경 로그를 저장하고 피클될 때 값을 잊어 버리는 클래스&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_change&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;asctime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;history&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;change&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 값을 변경합니다. 히스토리에 마지막 값을 커밋합니다.&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;history&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_change&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_value&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_change&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;asctime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_changes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Changelog for Slate object:&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;history&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\t&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__getstate__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 의도적으로 self.value 또는 self.last_change를 반환하지 마세요.&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 픽업할 때 빈 슬레이트를 갖길 원하니깐요.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;history&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__setstate__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# self.history = salte 하고  last_change 와 value가 정의되지&lt;/span&gt;
        &lt;span class=&#34;err&#34;&gt;않게&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;합니다&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;history&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_change&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;결론&#34;&gt;결론&lt;/h2&gt;

&lt;p&gt;이 가이드의 목적은 파이썬 또는 객체지향 프로그래밍 경험에 관계없이, 읽는 사람에게 무언가를 가져다주는 것입니다. 파이썬을 처음 시작하는 분이라면 기능이 풍부하고 우아하며 사용하기 쉬운 클래스를 작성하는 기본 지식에 대한 지식을 얻었을 것입니다. 파이썬 프로그래머라면 중급의 새로운 개념과 전략, 그리고 여러분과 클라이언트가 작성한 코드의 양을 줄이는 좋은 방법을 발견했을 것입니다. 파이셔니스타(Pythonista)의 전문가라면 잊어버린 것들을 새롭게 하고 어쩌면 몇 가지 새로운 트릭을 발견했을 것입니다. 여러분의 경험 수준에 관계없이, 파이썬의 특별한 메소드를 통한 이 여행이 정말로 마법적이었기를 바랍니다.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Using custom model_to_dict() in Django</title>
      <link>https://ziwon.github.io/post/using_custom_model_to_dict_in_django/</link>
      <pubDate>Fri, 09 Dec 2016 11:00:25 +0900</pubDate>
      <author>Philbert Yoon</author>
      <guid>https://ziwon.github.io/post/using_custom_model_to_dict_in_django/</guid>
      <description></description>
      
      <content>&lt;p&gt;In Django, when converting a database model to a dictionary, I usually used to convert only the member variables corresponding to the column of the table to handle the response to the request in the form of Json and so on. But, whenever you encounter a member variable of type &lt;code&gt;ManyToManyField&lt;/code&gt;, it would be too cumbersome to write three or four lines of code each time to loop around to get their values from the member variables of the &lt;code&gt;ManyToManyField&lt;/code&gt; in a model object.&lt;/p&gt;

&lt;p&gt;For example, suppose you have a modeling class of &lt;code&gt;Publication&lt;/code&gt;, &lt;code&gt;Article&lt;/code&gt; as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;django.db&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Publication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CharField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__str__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Meta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;headline&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CharField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;publications&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ManyToManyField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Publication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__str__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headline&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Meta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;headline&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the &lt;code&gt;Publication&lt;/code&gt; instance, you can convert it to a dictionary by calling the &lt;code&gt;model_to_dict()&lt;/code&gt; function only once. However, when converting an instance of &lt;code&gt;Article&lt;/code&gt; with a member variable of &lt;code&gt;ManyToManyField&lt;/code&gt; to a dictionary, you have to invoke &lt;code&gt;model_to_dict()&lt;/code&gt; or loop around more than once to get their values because &lt;code&gt;ManyToManyField&lt;/code&gt; is a list type.&lt;/p&gt;

&lt;p&gt;Whenever I encountered &lt;code&gt;ManyToManyField&lt;/code&gt;, I used to create a separate method, or loop it, and convert it each by each. Suddenly, every time I write a for statement or a separate function, I thought it would be better to solve it all once.&lt;/p&gt;

&lt;p&gt;For example, let&amp;rsquo;s say you have a property in the &lt;code&gt;Article&lt;/code&gt; class, a member function, and several &lt;code&gt;ManyToManyField&lt;/code&gt;s like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;headline&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CharField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;publications&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ManyToManyField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Publication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;tags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ManyToManyField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;convert_cover_img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@property&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__str__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headline&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Meta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;headline&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What I want is to specify each values to be transformed, it could be such as member variables, member functions, and properties of the modeling class, as shown below, and the whole instance is converted into a single dictationary chunk in a single call. For example, if you need only one of the member variables of &lt;code&gt;ManyToManyField&lt;/code&gt;, you can convert it to &lt;code&gt;__[field_name]&lt;/code&gt; by specifying the desired field name as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;FIELDS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;headline&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;publications__title&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tags__name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;convert_cover_img&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OrderedDict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model_to_dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FIELDS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;has_next&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;has_next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JsonResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RES_OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, if you need more than one column for &lt;code&gt;ManyToManyField&lt;/code&gt; to build the response like json form, you have no choice but to define a seperate property or function in a model class. In a specific case, for example, if you are extending all attributes - like id, name and etc - of the tags member variable ManyToManyField while converting the Article instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@property&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tags_to_dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, since the model class describes the process of transforming their member variables, the above manner has the advantage that it is well modularized and reusable. As a result, the entire code is really simple and neat, because it can hide the process of converting an instance to a dictionary.&lt;/p&gt;

&lt;p&gt;Now we no longer have to loop around to handle &lt;code&gt;ManyToManyFields&lt;/code&gt; or write a separate function. It also eliminates the need to worry about member properties or member functions, which is not modeling fields .&lt;/p&gt;

&lt;p&gt;Here is the code for &lt;code&gt;model_to_dict()&lt;/code&gt; that was created. Once the conversion code of the a model is unified into just one line as shown below, repetitive and annoying coding for conversion is no longer needed. Since the parent class is created and the most job in the inherited child class is just to specify only the fields to be converted. As a result, the development speed can be much faster, which can improve the quality of the query set manager or focus on more creative work.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;model_to_dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date_to_strf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;django.db.models.fields.related&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ManyToManyField&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;django.db.models.fields&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateTimeField&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;django.db.models.fields.files&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ImageField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileField&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;opts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_meta&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    Why is `__fields` in here?
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        it holds the list of fields except for the one ends with a suffix &amp;#39;__[field_name]&amp;#39;.
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        When converting a model object to a dictionary using this method,
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        You can use a suffix to point to the field of ManyToManyField in the model instance.
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        The suffix ends with &amp;#39;__[field_name]&amp;#39; like &amp;#39;publications__name&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;__fields&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fields&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]))&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concrete_fields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;virtual_fields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;many_to_many&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;is_edtiable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;getattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;editable&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fields&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__fields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exclude&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ManyToManyField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pk&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;qs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value_from_object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;qs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_result_cache&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pk&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;qs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;m2m_field&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m2m_field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;qs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;IndexError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;qs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pk&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateTimeField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value_from_object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date_to_strf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date_to_strf&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date_to_timestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ImageField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value_from_object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value_from_object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;file&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_edtiable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value_from_object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    Just call an instance&amp;#39;s function or property from a string with the function name in `__fields` arguments.
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;funcs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__fields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;funcs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;getattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inspect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ismethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might have performance problems, but if you have a lot of cost to convert an instance, you might be able to run 10 simultaneously using a coroutine, etc. Of course, if the order is important, when you collect the results, there may be a hassle, such as having to rearrange them in order.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>[번역] Effective Go: Concurrency</title>
      <link>https://ziwon.github.io/post/effective-go-concurrency/</link>
      <pubDate>Fri, 25 Sep 2015 11:01:21 +0900</pubDate>
      <author>Philbert Yoon</author>
      <guid>https://ziwon.github.io/post/effective-go-concurrency/</guid>
      <description></description>
      
      <content>

&lt;blockquote&gt;
&lt;p&gt;2016.10.04 - &lt;a href=&#34;https://golang.org/doc/effective_go.html#concurrency&#34; target=&#34;_blank&#34;&gt;Effective Go&lt;/a&gt;의 &lt;a href=&#34;https://gosudaweb.gitbooks.io/effective-go-in-korean/content/&#34; target=&#34;_blank&#34;&gt;한글화&lt;/a&gt; 작업이완료되었습니다. 아래 동시성 번역 역시 번역팀의 도움으로 갱신되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html#concurrency&#34; target=&#34;_blank&#34;&gt;Effective Go&lt;/a&gt; 의 &lt;a href=&#34;https://web.archive.org/web/20160115102611/https://code.google.com/p/golang-korea/wiki/EffectiveGo?can=1#동시성(Concurrency)&#34; target=&#34;_blank&#34;&gt;한글화 문서&lt;/a&gt;를 보던 중, Concurrency에 대한 부분이 빠져 있어서 해당 부분만 따로 번역했습니다. 원문의 출처는 &lt;a href=&#34;https://golang.org/doc/effective_go.html#concurrency&#34; target=&#34;_blank&#34;&gt;여기&lt;/a&gt;입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;통신에-의한-공유-share-by-communicating&#34;&gt;통신에 의한 공유 (Share by communicating)&lt;/h2&gt;

&lt;p&gt;동시성 프로그래밍은 광범위한 주제이므로 여기에서는 Go에 한정된 중요한 것들에 대해서만 지면을 할애한다.&lt;/p&gt;

&lt;p&gt;다양한 환경에서 동시성 프로그래은 공유 변수에 대한 정확한 접근을 구현하기 위해 엄수해야 하는 세세한 내용들로 어려워졌다. Go는 공유 변수가 채널을 돌려가며 전달된다는 점에서 다른 접근을 권장한다. 그리고 사실 공유 변수는 개별 쓰레드 실행에 의해서 결코 공유되지 않는다. 언제든지 하나의 고루틴이 값에 접근한다. 데이터 경쟁은 구현 설계상 발생할 수 없다. 이러한 사고방식을 권장하기 위해 이를 한 슬로건으로 줄였다:&lt;/p&gt;

&lt;p&gt;공유 메모리로 통신하지 말라. 대신, 통신으로 메모리를 공유하라.&lt;/p&gt;

&lt;p&gt;이런 접근은 너무 지나친 것일 수 있다. 예를 들어, 정수형 변수 주위에 뮤텍스를 두는 방식의 레퍼런스 카운트가 최고일지도 모른다. 그러나 상위 레벨에서 접근하는 방법으로써, 접근을 제어하는 채널을 사용하면 분명하고 정확한 프로그램을 보다 쉽게 작성할 수 있다.&lt;/p&gt;

&lt;p&gt;이 모델에 대해 생각해보는 한가지 방법은 단일 CPU에서 실행되는 전형적인 단일 쓰레드 프로그램을 떠올려 보는 것이다. 여기에는 동기화를 위한 기본 자료형이 필요 없다. 지금 또다른 그 인스턴스를 실행시켜 보라. 그러나 역시 동기화가 필요하지 않다. 이제 그 두 개를 통신하게 하는데, 그 통신 자체가 동기화 장치(synchronizer)인 경우, 여전히 다른 동기화가 필요 없다. 예를 들어, 유닉스 파이프 라인은 이 모델에 완벽하게 들어 맞는다. 동시성에 대한 Go의 접근 방식이 호어(Hoare)의 통신 순차적 프로세스 (CSP, Communicating Sequential Processes)에서 비롯되었지만, 타입 안전이 보장되는 식의 일반화된 유닉스 파이프라고 볼 수 있다.&lt;/p&gt;

&lt;h2 id=&#34;고루틴-goroutines&#34;&gt;고루틴 (Goroutines)&lt;/h2&gt;

&lt;p&gt;쓰레드, 코루틴, 프로세스 등 기존의 용어는 부정확한 함의를 전달하기 때문에 고루틴이라고 부른다. 고루틴은 단순한 모델이다. 즉, 같은 주소 공간에서 다른 고루틴과 동시에 실행되는 함수이다. 고루틴은 가볍다. 스택 영역을 할당하는 것에 비해 비용이 적게 든다. 그리고 그 스택은 작은 크기로 시작된다. 그래서 저렴하다. 그리고 필요한만큼 힙 스토리지를 할당(또는 해제)하여 커진다.&lt;/p&gt;

&lt;p&gt;고루틴은 OS의 다중 쓰레드에 멀티플렉싱되는데, I/O 작업을 위해 대기중일 때와 같이 하나의 고루틴이 블락이 되면 다른 고루틴이 계속 실행된다. 이런 설계는 쓰레드의 복잡한 생성과 관리에 대해 굳이 알 필요가 없게 해준다.&lt;/p&gt;

&lt;p&gt;새 고루틴을 호출하여 실행하려면 &lt;code&gt;go&lt;/code&gt; 키워드를 함수 또는 메쏘드 호출 앞에 둔다. 호출이 완료되면, 고루틴은 자동으로 종료된다. (백그라운드에서 명령을 실행하는 유닉스쉘 및 표기법과 유사한 효과이다.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sort를&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;정렬이&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;완료될&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;때까지&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;기다리지&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;말고&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;동시에&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;실행&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;함수 리터럴은 고루틴 호출에 유용할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Announce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;delay&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;delay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//괄호 주목 - 반드시 함수를 호출해야 함
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go에서 함수 리터럴은 클로저이다. 즉, 함수가 참조하는 변수를 사용하는 동안에는 그 생존을 보장하는 방식으로 구현되어 있다는 것이다.&lt;/p&gt;

&lt;p&gt;위의 예제는 함수가 종료를 알릴 방법이 없기 때문에 아주 실용적이진 않다. 이를 위해 채널이 필요하다.&lt;/p&gt;

&lt;h2 id=&#34;채널-channels&#34;&gt;채널 (Channels)&lt;/h2&gt;

&lt;p&gt;맵과 마찬가지로, 채널은 &lt;code&gt;make&lt;/code&gt;로 할당되고, 그 결과 값은 실제 데이터 구조에 대한 참조로서 동작한다. 선택적인 정수형 매개변수가 주어지면, 채널에 대한 버퍼 크기가 설정된다. 이 값은 언버퍼드(Unbuffered) 또는 동기 채널에 대해서 기본값이 0이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;ci&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;// 정수형의 언버퍼드 채널
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;// 정수형의 언버퍼드 채널
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;포인터형의&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;버퍼드&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;채널&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;언버퍼드 채널은 동기화로 값을 교환하며 두 계산(고루틴들)이 어떤 상태에 있는지 알 수 있다는 것을 보장하는 통신을 결합한다.&lt;/p&gt;

&lt;p&gt;채널을 사용하는 멋있는 Go스러운 코드가 많다. 다음 한 예제로 시작해보자. 이전 섹션에서 백그라운드에서 정렬을 했다. 채널은 정렬이 완료될 때까지 고루틴 실행을 대기시킬 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 채널을 할당
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 고루틴에서 정렬 시작하고 완료되면 채널에 신호를 보냄
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//  신호를 보내지만 값은 문제가 안됨
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;doSomethingForAWhile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;정렬이&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;끝날&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;때까지&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;기다리고&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;전달된&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;값은&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;버림&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;수신부는 수신할 데이터가 있을 때까지 항상 블락된다. 언버퍼드 채널이면, 송신부는 수신부가 값을 받을 때까지 블락된다. 버퍼드 채널이면, 값이 버퍼에 복사될 때까지만 송신부가 블락된다. 그러므로 버퍼가 꽉 차면, 이는 특정 수신부가 값을 획득할 때까지 대기 중이라는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;버퍼드 채널은 세마포처럼 사용될 수 있다. 예를 들어 처리량을 제한하는 것이다. 다음 예제에서, 들어오는 요청은 값을 채널에 전송하는 &lt;code&gt;handle&lt;/code&gt;에 넘겨진다. 요청을 처리한 후, 다음 (요청) 소비자에 대해 세마포를 준비하는 채널에서 값을 수신한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MaxOutstanding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;sem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 액티브큐가 비워질 때까지 대기
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 오래 걸릴 수 있는 작업
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sem&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// 완료, 실행될 다음 요청을 활성화
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Serve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;queue&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 끝날 때까지 대기하지 않음
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일단 MaxOutstanding 핸들러가 &lt;code&gt;process&lt;/code&gt;를 실행하게 되면, 기존 핸들러 중 하나가 완료되고 버퍼로부터 값을 받을 때까지 더 이상의 꽉 찬 채널 버퍼에 전송하는 것은 블락될 것이다.&lt;/p&gt;

&lt;p&gt;그렇지만 이 설계는 문제가 있다. 즉, 전체 요청에서 겨우 &lt;code&gt;MaxOutstanding&lt;/code&gt; 수만큼 &lt;code&gt;process&lt;/code&gt;를 실행할 수 있음에도 서버는 들어오는 모든 요청에 대해 새로운 고루틴을 생성한다는 것이다. 그 결과, 요청이 너무 빨리 들어올 경우, 무제한으로 리소스를 낭비할 수 있다. 이 결함은 &lt;code&gt;Serve&lt;/code&gt;를 고루틴을 생성하는 게이트로 수정해서 처리할 수 있다. 확실한 솔루션은 다음과 같지만, 나중에 수정하게 될 버그가 있다는 것에 주의하라.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Serve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;sem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 버그, 아래 설명을 참고
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sem&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;버그는 Go &lt;code&gt;for&lt;/code&gt; 루프에 있다. 루프 변수는 각 반복마다 재사용되어 동일한 &lt;code&gt;req&lt;/code&gt; 변수가 모든 고루틴에 걸쳐 공유된다. 이는 원하는 바가 아니다. 각 고루틴마다 구별된 &lt;code&gt;req&lt;/code&gt; 변수를 가지도록 해야한다. 다음은 이를 위한 한 가지 방법으로, 고루틴의 클로져에 대한 인자로 &lt;code&gt;req&lt;/code&gt;의 값을 전달하는 것이다:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Serve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;sem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sem&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이전 버전과 클로져가 어떻게 선언되고 실행되는지 차이점을 보기 위해 다음 버전을 비교해보라. 또다른 솔루션은 다음 예제처럼 그냥 같은 이름의 새로운 변수를 생성하는 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Serve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 고루틴을 위한 새로운 req 인스턴스를 생성
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;sem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sem&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이상한 코드를 작성하는 것처럼 보일 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 Go에서 이렇게 하는 것은 합법적이고 Go 언어다운 코드이다. 이름이 같은 새로운 버전의 변수가 의도적으로 루프 변수를 지역적으로 가리지만, 각 고루틴에 대해서는 유니크한 값이다.&lt;/p&gt;

&lt;p&gt;서버를 작성하는 일반적인 문제로 돌아가면, 리소스를 잘 관리하는 다른 방법은 요청 채널을 읽는 모든 &lt;code&gt;handle&lt;/code&gt; 고루틴을 고정된 수에서 시작하는 것이다. 고루틴의 수는 &lt;code&gt;process&lt;/code&gt;가 동시에 호출되는 수를 제한한다. &lt;code&gt;Serve&lt;/code&gt; 함수는 종료 신호를 수신하게 되는 채널도 (인자로) 받고 있으므로 고루틴이 시작되면, 이 채널로부터의 수신은 블락된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Serve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientRequests&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;quit&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 핸들러 시작
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MaxOutstanding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientRequests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;quit&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 종료 신호를 받을 때까지 대기
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;채널의-채널-channels-of-channels&#34;&gt;채널의 채널 (Channels of channels)&lt;/h2&gt;

&lt;p&gt;Go의 가장 중요한 속성 중 하나는 채널이 다른 것과 마찬가지로 할당되고 전달될 수 있는 일급변수(first-class value)라는 것이다. 이 속성의 일반적인 사용은 안전한 병렬 역다중화(parallel demultiplexing)를 구현하는 것이다.&lt;/p&gt;

&lt;p&gt;이전 섹션의 예제에서, &lt;code&gt;handle&lt;/code&gt; 은 요청에 대해서는 이상적인 핸들러였으나 핸들러가 다루는 타입은 정의하지 않았다. 해당 타입이 회신을 하는 채널을 포함하는 경우, 각 클라이언트는 자신에게 응답 경로를 제공할 수 있다. 다음은 &lt;code&gt;Request&lt;/code&gt; 타입의 개략적인 정의이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;           &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;resultChan&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;클라이언트는 함수와 그 인자뿐만 아니라 요청 객체 안에서 응답을 수신하는 채널을 제공하고 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 요청 전송
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientRequests&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 응답 대기
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;answer: %d\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resultChan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;서버 측에서는 핸들러 함수만 수정한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resultChan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제로 사용하기 위해서는 아직 할 일이 많은 것이 명백하지만, 이 코드는 속도 제한, 병렬, 넌블락 RPC 시스템을 위한 프레임워크이다. 그리고 뮤텍스는 눈에 보이지 않는다.&lt;/p&gt;

&lt;h2 id=&#34;병렬화-parallelization&#34;&gt;병렬화 (Parallelization)&lt;/h2&gt;

&lt;p&gt;이러한 아이디어의 또 다른 응용 프로그램은 멀티코어 CPU에 대해 계산을 병렬처리하는 것이다. 계산을 독립적으로 실행할 수 있는 부분들로 분리할 수 있다면, 각 부분들이 완료될 때 신호를 보내는 채널들로 병렬처리할 수 있다.&lt;/p&gt;

&lt;p&gt;벡터 아이템에 대한 실행 비용이 비싼 연산이 있다고 가정해보자. 그리고 다음 이상적인 예제에서와 같이 각 아이템을 연산한 값은 독립적이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Vector&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float64&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//  v[i], v[i+1]에서 v[n-1]까지 연산을 적용
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Vector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DoSome&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Vector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 이 부분이 완료되면 신호함
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;루프에서 독립적으로 각 부분들을 CPU당 하나씩 실행시킨다. 이들은 어떤 순서로도 완료될 수 있지만 순서는 문제되지 않는다. 그러므로 모든 고루틴를 실행시킨 후 채널을 비워서 그냥 완료 신호를 카운트한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numCPU&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// CPU  코어수
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Vector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DoAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Vector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numCPU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 버퍼는 선택적이나 상식적
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numCPU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DoSome&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numCPU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numCPU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 채널을 비움
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numCPU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 한 태스크가 끝날 때까지 대기
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 모두 완료
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;numCPU&lt;/code&gt;을 상수값으로 생성하기보다는 적절한 값을 런타임시에 요구할 수 있다. &lt;code&gt;runtime.NumCPU&lt;/code&gt; 함수는 장비의 CPU 하드웨어 코어수를 반환한다. 그래서 아래와 같이 작성할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numCPU&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NumCPU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또한 Go 프로그램은 동시에 실행할 수 있는 사용자 지정 코어수를 보고하는 (또는 설정하는) &lt;code&gt;runtime.GOMAXPROCS&lt;/code&gt; 함수가 있다. &lt;code&gt;runtime.NumCPU&lt;/code&gt;의 값이 기본값이지만, 비슷하게 명명된 환경 변수 설정에 의해 혹은 양수의 인자로 함수를 호출하여 재정의할 수 있다. 0으로 호출하면 바로 값을 조회한다. 따라서 사용자의 리소스 요청을 따르고 싶은 경우, 다음과 같이 작성해야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numCPU&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GOMAXPROCS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;컴포넌트를 독립적으로 처리하여 프로그램을 구조화하는 동시성과 다중 CPU에서 효율성을 위해 계산을 병렬로 처리하는 병렬성의 개념을 혼동하지 않길 바란다. Go의 동시성 특징이 병렬 계산으로 문제를 쉽게 구조화할 수 있지만, Go는 병렬이 아닌 동시성 언어이고, 모든 병렬화 문제가 Go에 들어맞지는 않는다. 이 구분에 대한 논의는 &lt;a href=&#34;https://blog.golang.org/concurrency-is-not-parallelism&#34; target=&#34;_blank&#34;&gt;이 블로그 포스트&lt;/a&gt;에 인용된 토크를 참조하라.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;역자 주&lt;/strong&gt;: 동시성 프로그래밍과 병렬 프로그래밍의 차이는 아래 그림을 참조 (&lt;a href=&#34;http://joearms.github.io/2013/04/05/concurrent-and-parallel-programming.html&#34; target=&#34;_blank&#34;&gt;출처&lt;/a&gt;)&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;http://joearms.github.io/images/con_and_par.jpg&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;누설-버퍼-a-leaky-buffer&#34;&gt;누설 버퍼 (A leaky buffer)&lt;/h2&gt;

&lt;p&gt;비동시성(non-concurrent) 개념도 동시성 프로그래밍 도구로 쉽게 표현할 수 있다. 다음은 RPC 패키지에서 추출한 예제이다. 클라이언트 고루틴은 아마도 네트워크인 특정 소스의 데이터를 반복해서 수신한다. 버퍼의 할당과 해제를 피하기 위해서 &lt;code&gt;free list&lt;/code&gt;를 유지하며 이를 대신할 버퍼 채널을 사용한다. 채널이 비어 있으면 새로운 버퍼가 할당된다. 일단 메시지 버퍼가 준비되면 &lt;code&gt;serverChan&lt;/code&gt;의 서버로 송신한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;freeList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;serverChan&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 사용할 수 있는 버퍼를 획득하거나 그렇지 않다면 할당
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;freeList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;// 하나를 획득하고 아무 작업도 하지 않음
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;// 획득할 버퍼가 없으니 새 버퍼를 할당함
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;// 네트워크에서 다음 메세지를 읽음
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;serverChan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// 서버에 전송
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;서버 루프는 각 클라이언트로부터 메시지를 수신해서 처리하고, free list에 버퍼를 반환한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serverChan&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 동작을 위해 대기
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 가능할 경우 버퍼를 재사용
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;freeList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;// free list의 버퍼. 아무 것도 하지 않음
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;// free list가 꽉 참, 그냥 계속
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;클라이언트는 &lt;code&gt;freeList&lt;/code&gt;에서 버퍼를 획득하려고 시도하는데, 버퍼를 사용할 수 없는 경우에는 새로운 버퍼를 할당한다. 리스트가 꽉 차 있지 않는 이상, 서버는 버퍼를 &lt;code&gt;freeList&lt;/code&gt;에 송신하여 프리 리스트에 버퍼 b를 다시 둔다. 리스트가 꽉 차 있는 경우, 버퍼는 바닥에 떨어져 가비지 콜렉터에 의해 회수된다. (&lt;code&gt;select&lt;/code&gt; 구문에서 &lt;code&gt;default&lt;/code&gt; 절은 다른 case가 준비되지 않은 경우에 실행된다. 이는 &lt;code&gt;select&lt;/code&gt;는 결코 블락되지 않는다는 것을 뜻한다.)  단지 몇 줄로 버퍼 채널과 버퍼 크기를 부기하는 가비지 컬렉터에 기대어 구현된 누설 버킷 프리 리스트(leaky bucket free list)를 만들었다.&lt;/p&gt;

&lt;p&gt;이상, 나머지는 &lt;a href=&#34;https://gosudaweb.gitbooks.io/effective-go-in-korean/content/&#34; target=&#34;_blank&#34;&gt;여기 한글화 문서&lt;/a&gt;를 참조하길 바란다.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Falcon REST API</title>
      <link>https://ziwon.github.io/post/falcon-rest-template/</link>
      <pubDate>Fri, 04 Sep 2015 00:27:35 +0900</pubDate>
      <author>Philbert Yoon</author>
      <guid>https://ziwon.github.io/post/falcon-rest-template/</guid>
      <description></description>
      
      <content>&lt;p&gt;Cloud API와 백엔드 개발에 경량화된 파이썬 프레임워크인 &lt;a href=&#34;http://falconframework.org&#34; target=&#34;_blank&#34;&gt;Falcon&lt;/a&gt;를 이용해 간단한 REST API 템플릿을 만들어 보았다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/patriz/falcon-rest-api&#34; target=&#34;_blank&#34;&gt;https://github.com/patriz/falcon-rest-api&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;개발하는 느낌은 Flask와 비슷한데 (음.. Flask와 뭐가 다르지?) 미들웨어, 후킹 데코레이션 등을 이용해 HTTP 요청과 응답에 대해 체이닝 처리를 좀 더 직관적으로 할 수 있다. 성능이 Flask보다 좀 더 빠른 것으로 알려져 있다. Rackspace에서 밀고있는(?) Cloud API 전용 프레임워크인데, 최신 릴리즈 버전은 아직 0.3이다. 심플하고 미니멀한 걸 좋아한다면 해볼만하다.&lt;/p&gt;

&lt;p&gt;문서에도 나와있지만, Cython을 이용하면 약 20% 정도의 성능효과를 볼 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;pip install --upgrade cython falcon&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음은 Go와 성능비교이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;falcon rest api with gunicorn (-w 9 -k gevent)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wrk -t10 -c100 -d30s http://localhost:5000
Running 30s &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; @ http://localhost:5000
  &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; threads and &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt; connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   &lt;span class=&#34;m&#34;&gt;221&lt;/span&gt;.79ms  &lt;span class=&#34;m&#34;&gt;414&lt;/span&gt;.03ms   &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;.00s    &lt;span class=&#34;m&#34;&gt;85&lt;/span&gt;.43%
    Req/Sec   &lt;span class=&#34;m&#34;&gt;755&lt;/span&gt;.94    &lt;span class=&#34;m&#34;&gt;486&lt;/span&gt;.41     &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;.77k    &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt;.26%
  &lt;span class=&#34;m&#34;&gt;139452&lt;/span&gt; requests in &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;.08s, &lt;span class=&#34;m&#34;&gt;32&lt;/span&gt;.98MB &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt;
  Socket errors: connect &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;, write &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;, timeout &lt;span class=&#34;m&#34;&gt;389&lt;/span&gt;
Requests/sec:   &lt;span class=&#34;m&#34;&gt;4636&lt;/span&gt;.13
Transfer/sec:      &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.10MB&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;sample http server with gogin only&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wrk -t10 -c100 -d30s http://localhost:8080
Running 30s &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; @ http://localhost:8080
  &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; threads and &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt; connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;.65ms    &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;.50ms  &lt;span class=&#34;m&#34;&gt;76&lt;/span&gt;.68ms   &lt;span class=&#34;m&#34;&gt;76&lt;/span&gt;.00%
    Req/Sec     &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.83k   &lt;span class=&#34;m&#34;&gt;402&lt;/span&gt;.97     &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;.40k    &lt;span class=&#34;m&#34;&gt;74&lt;/span&gt;.30%
  &lt;span class=&#34;m&#34;&gt;547412&lt;/span&gt; requests in &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;.08s, &lt;span class=&#34;m&#34;&gt;92&lt;/span&gt;.93MB &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt;
Requests/sec:  &lt;span class=&#34;m&#34;&gt;18199&lt;/span&gt;.96
Transfer/sec:      &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;.09MB&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참고로 테스트 하드웨어 장비는 다음과 같다. (구린 내 아이맥ㅠ)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Model Name:	iMac
Model Identifier:	iMac11,3
Processor Name:	Intel Core i5
Processor Speed:	&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;.8 GHz
Number of Processors:	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
Total Number of Cores:	&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
L2 Cache &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;per Core&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:	&lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; KB
L3 Cache:	&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; MB
Memory:	&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt; GB
Processor Interconnect Speed:	&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;.8 GT/s
Boot ROM Version:	IM112.0057.B01
SMC Version &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;system&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.59f2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
      
    </item>
    
    <item>
      <title>Generics of a Higher Kind</title>
      <link>https://ziwon.github.io/post/generics-of-a-higher-kind/</link>
      <pubDate>Sat, 30 Aug 2014 17:23:11 +0900</pubDate>
      <author>Philbert Yoon</author>
      <guid>https://ziwon.github.io/post/generics-of-a-higher-kind/</guid>
      <description></description>
      
      <content>

&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;

&lt;h3 id=&#34;일차-매개변수적-다형성과-고차-타입-생성자-다형성&#34;&gt;일차 매개변수적 다형성과 고차 타입 생성자 다형성&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;일차 매개변수적 다형성은 정적 타입 프로그래밍 언어의 표준 요소임&lt;/li&gt;
&lt;li&gt;일차 매개변수적 다형성은 제네릭(generic)이라고 부름&lt;/li&gt;
&lt;li&gt;제네릭의 한 가지 응용 분야는 콜렉션(collection)

&lt;ul&gt;
&lt;li&gt;예) &lt;code&gt;List[A]&lt;/code&gt; 타입은  주어진 요소 A 타입의 리스트를 표현,  A는 자유롭게 선택됨&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;일차 매개변수적 다형성은 &lt;code&gt;List&lt;/code&gt;와 같은 타입 생성자를 도출하며 타입을 추상화 함&lt;/li&gt;
&lt;li&gt;그러나 결과로 나온 타입 생성자는 그들 자신을 추상화할 수 없음

&lt;ul&gt;
&lt;li&gt;예) &lt;code&gt;List&lt;/code&gt;와 같은 타입 생성자를 다른 타입 생성자의 타입 인자로 전달할 수 없음&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;이런 제한은 자연스러운 추상를 정형화하는데 방해가 되며 불필요한 중복 코드로 이어짐&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;고차-타입-생성자-다형성와-카인드&#34;&gt;고차 타입 생성자 다형성와 카인드&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;고차 타입 생성자 다형성을 통해 더 많은 제네럴티를 확보할 수 있음&lt;/li&gt;
&lt;li&gt;이 논문에서는 Scala 프로그래밍 언어의 타입 생성자 다형성의 설계와 구현에 대해 살펴봄&lt;/li&gt;
&lt;li&gt;Scala 2.5 버전부터 고차 타입 제네릭을 이용할 수 있음&lt;/li&gt;
&lt;li&gt;고차 타입 제네릭에서는 타입과 타입 생성자를 특정 지우기 위해 개발한 카인드 시스템을 사용함&lt;/li&gt;
&lt;li&gt;카인드는 &amp;lsquo;어떤 타입 혹은 타입 생성자가 추상화에서 허용될 수 있는 인스턴스&amp;rsquo; 인지를 표현함&lt;/li&gt;
&lt;li&gt;즉, 카인드의 타입에 대한 역할은 타입이 변수에 대해 하는 역할임&lt;/li&gt;
&lt;li&gt;카인드는 타입이나 타입 생성자의 3가지를 캡쳐함:  쉐이프, 하위/상위 바운드, 변성&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;추상-타입-멤버를-지닌-타입-vs-타입-생성자&#34;&gt;추상 타입 멤버를 지닌 타입 vs 타입 생성자&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;가상 타입이나 가상 클래스를 지닌 언어는 추상 타입 멤버를 통해 타입 생성자 다형성을 코드화할 수 있음, Scala가 이런 부류의 언어에 속함&lt;/li&gt;
&lt;li&gt;예) Scala에서는 타입 매개변수화된 클래스 대신 추상 타입 멤버를 지닌 클래스로 &lt;code&gt;List&lt;/code&gt;를 정의할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;k&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Elem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt;의 구체적인 구현은 &lt;code&gt;List { type Elem - String }&lt;/code&gt; 처럼 타입 재정의를 통해 모델링할 수 있음&lt;/li&gt;
&lt;li&gt;결정적인 것은 이렇게 코드화된 &lt;code&gt;List&lt;/code&gt;가 타입 생성자가 아닌 타입이라는 점. 따라서, &lt;code&gt;List&lt;/code&gt;를 일차 다형성의 타입 인자나 추상 타입 인스턴스로 전달할 수 있음&lt;/li&gt;
&lt;li&gt;타입 생성자 다형성과 비교하면, 이런 코드화는 3가지 단점이 있음

&lt;ul&gt;
&lt;li&gt;첫째, 다소 장황하게 느껴짐&lt;/li&gt;
&lt;li&gt;둘째, 요소 타입을 나타내는 명명된 멤버의 정의가 필요한데, 이는 클래스 상속 계층에서 이름 충돌의 위험을 유발할 수 있음&lt;/li&gt;
&lt;li&gt;셋째, 이런 코드화는 이후 구체적인 변수로 인스턴스화될 수 없는 어떤 무의미한 타입의 추상화를 정의하도록 허용함&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;반대로 타입 생성자 다형성은 카인드 안정성를 지님, 잘 카인드된 타입의 적용하면 무의미한 타입을 만들지 않음&lt;/li&gt;
&lt;li&gt;이는 객체지향 프로그래밍의 타입 생성자 다형성 포함을 찬성하는 논증의 3가지 이유임&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-reducing-code-duplication-with-type-constructor-polymorphism&#34;&gt;2. Reducing Code Duplication with Type Constructor Polymorphism&lt;/h2&gt;

&lt;h3 id=&#34;코드-중복&#34;&gt;코드 중복&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;다음은 Scala의 &lt;code&gt;Iterable[T]&lt;/code&gt; 트레이트의 구현체로 혼합 구성(mixin composition)을 지원하는 추상 클래스임&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Iterable&lt;/code&gt;은 추상 메소드 &lt;code&gt;filter&lt;/code&gt;와 편의 메소드 &lt;code&gt;remove&lt;/code&gt;를 포함&lt;/li&gt;
&lt;li&gt;하위 클래스는 &lt;code&gt;filter&lt;/code&gt;를 구현해야 현재 콜렉션의 술부 &lt;code&gt;p&lt;/code&gt;를 만족하는 요소를 지닌 콜렉션를 생성할 수 있음&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove&lt;/code&gt;는 &lt;code&gt;filter&lt;/code&gt;에 의해 구현되는데, 단순히 술부를 반전한 것임&lt;/li&gt;
&lt;li&gt;리스트를 필터링할 경우, 리스트를 반환케 될 것을 기대할 수 있음&lt;/li&gt;
&lt;li&gt;따라서, &lt;code&gt;List&lt;/code&gt;는 자신의 결과 타입을 공변하게 재정의하기 위해 &lt;code&gt;filter&lt;/code&gt;를 오버라이딩해야 함 (세부 구현은 생략)&lt;/li&gt;
&lt;li&gt;일관성을 위해 &lt;code&gt;remove&lt;/code&gt;는 같은 결과 타입을 지녀야 하는데, 마찬가지로 오버라이딩 하는 거외에는 방법이 없음.&lt;/li&gt;
&lt;li&gt;메소드 모두가 &lt;code&gt;List&lt;/code&gt;에서 반복되므로 코드 중복은 명확함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;타입-생성자를-통한-해법&#34;&gt;타입 생성자를 통한 해법&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;해법은 &lt;code&gt;filter&lt;/code&gt;와 &lt;code&gt;remove&lt;/code&gt;의 결과 컨테이너를 나타내는 타입 생성자로 추상화하는 것임&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;, &lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;, &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;개선된 &lt;code&gt;Iterable&lt;/code&gt;은 두 개의 타입 매개변수를 취함: &lt;code&gt;[T, Container[X]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;첫 번째 &lt;code&gt;T&lt;/code&gt;는 자신의 요소 타입을 나타내고, 두 번째 &lt;code&gt;Container&lt;/code&gt;는 &lt;code&gt;filter&lt;/code&gt;와 &lt;code&gt;remove&lt;/code&gt; 메소드의 결과 타입을 결정하는 타입 생성자임&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Container&lt;/code&gt;는 타입 매개변수 하나를 취함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-1-type-constructors-and-kinds&#34;&gt;2.1 Type constructors and kinds&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;타입 생성자와 적당한 타입을 구별하기 위해 카인드(kind, 함수형 프로그래밍에서 차용한 용어)를 사용함&lt;/li&gt;

&lt;li&gt;&lt;p&gt;카인드는 변수에 대한 타입처럼 타입에 대한 것임, 이는 3가지 레벨로 언어를 구성함&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;객체는 타입으로 분류되고, 타입은 카인드로 분류됨&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;타입과 달리, 카인드는 순수하게 구조적임: 타입에 기대되는 타입의 매개변수의 종류를 반영함&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;적합한 타입들은 모두 타입 매개변수의 수가 같으므로 동일한 카인드 &lt;code&gt;*&lt;/code&gt;로 분류됨&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;타입 생성자를 분류하기 위해, 카인드 생성자 &lt;code&gt;From → To&lt;/code&gt;를 사용함&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;From&lt;/code&gt;은 기대되는 타입 인자의 카인드이며 &lt;code&gt;To&lt;/code&gt;는 인자에 타입 생성자를 적용할 때의 결과 타입의 카인드임&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;예) &lt;code&gt;class List[T]&lt;/code&gt;는 적합한 타입을 도출하는 적합한 타입에 대해 적용하며 &lt;code&gt;* → *&lt;/code&gt;로 분류되는 &lt;code&gt;List&lt;/code&gt; 타입 생성자로 이루어 짐&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;카인드 레벨의 초기 모델은 다음과 같은 문법으로 기술됨&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;K&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;→&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;K&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;타입 생성자 다형성없이 언어 타입의 정형성(well-formedness)을 정의하는 규칙은 타입에 할당하는 카인드 규칙과 일치함&lt;/li&gt;
&lt;li&gt;이 규칙을 타입이 변수와 표현식에 타입 체킹을 하는 것처럼 카인드 체킹으로 일반화하여 확장시킴&lt;/li&gt;
&lt;li&gt;클래스나 언바운드 타입 매개변수 혹은 추상 타입 멤버는 하나의 K&amp;rsquo;  카인드의 타입 매개변수가 있을 경우 , K&amp;rsquo; → * 인 카인드를 받음&lt;/li&gt;
&lt;li&gt;바운드 타입 매개변수나 추상 멤버는 K&amp;rsquo; → K인 카인드를 할당받음, 이 때 K는 바운드 타입과 일치함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;타입-커링&#34;&gt;타입 커링&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;다중 타입 매개변수를 다루기 위해 이 스킴을 일반화하는데 커링을 사용함&lt;/li&gt;
&lt;li&gt;T[T&amp;rsquo;] 타입을 적용하면 T가 K&amp;rsquo; → K인 카인드를 가지며 T&amp;rsquo;가 K&amp;rsquo; 카인드로 분류될 때, K인 카인드를 지님&lt;/li&gt;
&lt;li&gt;타입 생성자 다형성으로 인한 Scala 확장의 문법적인 영향은 마이너함&lt;/li&gt;
&lt;li&gt;클래스와 타입 알리어스만 형식적인 타입 매개변수를 선언할 수 있었으나 타입 매개변수와 추상 멤버 타입을 포함하기 위해 확장됨&lt;/li&gt;
&lt;li&gt;다음은 추상 타입 생성자 멤버를 사용한 선택적인 형태임&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
	
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;2-2-improving-iterable&#34;&gt;2.2 Improving Iterable&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;타입 생성자 다형성은 설계 제약사항을 표현하는 데 필수적인 역할을 함&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Iterable의 map, filter, flatMap의 시그너쳐과 구현에 대해 논의함&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;map은 요소를 그 함수에 의해 지정된 요소로 변환함&lt;/li&gt;
&lt;li&gt;filter는 술부인 함수를 해석해서 이를 만족하는 요소만 유지함&lt;/li&gt;
&lt;li&gt;flatMap은 주어진 함수를 적용, 원본 콜렉션의 모든 요소에 대해 요소의 콜렉션을 만들고, 이런 콜렉션 내의 요소들을 수집해서 한 콜렉션으로 만듦 (&lt;a href=&#34;https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/flatMap.png&#34; target=&#34;_blank&#34;&gt;참고&lt;/a&gt;)
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;다음은 콜렉션의 반복을 캡슐화한 잘 알려진 Iterator 추상과 쌍으로 고려되는 Builder 추상임&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Unit&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;finalise&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Boolean&lt;/span&gt;
	
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Unit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Unit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Builder는 빌드하는 콜렉션을 나타내는 타입 생성자를 추상화함&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+=&lt;/code&gt;  메소드는 콜렉션에 나타나야 하는 순서로 요소를 공급하는데 사용됨&lt;/li&gt;
&lt;li&gt;콜렉션 자체는 &lt;code&gt;finalize&lt;/code&gt;에 반환됨&lt;/li&gt;

&lt;li&gt;&lt;p&gt;예) &lt;code&gt;Builder[List, Int]&lt;/code&gt;는 &lt;code&gt;ListBuffer[Int]&lt;/code&gt;로 생각할 수 있고, 이들 모두 &lt;code&gt;List[Int]&lt;/code&gt;를 만드는데 사용될 수 있음&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;다음은 mapTo/fiilterTo/flatMapTo가 어떻게 좀 더 유연하게 구현될 수 있는지 나타냄&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Buildable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;, &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
	
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
	
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mapTo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;U&lt;/span&gt;, &lt;span class=&#34;kt&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Buildable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buff&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elems&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;
		
		&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;el&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
		
		&lt;span class=&#34;n&#34;&gt;buff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;finalise&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filterTo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Buildable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buff&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elems&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;
		
		&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;el&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
		
		&lt;span class=&#34;n&#34;&gt;buff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;finalize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flatMapTo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;U&lt;/span&gt;, &lt;span class=&#34;kt&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Buildable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buff&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elems&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;
		
		&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elems&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
		
		&lt;span class=&#34;n&#34;&gt;buff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;finalize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
	
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Buildable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; 
		&lt;span class=&#34;n&#34;&gt;mapTo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;U&lt;/span&gt;, &lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
		
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Buildable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; 
		&lt;span class=&#34;n&#34;&gt;filterTo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
		
	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flatMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Buildable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; 
		&lt;span class=&#34;n&#34;&gt;flatMapTo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;U&lt;/span&gt;, &lt;span class=&#34;kt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;만들어진 콜렉션과 원본 콜렉션을 디커플링하는 것으로 제네릭화 함 - 이들은 같을 필요가 없음&lt;/li&gt;
&lt;li&gt;콜렉션을 반복하는 것과 콜렉션을 만드는 것은 서로 직교함 (의역: 연관성이 없음)&lt;/li&gt;
&lt;li&gt;즉, 콜렉션의 요소를 반복하기 위해 콜렉션을 빌드할 수 있어야 할 필요는 없음&lt;/li&gt;
&lt;li&gt;mapTo와 같은 좀 더 복잡한 연산의 경우, &lt;code&gt;Buildable[C]&lt;/code&gt;의 인스턴스가 필요함&lt;/li&gt;
&lt;li&gt;따라서, 콜렉션 C를 빌드하는 Iterable의 메소드는 &lt;code&gt;Buildable[C]&lt;/code&gt; 타입의 추가 매개변수를 취함&lt;/li&gt;
&lt;li&gt;섹션 3에서 Scala의 직교적인(orthogonal) 특징이 이 매개변수의 실제 인자를 공급하는데 있어 콜러(caller)를 어떻게 해방시키는지 살펴볼 것임
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;용어&#34;&gt;용어&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;국문&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;영문&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;일차 매개변수적 다형성&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;First-order parametric Polymorphism&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;타입 생성자&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Type Constructor&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;타입 생성자 다형성&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Type Constructor Polymorphism&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;타입 매개변수화 클래스&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Type Parametised Class&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;제네럴티&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Generality&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;카인드&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Kind&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;추상 타입 멤버&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Abstract Type Member&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;카인드 안정성&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Kind soundness&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
      
    </item>
    
    <item>
      <title>Principles of Reactive Programming</title>
      <link>https://ziwon.github.io/post/principles-of-reactive-programming/</link>
      <pubDate>Wed, 22 Jan 2014 11:15:43 +0900</pubDate>
      <author>Philbert Yoon</author>
      <guid>https://ziwon.github.io/post/principles-of-reactive-programming/</guid>
      <description></description>
      
      <content>&lt;p&gt;Finally got my certificate for the Coursera &amp;ldquo;Principles of Reactive Programming&amp;rdquo; course. :)
It was rather easy in the beginning, but became more challenging as it
went on. Now where to go?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../coursera_reactive_2014.jpg&#34;/&gt;&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Lambda Calculus</title>
      <link>https://ziwon.github.io/post/lambda-calculus/</link>
      <pubDate>Tue, 22 Oct 2013 13:03:05 +0900</pubDate>
      <author>Philbert Yoon</author>
      <guid>https://ziwon.github.io/post/lambda-calculus/</guid>
      <description></description>
      
      <content>

&lt;p&gt;람다 대수는 결정문제(decision problem)를 풀기 위해, 계산가능성(computability)의 개념을 정의한 수학적 모델로 1936년 &lt;a href=&#34;http://en.wikipedia.org/wiki/Alonzo_Church&#34; target=&#34;_blank&#34;&gt;알로존 처치&lt;/a&gt;(Alonzo Church)가 고안하였다.&lt;/p&gt;

&lt;p&gt;좀 더 구체적으로는 소프트웨어에서 &amp;lsquo;알고리즘이란 무엇인가?&amp;lsquo;를 정의한 클래스(class)나 객체(object)가 아닌 값(function) 중심 언어, 즉 함수형 언어의 계산 모델이다. (같은 해에 처치의 제자였던, &lt;a href=&#34;http://en.wikipedia.org/wiki/Alan_Turing&#34; target=&#34;_blank&#34;&gt;앨런 튜닝&lt;/a&gt;은 튜링 머신의 개념으로 계산 모델을  정의했다. Lisp를 만든 &lt;a href=&#34;http://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist))도 처치의 제자였다고 한다.&#34; target=&#34;_blank&#34;&gt;존 매카시&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/thumb/a/a6/Alonzo_Church.jpg/220px-Alonzo_Church.jpg&#34; alt=&#34;&#39;알론조 처치&#39;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;람다 대수는 그 자체가 이미 하나의 언어로 많은 함수형 프로그래밍 언어가 람다대수에 기초하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;functional language = lambda calcus + sugars (ex. Lisp, ML, Haskell, Scala.. ) [&lt;a href=&#34;http://ropas.snu.ac.kr/~dreameye/PL/slide/PL7.pdf&#34; title=&#34;dreameye님의 람다계산법&#34; target=&#34;_blank&#34;&gt;1&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;즉, 우리가 함수를 정의하고 전달하고 반환하는 모든 것들이 람다 대수의 원리를 따르는 계산인 것이다.&lt;/p&gt;

&lt;p&gt;이상 아래의 내용은 &amp;ldquo;A Tutorial Introduction to the Lambda Calculus[&lt;a href=&#34;http://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf&#34; title=&#34;A Tutorial Introduction to the Lambda Calculus&#34; target=&#34;_blank&#34;&gt;2&lt;/a&gt;]&amp;ldquo;의 내용 중 일부를 중심으로. 필요한 경우 살을 붙여가며, 간략히 요약한 것이다.&lt;/p&gt;

&lt;h3 id=&#34;람다표현식-expression&#34;&gt;람다표현식 (expression)&lt;/h3&gt;

&lt;p&gt;람다 대수에서는 모든 계산 가능한 함수를 람다로 표현할 수 있는데, 람다 표현식(λ expression)은 다음과 같이 재귀적으로 정의된다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;expression&amp;gt;  := &amp;lt;name&amp;gt; | &amp;lt;function&amp;gt; | &amp;lt;application&amp;gt;
&amp;lt;function&amp;gt;    := λ&amp;lt;name&amp;gt;.&amp;lt;expression&amp;gt;
&amp;lt;application&amp;gt; := &amp;lt;expression&amp;gt; &amp;lt;expression&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위에서 보다시피, 표현식(expression)은 사상점을 식별하는 변수나 혹은 함수 본문을 정의하고 있는 사상(abstraction)이거나 사상을 특화하는 적용(application)으로 구성된다.&lt;/p&gt;

&lt;p&gt;람다 대수에서 키워드는 \(λ\) 와 \(.\)이다. 표현식을 분명하게 표기하기 위해 괄호를 사용한다. 예를 들어, 표현식 \(E\)는 \((E)\)와 동일하다. 혼란을 피하기 위해 함수의 적용(application)은 왼쪽으로 결합한다. 따라서, 표현식 $$E_1E_2E_3&amp;hellip;E_n$$ 은 아래와 같이 표현식을 적용하며 평가된다. $$(&amp;hellip;((E_1E_2)E_3)&amp;hellip;E_n)$$&lt;/p&gt;

&lt;p&gt;예를 들면, 함수 \(f(x) = x\)은 람다식으로 다음과 같다.&lt;/p&gt;

&lt;p&gt;$$λx.x$$&lt;/p&gt;

&lt;p&gt;위 표현식은 항등함수(identity function)를 정의한다. &lt;code&gt;λ&lt;/code&gt; 표기 다음의 이름은 이 함수 인자의 식별자라 하고, &lt;code&gt;.&lt;/code&gt; 표기 다음의 표현식을 함수 정의의 본문(body)이라고 한다.&lt;/p&gt;

&lt;p&gt;함수는 표현식에 적용될 수 있다. 적용(application)의 예는 다음과 같다.&lt;/p&gt;

&lt;p&gt;$$(λx.x)y$$&lt;/p&gt;

&lt;p&gt;이는 &lt;code&gt;y&lt;/code&gt;에 적용된 항등함수이다. 함수 적용은 함수를 정의하는 본문 안에서 인자의 값 &lt;code&gt;x&lt;/code&gt;를 치환함으로써 (여기서는 &lt;code&gt;y&lt;/code&gt;로) 평가된다. 예를 들면, 다음과 같다.&lt;/p&gt;

&lt;p&gt;$$(λx.x)y = [y/x]x = y$$&lt;/p&gt;

&lt;p&gt;위 변환에서 &lt;code&gt;[y/x]&lt;/code&gt; 표기는 표현식에서 모든 경우의 &lt;code&gt;x&lt;/code&gt;가 &lt;code&gt;y&lt;/code&gt;에 의해 오른쪽으로 치환되는 것을 나타낸다. 그리고, 람다식에서 람다 식별자인 이름은 단순한 플레이스홀더에 지나지 않는다. 따라서, 다음은 동등하다.&lt;/p&gt;

&lt;p&gt;$$(λz.z) ≡ (λy.y) ≡ (λt.t) ≡ (λu.u)$$&lt;/p&gt;

&lt;h3 id=&#34;자유-변수와-종속-변수-free-variable-and-bound-variable&#34;&gt;자유 변수와 종속 변수 (free variable and bound variable)&lt;/h3&gt;

&lt;p&gt;람다 대수에서 사상(abstraction)의 정의에 해당하는 모든 이름은 지역(local)이다. 함수 $λx.x$에서 &lt;code&gt;x&lt;/code&gt;는 &lt;code&gt;x&lt;/code&gt;로 시작하는 정의의 본문 안에 나타나므로 &amp;ldquo;종속된다&amp;rdquo;라고 말한다. &lt;code&gt;λ&lt;/code&gt;로 시작하지 않는 이름을 자유 변수(free variable), 또는 비지역(non-local)이라고 일컫는다.&lt;/p&gt;

&lt;p&gt;예를 들면, 아래의 표현식에서 $$(λx.xy)$$ 에서 변수 &lt;code&gt;x&lt;/code&gt;는 종속되나 &lt;code&gt;y&lt;/code&gt;는 자유롭다. 아래의 표현식에서, $$(λx.x)(λy.yx)$$ &lt;code&gt;x&lt;/code&gt;는 왼쪽에서 첫째 표현식의 본문에서는 첫번째 &lt;code&gt;λ&lt;/code&gt;에 종속된다. 두 번째 표현식의 본문에서 &lt;code&gt;y&lt;/code&gt;는 두 번째 &lt;code&gt;y&lt;/code&gt;에 종속되나 &lt;code&gt;x&lt;/code&gt;는 자유롭다. 두 번째 표현식의 &lt;code&gt;x&lt;/code&gt;가 첫 번째 표현식의 &lt;code&gt;x&lt;/code&gt;에 대해서 완전히 독립적이라는 것은 매우 중요하다.&lt;/p&gt;

&lt;p&gt;표현식에서 변수 &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;이 다음의 3가지 경우에 해당할 때, 자유 변수라고 한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;은 &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;의 자유 변수이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;은 &lt;code&gt;λ&amp;lt;name1&amp;gt;&lt;/code&gt;의 자유 변수이다. (단, 식별자 &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;이 &lt;code&gt;&amp;lt;name1&amp;gt;&lt;/code&gt;과 다른 &lt;code&gt;&amp;lt;exp&amp;gt;&lt;/code&gt;이고, &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;이 &lt;code&gt;&amp;lt;exp&amp;gt;&lt;/code&gt;의 자유 변수일 때)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;은 &lt;code&gt;E1E2&lt;/code&gt;의 자유 변수이다. (단, &lt;code&gt;E1&lt;/code&gt;의 자유 변수이거나 혹은 &lt;code&gt;E2&lt;/code&gt;의 자유 변수일때)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 다음의 두 가지 경우에 한해서 &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; 변수를 종속 변수라고 한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;은 &lt;code&gt;λ&amp;lt;name1&amp;gt;&lt;/code&gt;의 종속 변수이다. (단, 식별자 &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;이 &lt;code&gt;&amp;lt;name1&amp;gt;&lt;/code&gt;과 같고 &lt;code&gt;&amp;lt;exp&amp;gt;&lt;/code&gt;이고, &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;이 &lt;code&gt;&amp;lt;exp&amp;gt;&lt;/code&gt;의 종속 변수일 때)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;은 &lt;code&gt;E1E2&lt;/code&gt;의 종속 변수이다. (단, &lt;code&gt;E1&lt;/code&gt;의 종속 변수이거나 혹은 &lt;code&gt;E2&lt;/code&gt;의 종속 변수일때)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이를 수식화하면, 람다 표현식 &lt;code&gt;E&lt;/code&gt;의 자유 변수 집합 &lt;code&gt;M&lt;/code&gt;은 &lt;code&gt;FV(M)&lt;/code&gt;으로 다음과 같다.&lt;/p&gt;

&lt;p&gt;$$FV(x) = {x}$$
$$FV (λx.E) = FV (E)\space/\space{x}$$
$$FV(E1 E2) = FV(E1)∪FV(E2)$$&lt;/p&gt;

&lt;p&gt;한 표현식에서 동일한 식별자가 자유 변수와 종속 변수가 될 수 있음을 주의해야 한다. 아래의 표현식에서,&lt;/p&gt;

&lt;p&gt;$$ (λx.xy)(λy.y) $$&lt;/p&gt;

&lt;p&gt;첫 번째 &lt;code&gt;y&lt;/code&gt;는 왼쪽 방향의 괄호로 묶인 하위 표현식에서는 자유 변수이다. 그러나 오른쪽 방향의 하위 표현식에서는 종속 변수이다.&lt;/p&gt;

&lt;p&gt;자유 변수가 없는 표현식을 닫혀 있다(closed)라고 한다. 닫힌 람다 표현식(Closed lambda expression)을 컴비네이터(combinator)라고도 한다.&lt;/p&gt;

&lt;h3 id=&#34;치환-substitutions&#34;&gt;치환 (Substitutions)&lt;/h3&gt;

&lt;p&gt;함수를 적용할 때마다, 전체 함수 정의를 쓰고 다음에 이를 평가한다. 그러나 단순하게 표기하기 위해 대문자, 숫자 그리고 어떤 함수 정의와 동치로 기호를 사용한다. 예를 들면, 항등함수는 {% m %} (λx.x) {% em %}의 동치로 {% m %} I {% em %} 기호로 표기한다.&lt;/p&gt;

&lt;p&gt;자신에 적용된 항등 함수의 적용은 다음과 같다.&lt;/p&gt;

&lt;p&gt;$$ II ≡ (λx.x)(λx.x) $$&lt;/p&gt;

&lt;p&gt;이 표현식에서 괄호로 묶인 첫 번째 표현식의 본문에 있는 첫 번째 &lt;code&gt;x&lt;/code&gt;는 두 번째 표현식 본문의 &lt;code&gt;x&lt;/code&gt;와 별개의 것이다. 사실, 우리는 위 표현식을 아래와 같이 쓸 수 있다.&lt;/p&gt;

&lt;p&gt;$$ II ≡ (λx.x)(λz.z) $$&lt;/p&gt;

&lt;p&gt;그러므로, 자신에 적용된 항등 함수&lt;/p&gt;

&lt;p&gt;$$ II ≡ (λx.x)(λz.z) $$&lt;/p&gt;

&lt;p&gt;는 다음의 결과를 따르게 된다.&lt;/p&gt;

&lt;p&gt;$$ [λz.z/x]x = λz.z ≡ I $$&lt;/p&gt;

&lt;p&gt;즉, 또 항등함수이다.&lt;/p&gt;

&lt;p&gt;치환을 수행할 때는 식별자의 자유 변수 사건이 종속 변수 사건과 뒤섞이지 않도록 주의해야 한다. 다음 표현식에서&lt;/p&gt;

&lt;p&gt;$$ (λx.(λy.xy))y $$&lt;/p&gt;

&lt;p&gt;(괄호 밖의) 오른쪽 &lt;code&gt;y&lt;/code&gt;는 자유 변수인 반면, 왼쪽에 있는 함수의 &lt;code&gt;y&lt;/code&gt;는 종속 변수이다. 부정확한 치환으로 두 식별자를 합치면 잘못된 결과를 얻는다.&lt;/p&gt;

&lt;p&gt;$$ (λy.yy) $$&lt;/p&gt;

&lt;p&gt;단순히 종속 변수 &lt;code&gt;y&lt;/code&gt;를 &lt;code&gt;t&lt;/code&gt;로 변경하면, 정확한 치환에 의해 완전히 다른 결과를 얻는다.&lt;/p&gt;

&lt;p&gt;$$ (λx.(λt.xt))y = (λt.yt) $$&lt;/p&gt;

&lt;p&gt;&lt;code&gt;E&lt;/code&gt;를 함수 &lt;code&gt;λx.&amp;lt;exp&amp;gt;&lt;/code&gt;에 적용할 경우, &lt;code&gt;&amp;lt;exp&amp;gt;&lt;/code&gt;의 모든 자유 변수 &lt;code&gt;x&lt;/code&gt;는 &lt;code&gt;E&lt;/code&gt;로 치환한다. 표현식에서 종속변수가 &lt;code&gt;E&lt;/code&gt;의 자유변수로 치환될 경우, 치환하기 전에 종속 변수를 새이름으로 변경한다. 예를 들면, 아래의 표현식에서&lt;/p&gt;

&lt;p&gt;$$ (λx.(λy.(x(λx.xy))))y $$&lt;/p&gt;

&lt;p&gt;인자 &lt;code&gt;x&lt;/code&gt;는 &lt;code&gt;y&lt;/code&gt;로 결합시키는데, 함수 본문에서는 첫 번째 &lt;code&gt;x&lt;/code&gt;만이 자유 변수이고 치환될 수 있다. 그래도 치환을 하기 전에 변수 &lt;code&gt;y&lt;/code&gt;의 종속 변수가 자유 변수의 경우와 섞이지 않도록 이름을 변경하자.&lt;/p&gt;

&lt;p&gt;$$ [y/x]λt.(x(λx.xt))) = (λt.(y(λx.xt))) $$&lt;/p&gt;

&lt;h3 id=&#34;call-by-value-call-by-name-call-by-need&#34;&gt;call by value, call by name, call by need&lt;/h3&gt;

&lt;p&gt;표현식을 평가할 때, 안쪽에서 바깥쪽으로 평가하는 전략을 &lt;strong&gt;Application order&lt;/strong&gt; 라고 하며, &lt;strong&gt;call by value&lt;/strong&gt; 이라고 알려져 있다. 예를 들면, 다음과 같다.&lt;/p&gt;

&lt;p&gt;$$ (λx.x^2(λx.(x+2)\space2))) → (λx.x^2(2+2)) → (λx.x^2(4)) → 4^2 → 16 $$&lt;/p&gt;

&lt;p&gt;반면에, 바깥쪽에서 안쪽으로 평가하는 전략을 &lt;strong&gt;Normal order&lt;/strong&gt; 라고 하며 이는 &lt;strong&gt;call by name&lt;/strong&gt; 이라고 알려져 있다. 예를 들면, 다음과 같다.&lt;/p&gt;

&lt;p&gt;$$ (λx.x^2(λx.(x+2)\space2)) → (λx.(x+2)\space2)^2 → (2+2)^2 → 4^2 → 16 $$&lt;/p&gt;

&lt;p&gt;위에서 보다시피, Normal order는 인자의 평가를 필요할 때까지 지연시키기 때문에 Normal order를 &lt;strong&gt;지연 평가(lazy evaluation)&lt;/strong&gt; 라고 부른다. (※. SICP 참고[&lt;a href=&#34;http://mitpress.mit.edu/sicp/full-text/sicp/book/node85.html&#34; target=&#34;_blank&#34;&gt;3&lt;/a&gt;])&lt;/p&gt;

&lt;p&gt;위키 정의를 따르면, ** call by need ** 은 아래와 같이 call by name의 최적화된 형태이다. 매번 call by name이 발생할 경우, 함수 본문은 동일하기 때문에 매번 평가할 필요가 없다. 따라서, call by need 에서는 중복적인 연산을 피하기 위해 cache 형태로 값을 저장하여 최초에 한번만 평가한다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Call-by-need is a memoized version of call-by-name where, if the function argument is evaluated, that value is stored for subsequent uses [&lt;a href=&#34;http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_need&#34; target=&#34;_blank&#34;&gt;4&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;lazy-evaluation&#34;&gt;Lazy evaluation&lt;/h4&gt;

&lt;p&gt;어떨 때는 *lazy*를 call by name과 call by need를 모두 지칭하지만, 어떨 때는 call by need만을 지칭하기도 한다. 특히, Haskell에서 Lazy evaluation은 기술적으로 non-strict와 sharing, 즉 call by need를 뜻한다.[&lt;a href=&#34;http://www.haskell.org/haskellwiki/Lazy_evaluation&#34; target=&#34;_blank&#34;&gt;5&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;이러한 충돌은 논문에서도 살펴볼 수 있다. 어떤 이는 call by name을 &lt;code&gt;lazy&lt;/code&gt;라고, 어떤 이는 call by need를 &lt;code&gt;lazy&lt;/code&gt;라고 지칭한다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;예를 들면, Abramsky의 논문 &amp;lsquo;The Lazy Lambda Calculus (1990)&amp;lsquo;에서는 &amp;lsquo;call by name&amp;rsquo;을 &amp;lsquo;lazy&amp;rsquo;라고 칭하고 있다. 반면에, Odersky 교수가 참여한 논문 &amp;lsquo;A Call-By-Need Lambda Calculus (1995)&amp;lsquo;에서는 Abramsky의 논문에서의 &amp;lsquo;lazy&amp;rsquo;라는 표현과 충돌을 피하기 위해 &amp;lsquo;call by need&amp;rsquo;라고 표현하고 있다. [&lt;a href=&#34;http://lampwww.epfl.ch/~odersky/papers/popl95.ps.gz&#34; title=&#34;A Call-By-Need Lambda Calculus&#34; target=&#34;_blank&#34;&gt;6&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Odersky 논문에서 보듯, 람다 대수를 이용한 프로그래밍 언어에 있어 &amp;lsquo;call by need&amp;rsquo;는 컴파일러 성능과 직결된 중요한 기능이기 때문에 lazy evaluation을 sharing, caching, memoziation 등의 최적화 기법과 연관짓게 된다. 그러나, 일반적으로 표현식이 그 값이 필요할 때까지 평가되지 않는 것을 &amp;lsquo;lazy evaluation&amp;rsquo; 이라고 말하므로 call by name과 call by need 모두 이에 해당한다.&lt;/p&gt;

&lt;p&gt;중요한 것은 call by value, call by name, call by need의 차이를 아는 것이다.&lt;/p&gt;

&lt;h3 id=&#34;산술-arithmetic&#34;&gt;산술 (Arithmetic)&lt;/h3&gt;

&lt;p&gt;우리는 프로그래밍 언어에서 산술적인 계산을 할 수 있어야 한다고 기대한다. 람다 대수에서 숫자는 &lt;code&gt;zero&lt;/code&gt;에서 시작해서 &lt;code&gt;suc(zero)&lt;/code&gt;라 쓰고 1을, &lt;code&gt;suc(suc(zeo))&lt;/code&gt;라 쓰고 2를, 그리고 기타등등 이런 식으로 표현한다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zero&lt;/code&gt;는 다음과 같이 정의될 수 있다.&lt;/p&gt;

&lt;p&gt;$$ λs.(λz.z) $$&lt;/p&gt;

&lt;p&gt;이는 &lt;code&gt;s&lt;/code&gt;와 &lt;code&gt;z&lt;/code&gt; 두 개의 인자를 지닌 함수이다. 하나 이상의 인자를 지닌 표현식을 다음과 같이 축약한다.&lt;/p&gt;

&lt;p&gt;$$ λsz.z $$&lt;/p&gt;

&lt;p&gt;즉, &lt;code&gt;s&lt;/code&gt;는 평가시 치환되는 첫 번째 인자이고, &lt;code&gt;z&lt;/code&gt;는 두 번째 인자이다. 이 표기를 사용해 자연수는 다음과 같이 정의된다.&lt;/p&gt;

&lt;p&gt;$$ 1 ≡ λsz.s(z) $$
$$ 2 ≡ λsz.s(s(z)) $$
$$ 3 ≡ λsz.s(s(s(z))) $$&lt;/p&gt;

&lt;p&gt;따라서, 처치의 자연수는 &lt;code&gt;n&lt;/code&gt;에 대응되는 함수를 &lt;code&gt;n&lt;/code&gt;회 반복해서 실행한다.&lt;/p&gt;

&lt;p&gt;$$ n ≡ λsz.s^n(z) $$&lt;/p&gt;

&lt;p&gt;흥미로운 것은 계승자 함수이다. &lt;code&gt;y&lt;/code&gt;의 추가적인 적용으로 자연수 &lt;code&gt;y&lt;/code&gt;를 입력받아 &lt;code&gt;y + 1&lt;/code&gt;을 반환하는 계승자 함수(successor)를 다음과 같이 정의할 수 있다.&lt;/p&gt;

&lt;p&gt;$$ S ≡ λwyx.y(wyx) $$&lt;/p&gt;

&lt;p&gt;계승자 함수에 &lt;code&gt;zero&lt;/code&gt;를 적용하면, 다음을 도출한다.&lt;/p&gt;

&lt;p&gt;$$ S0 ≡ (λwyx.y(wyx))(λsz.z) $$&lt;/p&gt;

&lt;p&gt;첫 번째 표현식 본문에 &lt;code&gt;w&lt;/code&gt;를 &lt;code&gt;(λsz.z)&lt;/code&gt;로 치환하면 자연수 1에 대응된다.&lt;/p&gt;

&lt;p&gt;$$ λyx.y((λsz.z)yx) = λyx.y((λz.z)x) = λyx.y(x) ≡ 1 $$&lt;/p&gt;

&lt;p&gt;계승자 함수에 &lt;code&gt;1&lt;/code&gt;를 적용하면, 자연수 2에 대응된다.&lt;/p&gt;

&lt;p&gt;$$ S1 ≡ (λwyx.y(wyx))(λsz.s(z)) = λyx.y((λsz.s(z))yx) = λyx.y(y(x)) ≡ 2 $$&lt;/p&gt;

&lt;p&gt;(이하 중략)&lt;/p&gt;

&lt;p&gt;이상, 람다 대수로 자연수와 그 연산을 표현하는 것을 처치 부호화(Church encoding)라고 한다.[&lt;a href=&#34;http://en.wikipedia.org/wiki/Church_encoding&#34; title=&#34;Church encoding&#34; target=&#34;_blank&#34;&gt;7&lt;/a&gt;]&lt;/p&gt;

&lt;h3 id=&#34;결론&#34;&gt;결론&lt;/h3&gt;

&lt;p&gt;이상, 람다계산법에 대해 간략히 살펴보았다. 짧게나마 살펴보니, 람다계산법을 공부할수록 쉽게 함수형 프로그래밍의 원리를 이해할 수 있을 것 같다.&lt;/p&gt;
</content>
      
    </item>
    
  </channel>
</rss>