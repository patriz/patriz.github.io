<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Channel on Philbert</title>
    <link>https://ziwon.github.io/tags/channel/</link>
    <description>Recent content in Channel on Philbert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Fri, 25 Sep 2015 11:01:21 +0900</lastBuildDate>
    <atom:link href="https://ziwon.github.io/tags/channel/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[번역] Effective Go: Concurrency</title>
      <link>https://ziwon.github.io/posts/effective-go-concurrency/</link>
      <pubDate>Fri, 25 Sep 2015 11:01:21 +0900</pubDate>
      
      <guid>https://ziwon.github.io/posts/effective-go-concurrency/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html#concurrency&#34;&gt;Effective Go&lt;/a&gt; 의 &lt;a href=&#34;https://web.archive.org/web/20160115102611/https://code.google.com/p/golang-korea/wiki/EffectiveGo?can=1#동시성(Concurrency)&#34;&gt;한글화 문서&lt;/a&gt;를 보던 중, Concurrency에 대한 부분이 빠져 있어서 해당 부분만 따로 번역해보았다. 원문의 출처는 &lt;a href=&#34;https://golang.org/doc/effective_go.html#concurrency&#34;&gt;여기&lt;/a&gt;다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;통신에-의한-공유-share-by-communicating&#34;&gt;통신에 의한 공유 (Share by communicating)&lt;/h2&gt;

&lt;p&gt;병행 프로그래밍 (Concurrent Programming)은 큰 주제이므로 여기에는 Go 특정적으로 강조되는 지면만 있습니다.&lt;/p&gt;

&lt;p&gt;여러 환경에서 병행 프로그래밍은 공유 변수에 대한 정확한 억세스를 구현하는데 필요한 중요한 세부사항들로 어렵게 만들어졌습니다. Go는 공유 변수가 채널로 전달되는 다른 접근을 권장합니다. 실제로는, 분리된 스레드들의 실행에 의해 전혀 공유되지 않습니다. 언제든지 하나의 고루틴만이 값에 억세스합니다. 데이터 경쟁 (Data Race)은 구현 설계상 발생할 수 없습니다. 우리는 이 사고방식을 권장하기 위해 이를 한 슬로건으로 줄여 보았습니다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;공유 메모리로 통신하지 마세요. 대신, 통신으로 메모리를 공유하세요. (Do not communicate by sharing memory; instead, share memory by communicating)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이런 접근은 너무 지나친 것일 수 있습니다. 예를 들어, 정수형 변수 주위에 뮤텍스를 두는 방식의 레퍼런스 카운트 (Reference Count)가 최고일지도 모르죠. 그러나 상위 레벨에서 접근하자면, 억세스를 제어하는 채널을 사용하는 것이 분명하고 정확한 프로그램을 보다 쉽게 작성케 합니다.&lt;/p&gt;

&lt;p&gt;이 모델에 대해 생각하는 방법 중 하나는 하나의 CPU에서 실행되는 일반적인 단일 스레드 프로그램을 생각해보는 것입니다. 이는 동기화 기본 자료형이 필요 없습니다. 지금 또 하나의 그 인스턴스를 실행하므로 역시 동기화가 필요하지 않습니다. 이제 그 두 개를 통신하게 하는데, 통신이 동기화 장치 (synchronizer)인 경우, 여전히 다른 동기화가 필요 없습니다. 예를 들어, 유닉스 파이프 라인은 이 모델에 완벽하게 들어 맞습니다. 동시성에 대한 Go의 접근 방식이 호어의 통신 순차적 프로세스 (CSP, Communicating Sequential Processes)에서 비롯되었지만, 유닉스 파이프의 타입 세이프 일반화 (type-safe generalization)로도 볼 수 있습니다.&lt;/p&gt;

&lt;h2 id=&#34;고루틴-goroutines&#34;&gt;고루틴 (Goroutines)&lt;/h2&gt;

&lt;p&gt;스레드, 코루틴, 프로세스 등 기존의 용어는 부정확 함의를 전달하기 때문에 그들을 고루틴이라고 부릅니다. 고루틴은 단순한 모델을 가집니다. 고루틴은 같은 주소 공간 내에 다른 고루틴과 함께 동시에 실행되는 함수입니다. 스택 영역을 할당하는 것에 비해 거의 비용이 들지 않으므로 가볍습니다. 그리고 그 스택은 작은 규모로 시작합니다. 그래서 그들은 저렴하고, 필요에 따라 힙 스토리지를 할당(또는 해제)하여 자랍니다.&lt;/p&gt;

&lt;p&gt;고루틴은 I/O를 위해 대기하는 동안이라든지, 실행되는 연속 작업들처럼 하나가 블락이 되면, 다중 OS 스레드에 멀티플렉싱됩니다. 이러한 설계는 스레드 생성 및 관리에 대한 여러가지 복잡성을 숨깁니다.&lt;/p&gt;

&lt;p&gt;새로운 고루틴의 호출을 실행하기 위해 &lt;code&gt;go&lt;/code&gt; 키워드를 함수 또는 메소드 호출 앞에 둡니다. 호출이 완료되면, 고루틴은 자동으로 종료됩니다. (백그라운드에서 실행되는 명령의 유닉스 쉘 및 표기법과 유사한 효과입니다.)&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;list.Sort()&lt;/span&gt;  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// list.Sort를 기다리지 말고 동시에 실행&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;함수 리터럴은 고루틴 호출에 유용할 수 있습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Announce(message&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;delay&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;time.Duration)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;time.Sleep(delay)&lt;/span&gt;
        &lt;span style=&#34;color: #d0d0d0&#34;&gt;fmt.Println(message)&lt;/span&gt;
    &lt;span style=&#34;color: #d0d0d0&#34;&gt;}()&lt;/span&gt;  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;//괄호 주목 - 반드시 함수를 호출해야 함&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go에서 함수 리터럴은 클로저입니다. 그러므로 함수에 의해 참조되는 변수는 반드시 그들이 액티브되는 한 오래 생존할 수 있게 구현해야 합니다.&lt;/p&gt;

&lt;p&gt;위의 예제는 함수가 시그널링을 종료하는 방법이 없기 때문에 아주 실용적이진 않습니다.  이를 위해 채널이 필요합니다.&lt;/p&gt;

&lt;h2 id=&#34;채널-channels&#34;&gt;채널 (Channels)&lt;/h2&gt;

&lt;p&gt;맵과 마찬가지로, 채널은 &lt;code&gt;make&lt;/code&gt;로 할당되고 , 그 결과 값은 실제 데이터 구조에 대한 참조로서 동작합니다. 선택적인 정수형 매개변수가 주어지는 경우, 채널에 대한 버퍼 크기를 설정합니다. 이 값은 언버퍼드(Unbuffered) 또는 동기 채널에 대해서 기본값이 0입니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #d0d0d0&#34;&gt;ci&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;            &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 정수형의 언버퍼드 채널&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;cj&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;         &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 정수형의 언버퍼드 채널&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;cs&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*os.File,&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// File 포인터형의 버퍼드 채널&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;언버퍼드 채널은 두 계산 (고루틴들) 상태를 알고 있다는 것을 보장하는 동기화로 값을 교환하는 방식의 통신을 결합합니다.&lt;/p&gt;

&lt;p&gt;채널을 사용하는 멋진 용법들이 많이 있습니다. 다음 한 예제로 시작해 봅시다. 이전 섹션에서 백그라운드에서 정렬을 했습니다. 채널은 정렬이 완료될 때까지 고루틴 실행을 대기시킬 수 있습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #d0d0d0&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 채널 할당&lt;/span&gt;
  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 고루틴에서 정렬 시작. 완료되면 채널 시그널을 On시킴&lt;/span&gt;
  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;list.Sort()&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;//  시그널을 보냄, 값은 문제가 안됨&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}()&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;doSomethingForAWhile()&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-c&lt;/span&gt;   &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 정렬이 멈출 때까지 기다림, 받은 값은 버림&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;수신할 데이터가 있을 때까지 수신부는 항상 블락됩니다. 언버퍼드 채널인 경우,  송신부는 수신부가 값을 받을 때까지 블락됩니다. 버퍼드 채널인 경우, 값이 버퍼에 복사될 때까지만 송신부가 블락됩니다. 그러므로 버퍼가 가득 찼다면, 이는 어느 수신부가 값을 획득할 때까지 기다리고 있다는 것을 의미합니다.&lt;/p&gt;

&lt;p&gt;버퍼드 채널은 세마포처럼 사용될 수 있습니다. 예를 들어 처리량을 제한하는 거죠. 이 예제에서, 들어오는 요청은 채널에 값을 전달하는  &lt;code&gt;handle&lt;/code&gt;에 전달되고 요청을 처리한 후, 다음 (요청) 소비자에 대해 세마포를 준비하는 채널에서 값을 수신합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;sem&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;MaxOutstanding)&lt;/span&gt;

  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;handle(r&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Request)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;sem&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 액티브큐가 비워질 때까지 대기&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;process(r)&lt;/span&gt;  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 다소 시간이 걸리는 작업&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-sem&lt;/span&gt;       &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 완료, 실행되는 다음 요청을 활성화&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Serve(queue&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Request)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-queue&lt;/span&gt;
          &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;handle(req)&lt;/span&gt;  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 완료될 때가지 대기하지 않음&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;일단 MaxOutstanding 핸들러가 &lt;code&gt;process&lt;/code&gt;를 실행하면, 기존 핸들러 중 하나가 완료되고 버퍼로부터 값을 받을 때까지 충전된 채널 버퍼에 보내려는 그 무엇도 블락하지 않습니다.&lt;/p&gt;

&lt;p&gt;그러나 이 설계는 문제가 있습니다. 이들 중 항상 &lt;code&gt;MaxOutstanding&lt;/code&gt;만이 실행되는데도, 서버가 들어오는 모든 요청에 대해 새로운 고루틴을 생성한다는 것입니다. 그 결과, 요청이 너무 빨리 들어올 경우, 무제한으로 리소스를 소비할 수 있습니다. 이 결함은  &lt;code&gt;Serve&lt;/code&gt;를 고루틴을 생성하는 게이트로 수정함으로써 다룰 수 있습니다. 확실한 솔루션은 다음과 같습니다. 하지만, 이어서 수정하게 될 버그에 주의하세요.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Serve(queue&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Request)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;queue&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;sem&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;
          &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
              &lt;span style=&#34;color: #d0d0d0&#34;&gt;process(req)&lt;/span&gt; &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 버그. 아래 설명을 참조&lt;/span&gt;
              &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-sem&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;}()&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;버그는 Go &lt;code&gt;for&lt;/code&gt; 루프 내에 있습니다. 루프 변수는 각 반복마다 재사용되는데, 따라서 동일한 &lt;code&gt;req&lt;/code&gt; 변수가 모든 고루틴에 걸쳐 공유됩니다. 이는 우리가 원하는 것이 아니죠.  각 고루틴마다 구별된 &lt;code&gt;req&lt;/code&gt; 변수를 가지도록 해야합니다. 다음은 이를 위한 한 가지 방법입니다. 고루틴의 클로져에 대한 인자로 &lt;code&gt;req&lt;/code&gt; 값을 전달하는 거죠.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Serve(queue&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Request)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;queue&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;sem&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;
          &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(req&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Request)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
              &lt;span style=&#34;color: #d0d0d0&#34;&gt;process(req)&lt;/span&gt;
              &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-sem&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;}(req)&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이전 버전과 클로져가 어떻게 선언되고 실행되는지 차이점을 보기 위해 다음 버전을 비교해보세요. 또다른 솔루션은 그냥 같은 이름의 새로운 변수를 생성하는 것입니다. 예제에서 보는 것처럼요.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Serve(queue&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Request)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;queue&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 고루틴에 대해 새로운 req 인스턴스를 생성&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;sem&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;
          &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
              &lt;span style=&#34;color: #d0d0d0&#34;&gt;process(req)&lt;/span&gt;
              &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-sem&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;}()&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;작성하는데 이상해 보일지도 모르겠네요.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #d0d0d0&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;req&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;하지만 Go에서 이렇게 하는 것은 합법적이고 관용적인 것입니다.  똑같은 이름의 지닌 새로운 버전의 변수를 가지게 되는데, 이는 의도적으로 루프 변수를 (지역적으로) 가리게 되지만 각 고루틴에 대해서는 유니크한 값입니다.&lt;/p&gt;

&lt;p&gt;서버를 작성하는 일반적인 문제로 돌아가자면, 리소스를 잘 관리하는 다른 방법은 요청 채널을 읽는 모든  &lt;code&gt;handle&lt;/code&gt; 고루틴을 고정된 수에서 시작하는 것입니다.  고루틴의 수는 &lt;code&gt;process&lt;/code&gt;가 동시에 호출되는 수를 제한합니다. 이 &lt;code&gt;Serve&lt;/code&gt; 함수는 종료 신호를 수신하게 되는 채널 또한 (함수 매개변수로) 허용하고 있습니다. 고루틴이 시작되면, 이 채널로부터의 수신은 블락됩니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;handle(queue&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Request)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;queue&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;process(r)&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Serve(clientRequests&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Request,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;quit&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 핸들러 시작&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;MaxOutstanding;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;handle(clientRequests)&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-quit&lt;/span&gt;  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 종료 신호를 받을 때까지 대기&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;채널의-채널-channels-of-channels&#34;&gt;채널의 채널 (Channels of channels)&lt;/h2&gt;

&lt;p&gt;Go의 가장 중요한 특성 중 하나는 채널이 다른 것들과 마찬가지로 할당되고 전달될 수 있는 일급값 (first-class value) 이라는 것입니다. 이 속성의 일반적인 사용은 안전한, 병렬 역다중화(parallel demultiplexing)를 구현하는 것입니다.&lt;/p&gt;

&lt;p&gt;이전 섹션의 예제에서, &lt;code&gt;handle&lt;/code&gt; 은 요청에 대해 이상적인 핸들러였으나 우리는 처리되는 타입을 정의하지 않았습니다. 해당 타입이 회신을 하게 되는 채널을 포함하는 경우, 각 클라이언트는 응답에 대한 자신의 경로를 제공 할 수 있습니다. 다음은 &lt;code&gt;Request&lt;/code&gt; 타입의 개략적인 정의입니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Request&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;args&lt;/span&gt;        &lt;span style=&#34;color: #d0d0d0&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;f&lt;/span&gt;           &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;([]&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;resultChan&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;클라이언트는 함수와 그 인자뿐만 아니라 요청 객체 안에서 응답을 수신하게 되는 채널을 제공하고 있습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;sum(a&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(s&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;_,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;v&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;return&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #d0d0d0&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;amp;Request{[]&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;sum,&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)}&lt;/span&gt;
  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 요청 전송&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;clientRequests&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;request&lt;/span&gt;
  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 응답 대기&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;fmt.Printf(&lt;/span&gt;&lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;answer: %d\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-request.resultChan)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;서버 측에서는 핸들러 함수만 수정됩니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;handle(queue&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Request)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;queue&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;req.resultChan&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;req.f(req.args)&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;현실성있게 만들기 위해 해야할 것들이 분명히 많긴 하지만, 이 코드는 속도 제한, 병렬, 넌블락 RPC 시스템을 위한 프레임워크이면서 뮤텍스가 보이지 않습니다.&lt;/p&gt;

&lt;h2 id=&#34;병렬화-parallelization&#34;&gt;병렬화 (Parallelization)&lt;/h2&gt;

&lt;p&gt;이런 아이디어의 또 다른 응용 프로그램은 여러 개의 CPU 코어를 통해 계산을 병렬 처리하는 것입니다. 계산을 독립적으로 실행할 수있는 별도의 부분으로 분해할 수 있다면, 각 부분이 완료 될 때 신호를 보내는 채널들로 병렬 처리를 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;항목들의 벡터에 대해 수행하는 비용이 많이 드는 연산이 있다고 합시다. 그리고 다음의 이상적인 예제에서와 같이 각 항목에 대한 연산의 값은 독립적입니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Vector&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;float64&lt;/span&gt;

  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;//  v[i], v[i+1]에서 v[n-1]까지 연산을 적용&lt;/span&gt;
  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(v&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Vector)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;DoSome(i,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Vector,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;n;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;v[i]&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;u.Op(v[i])&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 이 부분이 완료되면 신호함&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;루프에서 독립적으로 조각들을 실행합니다. CPU당 하나의 조각을 분배합니다. 이들은 어떤 순서로도 완료될 수 있지만 순서는 문제가 되지 않습니다. 그냥 모든 고루틴를 실행 한 후 채널을 비워 완료 신호를 셉니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;numCPU&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// CPU  코어수&lt;/span&gt;

  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(v&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Vector)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;DoAll(u&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Vector)&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;numCPU)&lt;/span&gt;  &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 버퍼는 선택적이나 상식적&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;numCPU;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;v.DoSome(i*&lt;/span&gt;&lt;span style=&#34;color: #24909d&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(v)/numCPU,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(i+&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)*&lt;/span&gt;&lt;span style=&#34;color: #24909d&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(v)/numCPU,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;u,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;c)&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 채널을 비움&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;numCPU;&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;i++&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-c&lt;/span&gt;    &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 한 태스크가 끝날 때까지 대기&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 모두 완료&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;numCPU에 대한 상수값을 생성하기보다는 런타임시에 적절한 어떤 값을 요청할 수 있습니다. &lt;code&gt;runtime.NumCPU&lt;/code&gt; 함수는 장치의 하드웨어 CPU 코어의 수를 반환합니다. 그래서 아래와 같이 작성할 수 있습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;numCPU&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;runtime.NumCPU()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;또한 Go 프로그램은 동시에 실행할 수 있는 사용자 지정 코어수 (user-specified)를 보고하는 (또는 설정하는) &lt;code&gt;runtime.GOMAXPROCS&lt;/code&gt; 함수가 있습니다.  &lt;code&gt;runtime.NumCPU&lt;/code&gt;의 값이 기본값이지만, 쉘 환경 변수를 설정하거나 양수의 인자로 함수를 호출하여 재정의할 수 있습니다. 0으로 호출하면 바로 값을 조회합니다. 따라서 사용자의 리소스 요청을 따르고 싶은 경우, 다음과 같이 작성해야 합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;numCPU&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;runtime.GOMAXPROCS(&lt;/span&gt;&lt;span style=&#34;color: #3677a9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;컴포넌트를 개별적으로 처리함으로써 프로그램을 구조화하는 동시성과 다중 CPU에서 효율성을 위해 계산을 병렬로 처리하는 병렬성의 아이디어를 혼동하지 않도록 주의하시길 바랍니다. Go의 동시성 특징이 어떤 문제를 병렬 계산으로 쉽게 구조화할 수 있지만, Go는 병렬이 아닌 병행 언어입니다. 모든 병렬화 문제가 Go에 들어맞지는 않습니다. 이 구분에 대한 논의는 &lt;a href=&#34;https://blog.golang.org/concurrency-is-not-parallelism&#34;&gt;이 블로그 포스트&lt;/a&gt;에 인용된 토크를 참조하세요.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;역자 주&lt;/strong&gt;: 병행 프로그래밍과 병렬 프로그래밍의 차이는 아래 그림을 참조 (&lt;a href=&#34;http://joearms.github.io/2013/04/05/concurrent-and-parallel-programming.html&#34;&gt;출처&lt;/a&gt;)&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://joearms.github.io/images/con_and_par.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;누설-버퍼-a-leaky-buffer&#34;&gt;누설 버퍼 (A leaky buffer)&lt;/h2&gt;

&lt;p&gt;비병행 아이디어(non-concurrent)도 병행 프로그래밍 도구로 쉽게 표현할 수 있습니다. 다음은 RPC 패키지에서 추출한 예제입니다.클라이언트 고루틴은 어떤 소스를 루프합니다. 아마도 네트워크로부터 데이터를 수신하는 소스겠죠. 버퍼를 할당하고 해제하는 것을 방지하기 위해서는 &lt;code&gt;free list&lt;/code&gt;를 유지하고, 이를 나타내기 위해 버퍼 채널을 사용합니다. 채널이 비어 있으면, 새로운 버퍼를 할당합니다. 메시지 버퍼가 준비되면, &lt;code&gt;serverChan&lt;/code&gt;의 서버로 전송합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;freeList&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Buffer,&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;serverChan&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Buffer)&lt;/span&gt;

  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;client()&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;*Buffer&lt;/span&gt;
          &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 사용할 수 있는 버퍼를 취하거나 그렇지 않다면 할당&lt;/span&gt;
            &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-freeList:&lt;/span&gt;
              &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 하나를 취함. 아무 작업도 하지 않음 &lt;/span&gt;
          &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;:&lt;/span&gt;
              &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 버퍼가 없음. 그래서 새 버퍼를 할당함&lt;/span&gt;
              &lt;span style=&#34;color: #d0d0d0&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #24909d&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;(Buffer)&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;load(b)&lt;/span&gt;              &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 네트워크에서 다음 메세지를 읽음&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;serverChan&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b&lt;/span&gt;      &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 서버에 전송&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;서버 루프는각 클라이언트로부터 메시지를 수신해서 처리하고, free list에 버퍼를 반환합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;server()&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-serverChan&lt;/span&gt;    &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 동작을 위해 대기 &lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;process(b)&lt;/span&gt;
          &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// 가능할 경우 버퍼를 재사용&lt;/span&gt;
          &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;freeList&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;b:&lt;/span&gt;
              &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// free list의 버퍼. 아무 것도 하지 않음&lt;/span&gt;
          &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;:&lt;/span&gt;
              &lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// free list가 꽉 참, 그냥 계속&lt;/span&gt;
          &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #d0d0d0&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;클라이언트는 &lt;code&gt;freeList&lt;/code&gt;에서 버퍼를 획득하려고 시도합니다. 어떤 버퍼도 사용할 수 없는 경우, 새로운 버퍼를 할당합니다. &lt;code&gt;freeList&lt;/code&gt;의 서버 전송은 리스트가 꽉차지 않을 때, 즉 가비지 콜렉터에 의해 회수되도록 버퍼가 바닥으로 떨어졌을 경우 free list에 &lt;code&gt;b&lt;/code&gt;를 다시 둡니다. (&lt;code&gt;select&lt;/code&gt; 구문에서 &lt;code&gt;default&lt;/code&gt;  절은 다른 경우가 준비되지 않은 경우에 실행됩니다. 이는 &lt;code&gt;select&lt;/code&gt;는 절대 블락되지 않는다는 것을 뜻합니다.) 위 구현은 버퍼 채널 및 가비지 컬렉터 장부에 의존하여 단지 몇 줄로 누설 버킷 프리 리스트(leaky bucket free list)을 작성하고 있습니다.&lt;/p&gt;

&lt;p&gt;이상, 나머지는 &lt;a href=&#34;https://code.google.com/p/golang-korea/wiki/EffectiveGo&#34;&gt;여기 한글화 문서&lt;/a&gt;를 참조하길 바란다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>