<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on ziwon.github.io</title>
    <link>https://ziwon.github.io/tags/programming/</link>
    <description>Recent content in Programming on ziwon.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://github.com/ziwon&#34;&gt;Yeongpil Yoon&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 30 Aug 2014 17:23:11 +0900</lastBuildDate>
    
	<atom:link href="https://ziwon.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generics of a Higher Kind</title>
      <link>https://ziwon.github.io/post/generics-of-a-higher-kind/</link>
      <pubDate>Sat, 30 Aug 2014 17:23:11 +0900</pubDate>
      
      <guid>https://ziwon.github.io/post/generics-of-a-higher-kind/</guid>
      <description>1. Introduction 일차 매개변수적 다형성과 고차 타입 생성자 다형성  일차 매개변수적 다형성은 정적 타입 프로그래밍 언어의 표준 요소임 일차 매개변수적 다형성은 제네릭(generic)이라고 부름 제네릭의 한 가지 응용 분야는 콜렉션(collection)  예) List[A] 타입은 주어진 요소 A 타입의 리스트를 표현, A는 자유롭게 선택됨   일차 매개변수적 다형성은 List와 같은 타입 생성자를 도출하며 타입을 추상화 함 그러나 결과로 나온 타입 생성자는 그들 자신을 추상화할 수 없음  예) List와 같은 타입 생성자를 다른 타입 생성자의 타입 인자로 전달할 수 없음   이런 제한은 자연스러운 추상를 정형화하는데 방해가 되며 불필요한 중복 코드로 이어짐  고차 타입 생성자 다형성와 카인드  고차 타입 생성자 다형성을 통해 더 많은 제네럴티를 확보할 수 있음 이 논문에서는 Scala 프로그래밍 언어의 타입 생성자 다형성의 설계와 구현에 대해 살펴봄 Scala 2.</description>
    </item>
    
    <item>
      <title>Lambda Calculus</title>
      <link>https://ziwon.github.io/post/lambda-calculus/</link>
      <pubDate>Tue, 22 Oct 2013 13:03:05 +0900</pubDate>
      
      <guid>https://ziwon.github.io/post/lambda-calculus/</guid>
      <description>람다 대수는 결정문제(decision problem)를 풀기 위해, 계산가능성(computability)의 개념을 정의한 수학적 모델로 1936년 알로존 처치(Alonzo Church)가 고안하였다.
좀 더 구체적으로는 소프트웨어에서 &amp;lsquo;알고리즘이란 무엇인가?&amp;lsquo;를 정의한 클래스(class)나 객체(object)가 아닌 값(function) 중심 언어, 즉 함수형 언어의 계산 모델이다. (같은 해에 처치의 제자였던, 앨런 튜닝은 튜링 머신의 개념으로 계산 모델을 정의했다. Lisp를 만든 [존 매카시](http://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist))도 처치의 제자였다고 한다.)
람다 대수는 그 자체가 이미 하나의 언어로 많은 함수형 프로그래밍 언어가 람다대수에 기초하고 있다.
 functional language = lambda calcus + sugars (ex.</description>
    </item>
    
  </channel>
</rss>